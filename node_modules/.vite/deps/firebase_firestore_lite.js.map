{
  "version": 3,
  "sources": ["../../@firebase/firestore/src/auth/user.ts", "../../@firebase/firestore/src/core/version.ts", "../../@firebase/firestore/src/util/log.ts", "../../@firebase/firestore/src/platform/browser/format_json.ts", "../../@firebase/firestore/src/util/assert.ts", "../../@firebase/firestore/src/util/error.ts", "../../@firebase/firestore/src/util/promise.ts", "../../@firebase/firestore/src/api/credentials.ts", "../../@firebase/firestore/src/core/database_info.ts", "../../@firebase/firestore/src/model/path.ts", "../../@firebase/firestore/src/model/document_key.ts", "../../@firebase/firestore/src/util/input_validation.ts", "../../@firebase/firestore/src/api/long_polling_options.ts", "../../@firebase/firestore/src/util/debug_uid.ts", "../../@firebase/firestore/src/util/types.ts", "../../@firebase/firestore/src/remote/rest_connection.ts", "../../@firebase/firestore/src/remote/rpc_error.ts", "../../@firebase/firestore/src/platform/browser_lite/fetch_connection.ts", "../../@firebase/firestore/src/core/aggregate.ts", "../../@firebase/firestore/src/platform/browser/random_bytes.ts", "../../@firebase/firestore/src/util/misc.ts", "../../@firebase/firestore/src/util/obj.ts", "../../@firebase/firestore/src/util/base64_decode_error.ts", "../../@firebase/firestore/src/util/byte_string.ts", "../../@firebase/firestore/src/platform/browser/base64.ts", "../../@firebase/firestore/src/model/normalize.ts", "../../@firebase/firestore/src/lite-api/timestamp.ts", "../../@firebase/firestore/src/model/server_timestamps.ts", "../../@firebase/firestore/src/model/values.ts", "../../@firebase/firestore/src/core/bound.ts", "../../@firebase/firestore/src/core/filter.ts", "../../@firebase/firestore/src/core/order_by.ts", "../../@firebase/firestore/src/core/snapshot_version.ts", "../../@firebase/firestore/src/util/sorted_map.ts", "../../@firebase/firestore/src/util/sorted_set.ts", "../../@firebase/firestore/src/model/field_mask.ts", "../../@firebase/firestore/src/model/object_value.ts", "../../@firebase/firestore/src/model/document.ts", "../../@firebase/firestore/src/core/target.ts", "../../@firebase/firestore/src/core/query.ts", "../../@firebase/firestore/src/remote/number_serializer.ts", "../../@firebase/firestore/src/model/transform_operation.ts", "../../@firebase/firestore/src/model/mutation.ts", "../../@firebase/firestore/src/remote/serializer.ts", "../../@firebase/firestore/src/platform/browser/serializer.ts", "../../@firebase/firestore/src/remote/backoff.ts", "../../@firebase/firestore/src/remote/datastore.ts", "../../@firebase/firestore/src/lite-api/components.ts", "../../@firebase/firestore/src/platform/browser_lite/connection.ts", "../../@firebase/firestore/src/lite-api/settings.ts", "../../@firebase/firestore/src/local/lru_garbage_collector.ts", "../../@firebase/firestore/src/local/lru_garbage_collector_impl.ts", "../../@firebase/firestore/src/lite-api/database.ts", "../../@firebase/firestore/src/lite-api/aggregate_types.ts", "../../@firebase/firestore/src/lite-api/reference.ts", "../../@firebase/firestore/src/lite-api/bytes.ts", "../../@firebase/firestore/src/lite-api/field_path.ts", "../../@firebase/firestore/src/lite-api/field_value.ts", "../../@firebase/firestore/src/lite-api/geo_point.ts", "../../@firebase/firestore/src/lite-api/user_data_reader.ts", "../../@firebase/firestore/src/lite-api/snapshot.ts", "../../@firebase/firestore/src/lite-api/query.ts", "../../@firebase/firestore/src/lite-api/reference_impl.ts", "../../@firebase/firestore/src/lite-api/user_data_writer.ts", "../../@firebase/firestore/src/lite-api/aggregate.ts", "../../@firebase/firestore/src/lite-api/field_value_impl.ts", "../../@firebase/firestore/src/lite-api/write_batch.ts", "../../@firebase/firestore/src/core/transaction.ts", "../../@firebase/firestore/src/core/transaction_options.ts", "../../@firebase/firestore/src/core/transaction_runner.ts", "../../@firebase/firestore/src/platform/browser/dom.ts", "../../@firebase/firestore/src/util/async_queue.ts", "../../@firebase/firestore/src/util/async_queue_impl.ts", "../../@firebase/firestore/src/local/simple_db.ts", "../../@firebase/firestore/src/lite-api/transaction.ts", "../../@firebase/firestore/lite/register.ts", "../../@firebase/firestore/lite/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n  static readonly MOCK_USER = new User('mock-user');\n\n  constructor(readonly uid: string | null) {}\n\n  isAuthenticated(): boolean {\n    return this.uid != null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n\n  isEqual(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nimport { version } from '../../../firebase/package.json';\nexport let SDK_VERSION = version;\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel, LogLevelString } from '@firebase/logger';\n\nimport { SDK_VERSION } from '../core/version';\nimport { formatJSON } from '../platform/format_json';\n\nexport { LogLevel, LogLevelString };\n\nconst logClient = new Logger('@firebase/firestore');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  logClient.setLogLevel(logLevel);\n}\n\nexport function logDebug(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logError(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * @internal\n */\nexport function logWarn(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Formats an object as a JSON string, suitable for logging. */\nexport function formatJSON(value: unknown): string {\n  return JSON.stringify(value);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\n\nimport { logError } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string = 'Unexpected state'): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nexport function hardAssert(\n  assertion: boolean,\n  message?: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n *\n * @internal\n */\nexport function debugAssert(\n  assertion: boolean,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nexport function debugCast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  debugAssert(\n    obj instanceof constructor,\n    `Expected type '${constructor.name}', but was '${obj.constructor.name}'`\n  );\n  return obj as T;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * The set of Firestore status codes. The codes are the same at the ones\n * exposed by gRPC here:\n * https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n *\n * Possible values:\n * - 'cancelled': The operation was cancelled (typically by the caller).\n * - 'unknown': Unknown error or an error from a different error domain.\n * - 'invalid-argument': Client specified an invalid argument. Note that this\n *   differs from 'failed-precondition'. 'invalid-argument' indicates\n *   arguments that are problematic regardless of the state of the system\n *   (e.g. an invalid field name).\n * - 'deadline-exceeded': Deadline expired before operation could complete.\n *   For operations that change the state of the system, this error may be\n *   returned even if the operation has completed successfully. For example,\n *   a successful response from a server could have been delayed long enough\n *   for the deadline to expire.\n * - 'not-found': Some requested document was not found.\n * - 'already-exists': Some document that we attempted to create already\n *   exists.\n * - 'permission-denied': The caller does not have permission to execute the\n *   specified operation.\n * - 'resource-exhausted': Some resource has been exhausted, perhaps a\n *   per-user quota, or perhaps the entire file system is out of space.\n * - 'failed-precondition': Operation was rejected because the system is not\n *   in a state required for the operation's execution.\n * - 'aborted': The operation was aborted, typically due to a concurrency\n *   issue like transaction aborts, etc.\n * - 'out-of-range': Operation was attempted past the valid range.\n * - 'unimplemented': Operation is not implemented or not supported/enabled.\n * - 'internal': Internal errors. Means some invariants expected by\n *   underlying system has been broken. If you see one of these errors,\n *   something is very broken.\n * - 'unavailable': The service is currently unavailable. This is most likely\n *   a transient condition and may be corrected by retrying with a backoff.\n * - 'data-loss': Unrecoverable data loss or corruption.\n * - 'unauthenticated': The request does not have valid authentication\n *   credentials for the operation.\n */\nexport type FirestoreErrorCode =\n  | 'cancelled'\n  | 'unknown'\n  | 'invalid-argument'\n  | 'deadline-exceeded'\n  | 'not-found'\n  | 'already-exists'\n  | 'permission-denied'\n  | 'resource-exhausted'\n  | 'failed-precondition'\n  | 'aborted'\n  | 'out-of-range'\n  | 'unimplemented'\n  | 'internal'\n  | 'unavailable'\n  | 'data-loss'\n  | 'unauthenticated';\n\n/**\n * Error Codes describing the different ways Firestore can fail. These come\n * directly from GRPC.\n */\nexport type Code = FirestoreErrorCode;\n\nexport const Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok' as FirestoreErrorCode,\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled' as FirestoreErrorCode,\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown' as FirestoreErrorCode,\n\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument' as FirestoreErrorCode,\n\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded' as FirestoreErrorCode,\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found' as FirestoreErrorCode,\n\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists' as FirestoreErrorCode,\n\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller can not be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied' as FirestoreErrorCode,\n\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated' as FirestoreErrorCode,\n\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted' as FirestoreErrorCode,\n\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition' as FirestoreErrorCode,\n\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted' as FirestoreErrorCode,\n\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range' as FirestoreErrorCode,\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented' as FirestoreErrorCode,\n\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal' as FirestoreErrorCode,\n\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable' as FirestoreErrorCode,\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss' as FirestoreErrorCode\n};\n\n/** An error returned by a Firestore operation. */\nexport class FirestoreError extends FirebaseError {\n  /** The stack of the error. */\n  readonly stack?: string;\n\n  /** @hideconstructor */\n  constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    readonly code: FirestoreErrorCode,\n    /**\n     * A custom error description.\n     */\n    readonly message: string\n  ) {\n    super(code, message);\n\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Resolver<R> {\n  (value: R | Promise<R>): void;\n}\n\nexport interface Rejecter {\n  (reason?: Error): void;\n}\n\nexport class Deferred<R = void> {\n  promise: Promise<R>;\n  // Assigned synchronously in constructor by Promise constructor callback.\n  resolve!: Resolver<R>;\n  reject!: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and a function from a value to a Promise. The function is run on each\n * value sequentially, waiting for the previous promise to resolve before starting the next one.\n * The returned promise resolves once the function has been run on all values.\n */\nexport function sequence<T>(\n  values: T[],\n  fn: (value: T) => Promise<void>\n): Promise<void> {\n  let p = Promise.resolve();\n  for (const value of values) {\n    p = p.then(() => fn(value));\n  }\n  return p;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { User } from '../auth/user';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { Deferred } from '../util/promise';\n\n// TODO(mikelehen): This should be split into multiple files and probably\n// moved to an auth/ folder to match other platforms.\n\n/**\n * @internal\n */\nexport type AuthTokenFactory = () => string;\n\n/**\n * @internal\n */\nexport interface FirstPartyCredentialsSettings {\n  // These are external types. Prevent minification.\n  ['type']: 'firstParty';\n  ['sessionIndex']: string;\n  ['iamToken']: string | null;\n  ['authTokenFactory']: AuthTokenFactory | null;\n}\n\nexport interface ProviderCredentialsSettings {\n  // These are external types. Prevent minification.\n  ['type']: 'provider';\n  ['client']: CredentialsProvider<User>;\n}\n\n/** Settings for private credentials */\nexport type CredentialsSettings =\n  | FirstPartyCredentialsSettings\n  | ProviderCredentialsSettings;\n\nexport type TokenType = 'OAuth' | 'FirstParty' | 'AppCheck';\nexport interface Token {\n  /** Type of token. */\n  type: TokenType;\n\n  /**\n   * The user with which the token is associated (used for persisting user\n   * state on disk, etc.).\n   * This will be null for Tokens of the type 'AppCheck'.\n   */\n  user?: User;\n\n  /** Header values to set for this token */\n  headers: Map<string, string>;\n}\n\nexport class OAuthToken implements Token {\n  type = 'OAuth' as TokenType;\n  headers = new Map();\n\n  constructor(value: string, public user: User) {\n    this.headers.set('Authorization', `Bearer ${value}`);\n  }\n}\n\n/**\n * A Listener for credential change events. The listener should fetch a new\n * token and may need to invalidate other state if the current user has also\n * changed.\n */\nexport type CredentialChangeListener<T> = (credential: T) => Promise<void>;\n\n/**\n * Provides methods for getting the uid and token for the current user and\n * listening for changes.\n */\nexport interface CredentialsProvider<T> {\n  /**\n   * Starts the credentials provider and specifies a listener to be notified of\n   * credential changes (sign-in / sign-out, token changes). It is immediately\n   * called once with the initial user.\n   *\n   * The change listener is invoked on the provided AsyncQueue.\n   */\n  start(\n    asyncQueue: AsyncQueue,\n    changeListener: CredentialChangeListener<T>\n  ): void;\n\n  /** Requests a token for the current user. */\n  getToken(): Promise<Token | null>;\n\n  /**\n   * Marks the last retrieved token as invalid, making the next GetToken request\n   * force-refresh the token.\n   */\n  invalidateToken(): void;\n\n  shutdown(): void;\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */\nexport class EmptyAuthCredentialsProvider implements CredentialsProvider<User> {\n  getToken(): Promise<Token | null> {\n    return Promise.resolve<Token | null>(null);\n  }\n\n  invalidateToken(): void {}\n\n  start(\n    asyncQueue: AsyncQueue,\n    changeListener: CredentialChangeListener<User>\n  ): void {\n    // Fire with initial user.\n    asyncQueue.enqueueRetryable(() => changeListener(User.UNAUTHENTICATED));\n  }\n\n  shutdown(): void {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */\nexport class EmulatorAuthCredentialsProvider\n  implements CredentialsProvider<User>\n{\n  constructor(private token: Token) {}\n\n  /**\n   * Stores the listener registered with setChangeListener()\n   * This isn't actually necessary since the UID never changes, but we use this\n   * to verify the listen contract is adhered to in tests.\n   */\n  private changeListener: CredentialChangeListener<User> | null = null;\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve(this.token);\n  }\n\n  invalidateToken(): void {}\n\n  start(\n    asyncQueue: AsyncQueue,\n    changeListener: CredentialChangeListener<User>\n  ): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    asyncQueue.enqueueRetryable(() => changeListener(this.token.user!));\n  }\n\n  shutdown(): void {\n    this.changeListener = null;\n  }\n}\n\n/** Credential provider for the Lite SDK. */\nexport class LiteAuthCredentialsProvider implements CredentialsProvider<User> {\n  private auth: FirebaseAuthInternal | null = null;\n\n  constructor(authProvider: Provider<FirebaseAuthInternalName>) {\n    authProvider.onInit(auth => {\n      this.auth = auth;\n    });\n  }\n\n  getToken(): Promise<Token | null> {\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken().then(tokenData => {\n      if (tokenData) {\n        hardAssert(\n          typeof tokenData.accessToken === 'string',\n          'Invalid tokenData returned from getToken():' + tokenData\n        );\n        return new OAuthToken(\n          tokenData.accessToken,\n          new User(this.auth!.getUid())\n        );\n      } else {\n        return null;\n      }\n    });\n  }\n\n  invalidateToken(): void {}\n\n  start(\n    asyncQueue: AsyncQueue,\n    changeListener: CredentialChangeListener<User>\n  ): void {}\n\n  shutdown(): void {}\n}\n\nexport class FirebaseAuthCredentialsProvider\n  implements CredentialsProvider<User>\n{\n  /**\n   * The auth token listener registered with FirebaseApp, retained here so we\n   * can unregister it.\n   */\n  private tokenListener!: () => void;\n\n  /** Tracks the current User. */\n  private currentUser: User = User.UNAUTHENTICATED;\n\n  /**\n   * Counter used to detect if the token changed while a getToken request was\n   * outstanding.\n   */\n  private tokenCounter = 0;\n\n  private forceRefresh = false;\n\n  private auth: FirebaseAuthInternal | null = null;\n\n  constructor(private authProvider: Provider<FirebaseAuthInternalName>) {}\n\n  start(\n    asyncQueue: AsyncQueue,\n    changeListener: CredentialChangeListener<User>\n  ): void {\n    let lastTokenId = this.tokenCounter;\n\n    // A change listener that prevents double-firing for the same token change.\n    const guardedChangeListener: (user: User) => Promise<void> = user => {\n      if (this.tokenCounter !== lastTokenId) {\n        lastTokenId = this.tokenCounter;\n        return changeListener(user);\n      } else {\n        return Promise.resolve();\n      }\n    };\n\n    // A promise that can be waited on to block on the next token change.\n    // This promise is re-created after each change.\n    let nextToken = new Deferred<void>();\n\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      nextToken.resolve();\n      nextToken = new Deferred<void>();\n      asyncQueue.enqueueRetryable(() =>\n        guardedChangeListener(this.currentUser)\n      );\n    };\n\n    const awaitNextToken: () => void = () => {\n      const currentTokenAttempt = nextToken;\n      asyncQueue.enqueueRetryable(async () => {\n        await currentTokenAttempt.promise;\n        await guardedChangeListener(this.currentUser);\n      });\n    };\n\n    const registerAuth = (auth: FirebaseAuthInternal): void => {\n      logDebug('FirebaseAuthCredentialsProvider', 'Auth detected');\n      this.auth = auth;\n      this.auth.addAuthTokenListener(this.tokenListener);\n      awaitNextToken();\n    };\n\n    this.authProvider.onInit(auth => registerAuth(auth));\n\n    // Our users can initialize Auth right after Firestore, so we give it\n    // a chance to register itself with the component framework before we\n    // determine whether to start up in unauthenticated mode.\n    setTimeout(() => {\n      if (!this.auth) {\n        const auth = this.authProvider.getImmediate({ optional: true });\n        if (auth) {\n          registerAuth(auth);\n        } else {\n          // If auth is still not available, proceed with `null` user\n          logDebug('FirebaseAuthCredentialsProvider', 'Auth not yet detected');\n          nextToken.resolve();\n          nextToken = new Deferred<void>();\n        }\n      }\n    }, 0);\n\n    awaitNextToken();\n  }\n\n  getToken(): Promise<Token | null> {\n    debugAssert(\n      this.tokenListener != null,\n      'FirebaseAuthCredentialsProvider not started.'\n    );\n\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        logDebug(\n          'FirebaseAuthCredentialsProvider',\n          'getToken aborted due to token change.'\n        );\n        return this.getToken();\n      } else {\n        if (tokenData) {\n          hardAssert(\n            typeof tokenData.accessToken === 'string',\n            'Invalid tokenData returned from getToken():' + tokenData\n          );\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n\n  invalidateToken(): void {\n    this.forceRefresh = true;\n  }\n\n  shutdown(): void {\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener!);\n    }\n  }\n\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  private getUser(): User {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(\n      currentUid === null || typeof currentUid === 'string',\n      'Received invalid UID: ' + currentUid\n    );\n    return new User(currentUid);\n  }\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nexport class FirstPartyToken implements Token {\n  type = 'FirstParty' as TokenType;\n  user = User.FIRST_PARTY;\n  private _headers = new Map();\n\n  constructor(\n    private readonly sessionIndex: string,\n    private readonly iamToken: string | null,\n    private readonly authTokenFactory: AuthTokenFactory | null\n  ) {}\n\n  /**\n   * Gets an authorization token, using a provided factory function, or return\n   * null.\n   */\n  private getAuthToken(): string | null {\n    if (this.authTokenFactory) {\n      return this.authTokenFactory();\n    } else {\n      return null;\n    }\n  }\n\n  get headers(): Map<string, string> {\n    this._headers.set('X-Goog-AuthUser', this.sessionIndex);\n    // Use array notation to prevent minification\n    const authHeaderTokenValue = this.getAuthToken();\n    if (authHeaderTokenValue) {\n      this._headers.set('Authorization', authHeaderTokenValue);\n    }\n    if (this.iamToken) {\n      this._headers.set('X-Goog-Iam-Authorization-Token', this.iamToken);\n    }\n\n    return this._headers;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nexport class FirstPartyAuthCredentialsProvider\n  implements CredentialsProvider<User>\n{\n  constructor(\n    private sessionIndex: string,\n    private iamToken: string | null,\n    private authTokenFactory: AuthTokenFactory | null\n  ) {}\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve(\n      new FirstPartyToken(\n        this.sessionIndex,\n        this.iamToken,\n        this.authTokenFactory\n      )\n    );\n  }\n\n  start(\n    asyncQueue: AsyncQueue,\n    changeListener: CredentialChangeListener<User>\n  ): void {\n    // Fire with initial uid.\n    asyncQueue.enqueueRetryable(() => changeListener(User.FIRST_PARTY));\n  }\n\n  shutdown(): void {}\n\n  invalidateToken(): void {}\n}\n\nexport class AppCheckToken implements Token {\n  type = 'AppCheck' as TokenType;\n  headers = new Map();\n\n  constructor(private value: string) {\n    if (value && value.length > 0) {\n      this.headers.set('x-firebase-appcheck', this.value);\n    }\n  }\n}\n\nexport class FirebaseAppCheckTokenProvider\n  implements CredentialsProvider<string>\n{\n  /**\n   * The AppCheck token listener registered with FirebaseApp, retained here so\n   * we can unregister it.\n   */\n  private tokenListener!: AppCheckTokenListener;\n  private forceRefresh = false;\n  private appCheck: FirebaseAppCheckInternal | null = null;\n  private latestAppCheckToken: string | null = null;\n\n  constructor(\n    private appCheckProvider: Provider<AppCheckInternalComponentName>\n  ) {}\n\n  start(\n    asyncQueue: AsyncQueue,\n    changeListener: CredentialChangeListener<string>\n  ): void {\n    const onTokenChanged: (\n      tokenResult: AppCheckTokenResult\n    ) => Promise<void> = tokenResult => {\n      if (tokenResult.error != null) {\n        logDebug(\n          'FirebaseAppCheckTokenProvider',\n          `Error getting App Check token; using placeholder token instead. Error: ${tokenResult.error.message}`\n        );\n      }\n      const tokenUpdated = tokenResult.token !== this.latestAppCheckToken;\n      this.latestAppCheckToken = tokenResult.token;\n      logDebug(\n        'FirebaseAppCheckTokenProvider',\n        `Received ${tokenUpdated ? 'new' : 'existing'} token.`\n      );\n      return tokenUpdated\n        ? changeListener(tokenResult.token)\n        : Promise.resolve();\n    };\n\n    this.tokenListener = (tokenResult: AppCheckTokenResult) => {\n      asyncQueue.enqueueRetryable(() => onTokenChanged(tokenResult));\n    };\n\n    const registerAppCheck = (appCheck: FirebaseAppCheckInternal): void => {\n      logDebug('FirebaseAppCheckTokenProvider', 'AppCheck detected');\n      this.appCheck = appCheck;\n      this.appCheck.addTokenListener(this.tokenListener);\n    };\n\n    this.appCheckProvider.onInit(appCheck => registerAppCheck(appCheck));\n\n    // Our users can initialize AppCheck after Firestore, so we give it\n    // a chance to register itself with the component framework.\n    setTimeout(() => {\n      if (!this.appCheck) {\n        const appCheck = this.appCheckProvider.getImmediate({ optional: true });\n        if (appCheck) {\n          registerAppCheck(appCheck);\n        } else {\n          // If AppCheck is still not available, proceed without it.\n          logDebug(\n            'FirebaseAppCheckTokenProvider',\n            'AppCheck not yet detected'\n          );\n        }\n      }\n    }, 0);\n  }\n\n  getToken(): Promise<Token | null> {\n    debugAssert(\n      this.tokenListener != null,\n      'FirebaseAppCheckTokenProvider not started.'\n    );\n\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.appCheck) {\n      return Promise.resolve(null);\n    }\n\n    return this.appCheck.getToken(forceRefresh).then(tokenResult => {\n      if (tokenResult) {\n        hardAssert(\n          typeof tokenResult.token === 'string',\n          'Invalid tokenResult returned from getToken():' + tokenResult\n        );\n        this.latestAppCheckToken = tokenResult.token;\n        return new AppCheckToken(tokenResult.token);\n      } else {\n        return null;\n      }\n    });\n  }\n\n  invalidateToken(): void {\n    this.forceRefresh = true;\n  }\n\n  shutdown(): void {\n    if (this.appCheck) {\n      this.appCheck.removeTokenListener(this.tokenListener!);\n    }\n  }\n}\n\n/**\n * An AppCheck token provider that always yields an empty token.\n * @internal\n */\nexport class EmptyAppCheckTokenProvider implements CredentialsProvider<string> {\n  getToken(): Promise<Token | null> {\n    return Promise.resolve<Token | null>(new AppCheckToken(''));\n  }\n\n  invalidateToken(): void {}\n\n  start(\n    asyncQueue: AsyncQueue,\n    changeListener: CredentialChangeListener<string>\n  ): void {}\n\n  shutdown(): void {}\n}\n\n/** AppCheck token provider for the Lite SDK. */\nexport class LiteAppCheckTokenProvider implements CredentialsProvider<string> {\n  private appCheck: FirebaseAppCheckInternal | null = null;\n\n  constructor(\n    private appCheckProvider: Provider<AppCheckInternalComponentName>\n  ) {\n    appCheckProvider.onInit(appCheck => {\n      this.appCheck = appCheck;\n    });\n  }\n\n  getToken(): Promise<Token | null> {\n    if (!this.appCheck) {\n      return Promise.resolve(null);\n    }\n\n    return this.appCheck.getToken().then(tokenResult => {\n      if (tokenResult) {\n        hardAssert(\n          typeof tokenResult.token === 'string',\n          'Invalid tokenResult returned from getToken():' + tokenResult\n        );\n        return new AppCheckToken(tokenResult.token);\n      } else {\n        return null;\n      }\n    });\n  }\n\n  invalidateToken(): void {}\n\n  start(\n    asyncQueue: AsyncQueue,\n    changeListener: CredentialChangeListener<string>\n  ): void {}\n\n  shutdown(): void {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeAuthCredentialsProvider(\n  credentials?: CredentialsSettings\n): CredentialsProvider<User> {\n  if (!credentials) {\n    return new EmptyAuthCredentialsProvider();\n  }\n  switch (credentials['type']) {\n    case 'firstParty':\n      return new FirstPartyAuthCredentialsProvider(\n        credentials['sessionIndex'] || '0',\n        credentials['iamToken'] || null,\n        credentials['authTokenFactory'] || null\n      );\n\n    case 'provider':\n      return credentials['client'];\n\n    default:\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'makeAuthCredentialsProvider failed due to invalid credential type'\n      );\n  }\n}\n", "import { FirebaseApp } from '@firebase/app';\n\nimport { ExperimentalLongPollingOptions } from '../api/long_polling_options';\nimport { Code, FirestoreError } from '../util/error';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId - The database to use.\n   * @param appId - The Firebase App Id.\n   * @param persistenceKey - A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host - The Firestore backend host to connect to.\n   * @param ssl - Whether to use SSL when connecting.\n   * @param forceLongPolling - Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n   * option when using WebChannel as the network transport.\n   * @param longPollingOptions Options that configure long-polling.\n   * @param useFetchStreams Whether to use the Fetch API instead of\n   * XMLHTTPRequest\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly appId: string,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean,\n    readonly forceLongPolling: boolean,\n    readonly autoDetectLongPolling: boolean,\n    readonly longPollingOptions: ExperimentalLongPollingOptions,\n    readonly useFetchStreams: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nexport const DEFAULT_DATABASE_NAME = '(default)';\n\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  static empty(): DatabaseId {\n    return new DatabaseId('', '');\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n}\n\nexport function databaseIdFromApp(\n  app: FirebaseApp,\n  database?: string\n): DatabaseId {\n  if (!Object.prototype.hasOwnProperty.apply(app.options, ['projectId'])) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      '\"projectId\" not provided in firebase.initializeApp.'\n    );\n  }\n\n  return new DatabaseId(app.options.projectId!, database);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DOCUMENT_KEY_NAME = '__name__';\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nabstract class BasePath<B extends BasePath<B>> {\n  private segments: string[];\n  private offset: number;\n  private len: number;\n\n  constructor(segments: string[], offset?: number, length?: number) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail('offset ' + offset + ' out of range ' + segments.length);\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail('length ' + length + ' out of range ' + (segments.length - offset));\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  /**\n   * Abstract constructor method to construct an instance of B with the given\n   * parameters.\n   */\n  protected abstract construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): B;\n\n  /**\n   * Returns a String representation.\n   *\n   * Implementing classes are required to provide deterministic implementations as\n   * the String representation is used to obtain canonical Query IDs.\n   */\n  abstract toString(): string;\n\n  get length(): number {\n    return this.len;\n  }\n\n  isEqual(other: B): boolean {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath: string | B): B {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n\n  /** The index of one past the last segment of the path. */\n  private limit(): number {\n    return this.offset + this.length;\n  }\n\n  popFirst(size?: number): B {\n    size = size === undefined ? 1 : size;\n    debugAssert(\n      this.length >= size,\n      \"Can't call popFirst() with less segments\"\n    );\n    return this.construct(\n      this.segments,\n      this.offset + size,\n      this.length - size\n    );\n  }\n\n  popLast(): B {\n    debugAssert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n    return this.segments[this.offset];\n  }\n\n  lastSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call lastSegment() on empty path\");\n    return this.get(this.length - 1);\n  }\n\n  get(index: number): string {\n    debugAssert(index < this.length, 'Index out of range');\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other: this): boolean {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild: this): boolean {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn: (segment: string) => void): void {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray(): string[] {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator<T extends BasePath<T>>(\n    p1: BasePath<T>,\n    p2: BasePath<T>\n  ): number {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */\nexport class ResourcePath extends BasePath<ResourcePath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): ResourcePath {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString(): string {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    return this.toArray().join('/');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Creates a resource path from the given slash-delimited string. If multiple\n   * arguments are provided, all components are combined. Leading and trailing\n   * slashes from all components are ignored.\n   */\n  static fromString(...pathComponents: string[]): ResourcePath {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    const segments: string[] = [];\n    for (const path of pathComponents) {\n      if (path.indexOf('//') >= 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid segment (${path}). Paths must not contain // in them.`\n        );\n      }\n      // Strip leading and traling slashed.\n      segments.push(...path.split('/').filter(segment => segment.length > 0));\n    }\n\n    return new ResourcePath(segments);\n  }\n\n  static emptyPath(): ResourcePath {\n    return new ResourcePath([]);\n  }\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */\nexport class FieldPath extends BasePath<FieldPath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): FieldPath {\n    return new FieldPath(segments, offset, length);\n  }\n\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  private static isValidIdentifier(segment: string): boolean {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString(): string {\n    return this.toArray()\n      .map(str => {\n        str = str.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`');\n        if (!FieldPath.isValidIdentifier(str)) {\n          str = '`' + str + '`';\n        }\n        return str;\n      })\n      .join('.');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField(): boolean {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField(): FieldPath {\n    return new FieldPath([DOCUMENT_KEY_NAME]);\n  }\n\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path: string): FieldPath {\n    const segments: string[] = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = (): void => {\n      if (current.length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field path (${path}). Paths must not be empty, begin ` +\n            `with '.', end with '.', or contain '..'`\n        );\n      }\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has trailing escape character: ' + path\n          );\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has invalid escape sequence: ' + path\n          );\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Unterminated ` in path: ' + path\n      );\n    }\n\n    return new FieldPath(segments);\n  }\n\n  static emptyPath(): FieldPath {\n    return new FieldPath([]);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\n/**\n * @internal\n */\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    debugAssert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  static fromPath(path: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(path));\n  }\n\n  static fromName(name: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n\n  static empty(): DocumentKey {\n    return new DocumentKey(ResourcePath.emptyPath());\n  }\n\n  get collectionGroup(): string {\n    debugAssert(\n      !this.path.isEmpty(),\n      'Cannot get collection group for empty key'\n    );\n    return this.path.popLast().lastSegment();\n  }\n\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId: string): boolean {\n    return (\n      this.path.length >= 2 &&\n      this.path.get(this.path.length - 2) === collectionId\n    );\n  }\n\n  /** Returns the collection group (i.e. the name of the parent collection) for this key. */\n  getCollectionGroup(): string {\n    debugAssert(\n      !this.path.isEmpty(),\n      'Cannot get collection group for empty key'\n    );\n    return this.path.get(this.path.length - 2);\n  }\n\n  /** Returns the fully qualified path to the parent collection. */\n  getCollectionPath(): ResourcePath {\n    return this.path.popLast();\n  }\n\n  isEqual(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments - The segments of the path to the document\n   * @returns A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\n\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\n\n/** Types accepted by validateType() and related methods for validation. */\nexport type ValidationType =\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'boolean'\n  | 'number'\n  | 'string'\n  | 'non-empty string';\n\nexport function validateNonEmptyArgument(\n  functionName: string,\n  argumentName: string,\n  argument?: string\n): asserts argument is string {\n  if (!argument) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() cannot be called with an empty ${argumentName}.`\n    );\n  }\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\nexport function validateIsNotUsedTogether(\n  optionName1: string,\n  argument1: boolean | undefined,\n  optionName2: string,\n  argument2: boolean | undefined\n): void {\n  if (argument1 === true && argument2 === true) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `${optionName1} and ${optionName2} cannot be used together.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nexport function validateDocumentPath(path: ResourcePath): void {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid document reference. Document references must have an even number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nexport function validateCollectionPath(path: ResourcePath): void {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid collection reference. Collection references must have an odd number of segments, but ${path} has ${path.length}.`\n    );\n  }\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    (Object.getPrototypeOf(input) === Object.prototype ||\n      Object.getPrototypeOf(input) === null)\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: unknown): string {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input!);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    return input.constructor.name;\n  }\n  return null;\n}\n\n/**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */\nexport function cast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  if ('_delegate' in obj) {\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj = (obj as any)._delegate;\n  }\n\n  if (!(obj instanceof constructor)) {\n    if (constructor.name === obj.constructor.name) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Type does not match the expected instance. Did you pass a ' +\n          `reference from a different Firestore SDK?`\n      );\n    } else {\n      const description = valueDescription(obj);\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Expected type '${constructor.name}', but it was: ${description}`\n      );\n    }\n  }\n  return obj as T;\n}\n\nexport function validatePositiveNumber(functionName: string, n: number): void {\n  if (n <= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a positive number, but it was: ${n}.`\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Options that configure the SDK’s underlying network transport (WebChannel)\n * when long-polling is used.\n *\n * Note: This interface is \"experimental\" and is subject to change.\n *\n * See `FirestoreSettings.experimentalAutoDetectLongPolling`,\n * `FirestoreSettings.experimentalForceLongPolling`, and\n * `FirestoreSettings.experimentalLongPollingOptions`.\n */\nexport interface ExperimentalLongPollingOptions {\n  /**\n   * The desired maximum timeout interval, in seconds, to complete a\n   * long-polling GET response. Valid values are between 5 and 30, inclusive.\n   * Floating point values are allowed and will be rounded to the nearest\n   * millisecond.\n   *\n   * By default, when long-polling is used the \"hanging GET\" request sent by\n   * the client times out after 30 seconds. To request a different timeout\n   * from the server, set this setting with the desired timeout.\n   *\n   * Changing the default timeout may be useful, for example, if the buffering\n   * proxy that necessitated enabling long-polling in the first place has a\n   * shorter timeout for hanging GET requests, in which case setting the\n   * long-polling timeout to a shorter value, such as 25 seconds, may fix\n   * prematurely-closed hanging GET requests.\n   * For example, see https://github.com/firebase/firebase-js-sdk/issues/6987.\n   */\n  timeoutSeconds?: number;\n}\n\n/**\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\n */\nexport function longPollingOptionsEqual(\n  options1: ExperimentalLongPollingOptions,\n  options2: ExperimentalLongPollingOptions\n): boolean {\n  return options1.timeoutSeconds === options2.timeoutSeconds;\n}\n\n/**\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\n * option values as the given instance.\n */\nexport function cloneLongPollingOptions(\n  options: ExperimentalLongPollingOptions\n): ExperimentalLongPollingOptions {\n  const clone: ExperimentalLongPollingOptions = {};\n\n  if (options.timeoutSeconds !== undefined) {\n    clone.timeoutSeconds = options.timeoutSeconds;\n  }\n\n  return clone;\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */\nlet lastUniqueDebugId: number | null = null;\n\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\nfunction generateInitialUniqueDebugId(): number {\n  const minResult = 0x10000000;\n  const maxResult = 0x90000000;\n  const resultRange = maxResult - minResult;\n  const resultOffset = Math.round(resultRange * Math.random());\n  return minResult + resultOffset;\n}\n\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\nexport function generateUniqueDebugId(): string {\n  if (lastUniqueDebugId === null) {\n    lastUniqueDebugId = generateInitialUniqueDebugId();\n  } else {\n    lastUniqueDebugId++;\n  }\n  return '0x' + lastUniqueDebugId.toString(16);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sentinel value that sorts before any Mutation Batch ID. */\nexport const BATCHID_UNKNOWN = -1;\n\n// An Object whose keys and values are strings.\nexport interface StringMap {\n  [key: string]: string;\n}\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/** Returns whether the value represents -0. */\nexport function isNegativeZero(value: number): boolean {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === 0 && 1 / value === 1 / -0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: unknown): boolean {\n  return (\n    typeof value === 'number' &&\n    Number.isInteger(value) &&\n    !isNegativeZero(value) &&\n    value <= Number.MAX_SAFE_INTEGER &&\n    value >= Number.MIN_SAFE_INTEGER\n  );\n}\n\n/** The subset of the browser's Window interface used by the SDK. */\nexport interface WindowLike {\n  readonly localStorage: Storage;\n  readonly indexedDB: IDBFactory | null;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n\n/** The subset of the browser's Document interface used by the SDK. */\nexport interface DocumentLike {\n  readonly visibilityState: DocumentVisibilityState;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../../src/core/version';\nimport { Token } from '../api/credentials';\nimport {\n  DatabaseId,\n  DatabaseInfo,\n  DEFAULT_DATABASE_NAME\n} from '../core/database_info';\nimport { debugAssert } from '../util/assert';\nimport { generateUniqueDebugId } from '../util/debug_uid';\nimport { FirestoreError } from '../util/error';\nimport { logDebug, logWarn } from '../util/log';\nimport { StringMap } from '../util/types';\n\nimport { Connection, Stream } from './connection';\n\nconst LOG_TAG = 'RestConnection';\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\nconst RPC_NAME_URL_MAPPING: StringMap = {};\n\nRPC_NAME_URL_MAPPING['BatchGetDocuments'] = 'batchGet';\nRPC_NAME_URL_MAPPING['Commit'] = 'commit';\nRPC_NAME_URL_MAPPING['RunQuery'] = 'runQuery';\nRPC_NAME_URL_MAPPING['RunAggregationQuery'] = 'runAggregationQuery';\n\nconst RPC_URL_VERSION = 'v1';\n\n// SDK_VERSION is updated to different value at runtime depending on the entry point,\n// so we need to get its value when we need it in a function.\nfunction getGoogApiClientValue(): string {\n  return 'gl-js/ fire/' + SDK_VERSION;\n}\n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nexport abstract class RestConnection implements Connection {\n  protected readonly databaseId: DatabaseId;\n  protected readonly baseUrl: string;\n  private readonly databasePath: string;\n  private readonly requestParams: string;\n\n  get shouldResourcePathBeIncludedInRequest(): boolean {\n    // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n    // where to run the query, and expect the `request` to NOT specify the \"path\".\n    return false;\n  }\n\n  constructor(private readonly databaseInfo: DatabaseInfo) {\n    this.databaseId = databaseInfo.databaseId;\n    const proto = databaseInfo.ssl ? 'https' : 'http';\n    const projectId = encodeURIComponent(this.databaseId.projectId);\n    const databaseId = encodeURIComponent(this.databaseId.database);\n    this.baseUrl = proto + '://' + databaseInfo.host;\n    this.databasePath = `projects/${projectId}/databases/${databaseId}`;\n    this.requestParams =\n      this.databaseId.database === DEFAULT_DATABASE_NAME\n        ? `project_id=${projectId}`\n        : `project_id=${projectId}&database_id=${databaseId}`;\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    req: Req,\n    authToken: Token | null,\n    appCheckToken: Token | null\n  ): Promise<Resp> {\n    const streamId = generateUniqueDebugId();\n    const url = this.makeUrl(rpcName, path);\n    logDebug(LOG_TAG, `Sending RPC '${rpcName}' ${streamId}:`, url, req);\n\n    const headers: StringMap = {\n      'google-cloud-resource-prefix': this.databasePath,\n      'x-goog-request-params': this.requestParams\n    };\n    this.modifyHeadersForRequest(headers, authToken, appCheckToken);\n\n    return this.performRPCRequest<Req, Resp>(rpcName, url, headers, req).then(\n      response => {\n        logDebug(LOG_TAG, `Received RPC '${rpcName}' ${streamId}: `, response);\n        return response;\n      },\n      (err: FirestoreError) => {\n        logWarn(\n          LOG_TAG,\n          `RPC '${rpcName}' ${streamId} failed with error: `,\n          err,\n          'url: ',\n          url,\n          'request:',\n          req\n        );\n        throw err;\n      }\n    );\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    request: Req,\n    authToken: Token | null,\n    appCheckToken: Token | null,\n    expectedResponseCount?: number\n  ): Promise<Resp[]> {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.invokeRPC<Req, Resp[]>(\n      rpcName,\n      path,\n      request,\n      authToken,\n      appCheckToken\n    );\n  }\n\n  abstract openStream<Req, Resp>(\n    rpcName: string,\n    authToken: Token | null,\n    appCheckToken: Token | null\n  ): Stream<Req, Resp>;\n\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  protected modifyHeadersForRequest(\n    headers: StringMap,\n    authToken: Token | null,\n    appCheckToken: Token | null\n  ): void {\n    headers['X-Goog-Api-Client'] = getGoogApiClientValue();\n\n    // Content-Type: text/plain will avoid preflight requests which might\n    // mess with CORS and redirects by proxies. If we add custom headers\n    // we will need to change this code to potentially use the $httpOverwrite\n    // parameter supported by ESF to avoid triggering preflight requests.\n    headers['Content-Type'] = 'text/plain';\n\n    if (this.databaseInfo.appId) {\n      headers['X-Firebase-GMPID'] = this.databaseInfo.appId;\n    }\n\n    if (authToken) {\n      authToken.headers.forEach((value, key) => (headers[key] = value));\n    }\n    if (appCheckToken) {\n      appCheckToken.headers.forEach((value, key) => (headers[key] = value));\n    }\n  }\n\n  /**\n   * Performs an RPC request using an implementation specific networking layer.\n   */\n  protected abstract performRPCRequest<Req, Resp>(\n    rpcName: string,\n    url: string,\n    headers: StringMap,\n    body: Req\n  ): Promise<Resp>;\n\n  private makeUrl(rpcName: string, path: string): string {\n    const urlRpcName = RPC_NAME_URL_MAPPING[rpcName];\n    debugAssert(\n      urlRpcName !== undefined,\n      'Unknown REST mapping for: ' + rpcName\n    );\n    return `${this.baseUrl}/${RPC_URL_VERSION}/${path}:${urlRpcName}`;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport { logError } from '../util/log';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a write operation.\n *\n * Write operations must be handled specially because as of b/119437764, ABORTED\n * errors on the write stream should be retried too (even though ABORTED errors\n * are not generally retryable).\n *\n * Note that during the initial handshake on the write stream an ABORTED error\n * signals that we should discard our stream token (i.e. it is permanent). This\n * means a handshake error should be classified with isPermanentError, above.\n */\nexport function isPermanentWriteError(code: Code): boolean {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // lookup by string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number | undefined): Code {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status?: number): Code {\n  if (status === undefined) {\n    logError('RPC_ERROR', 'HTTP error has no status');\n    return Code.UNKNOWN;\n  }\n\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.FAILED_PRECONDITION;\n    // Other possibilities based on the forward mapping\n    // return Code.INVALID_ARGUMENT;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) {\n        return Code.OK;\n      }\n      if (status >= 400 && status < 500) {\n        return Code.FAILED_PRECONDITION;\n      }\n      if (status >= 500 && status < 600) {\n        return Code.INTERNAL;\n      }\n      return Code.UNKNOWN;\n  }\n}\n\n/**\n * Converts an HTTP response's error status to the equivalent error code.\n *\n * @param status - An HTTP error response status (\"FAILED_PRECONDITION\",\n * \"UNKNOWN\", etc.)\n * @returns The equivalent Code. Non-matching responses are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpResponseErrorStatus(status: string): Code {\n  const serverError = status.toLowerCase().replace(/_/g, '-');\n  return Object.values(Code).indexOf(serverError as Code) >= 0\n    ? (serverError as Code)\n    : Code.UNKNOWN;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Token } from '../../api/credentials';\nimport { DatabaseInfo } from '../../core/database_info';\nimport { Stream } from '../../remote/connection';\nimport { RestConnection } from '../../remote/rest_connection';\nimport { mapCodeFromHttpStatus } from '../../remote/rpc_error';\nimport { FirestoreError } from '../../util/error';\nimport { StringMap } from '../../util/types';\n\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */\nexport class FetchConnection extends RestConnection {\n  /**\n   * @param databaseInfo - The connection info.\n   * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n   */\n  constructor(\n    databaseInfo: DatabaseInfo,\n    private readonly fetchImpl: typeof fetch\n  ) {\n    super(databaseInfo);\n  }\n\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    throw new Error('Not supported by FetchConnection');\n  }\n\n  protected async performRPCRequest<Req, Resp>(\n    rpcName: string,\n    url: string,\n    headers: StringMap,\n    body: Req\n  ): Promise<Resp> {\n    const requestJson = JSON.stringify(body);\n    let response: Response;\n\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        headers,\n        body: requestJson\n      });\n    } catch (e) {\n      const err = e as { status: number | undefined; statusText: string };\n      throw new FirestoreError(\n        mapCodeFromHttpStatus(err.status),\n        'Request failed with error: ' + err.statusText\n      );\n    }\n\n    if (!response.ok) {\n      let errorResponse = await response.json();\n      if (Array.isArray(errorResponse)) {\n        errorResponse = errorResponse[0];\n      }\n      const errorMessage = errorResponse?.error?.message;\n      throw new FirestoreError(\n        mapCodeFromHttpStatus(response.status),\n        `Request failed with error: ${errorMessage ?? response.statusText}`\n      );\n    }\n\n    return response.json();\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldPath } from '../model/path';\n\n/**\n * Union type representing the aggregate type to be performed.\n */\nexport type AggregateType = 'count' | 'avg' | 'sum';\n\n/**\n * Represents an Aggregate to be performed over a query result set.\n */\nexport interface Aggregate {\n  readonly fieldPath?: FieldPath;\n  readonly alias: string;\n  readonly aggregateType: AggregateType;\n}\n\n/**\n * Concrete implementation of the Aggregate type.\n */\nexport class AggregateImpl implements Aggregate {\n  constructor(\n    readonly alias: string,\n    readonly aggregateType: AggregateType,\n    readonly fieldPath?: FieldPath\n  ) {}\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../../util/assert';\n\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nexport function randomBytes(nBytes: number): Uint8Array {\n  debugAssert(nBytes >= 0, `Expecting non-negative nBytes, got: ${nBytes}`);\n\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  const crypto =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof self !== 'undefined' && (self.crypto || (self as any)['msCrypto']);\n  const bytes = new Uint8Array(nBytes);\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    crypto.getRandomValues(bytes);\n  } else {\n    // Falls back to Math.random\n    for (let i = 0; i < nBytes; i++) {\n      bytes[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  return bytes;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { randomBytes } from '../platform/random_bytes';\n\nimport { debugAssert } from './assert';\n\nexport type EventHandler<E> = (value: E) => void;\nexport interface Indexable {\n  [k: string]: unknown;\n}\n\n/**\n * A utility class for generating unique alphanumeric IDs of a specified length.\n *\n * @internal\n * Exported internally for testing purposes.\n */\nexport class AutoId {\n  static newId(): string {\n    // Alphanumeric characters\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    // The largest byte value that is a multiple of `char.length`.\n    const maxMultiple = Math.floor(256 / chars.length) * chars.length;\n    debugAssert(\n      0 < maxMultiple && maxMultiple < 256,\n      `Expect maxMultiple to be (0, 256), but got ${maxMultiple}`\n    );\n\n    let autoId = '';\n    const targetLength = 20;\n    while (autoId.length < targetLength) {\n      const bytes = randomBytes(40);\n      for (let i = 0; i < bytes.length; ++i) {\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        if (autoId.length < targetLength && bytes[i] < maxMultiple) {\n          autoId += chars.charAt(bytes[i] % chars.length);\n        }\n      }\n    }\n    debugAssert(autoId.length === targetLength, 'Invalid auto ID: ' + autoId);\n\n    return autoId;\n  }\n}\n\nexport function primitiveComparator<T>(left: T, right: T): number {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n\nexport interface Equatable<T> {\n  isEqual(other: T): boolean;\n}\n\nexport interface Iterable<V> {\n  forEach: (cb: (v: V) => void) => void;\n}\n\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals<T>(\n  left: T[],\n  right: T[],\n  comparator: (l: T, r: T) => boolean\n): boolean {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s: string): string {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n}\n\nexport function objectSize(obj: object): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function forEach<V>(\n  obj: Dict<V> | undefined,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function mapToArray<V, R>(\n  obj: Dict<V>,\n  fn: (element: V, key: string, obj: Dict<V>) => R\n): R[] {\n  const result: R[] = [];\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      result.push(fn(obj[key], key, obj));\n    }\n  }\n  return result;\n}\n\nexport function isEmpty<V>(obj: Dict<V>): boolean {\n  debugAssert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class Base64DecodeError extends Error {\n  readonly name = 'Base64DecodeError';\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { decodeBase64, encodeBase64 } from '../platform/base64';\n\nimport { primitiveComparator } from './misc';\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nexport class ByteString {\n  static readonly EMPTY_BYTE_STRING = new ByteString('');\n\n  private constructor(private readonly binaryString: string) {}\n\n  static fromBase64String(base64: string): ByteString {\n    const binaryString = decodeBase64(base64);\n    return new ByteString(binaryString);\n  }\n\n  static fromUint8Array(array: Uint8Array): ByteString {\n    // TODO(indexing); Remove the copy of the byte string here as this method\n    // is frequently called during indexing.\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n\n  [Symbol.iterator](): Iterator<number> {\n    let i = 0;\n    return {\n      next: () => {\n        if (i < this.binaryString.length) {\n          return { value: this.binaryString.charCodeAt(i++), done: false };\n        } else {\n          return { value: undefined, done: true };\n        }\n      }\n    };\n  }\n\n  toBase64(): string {\n    return encodeBase64(this.binaryString);\n  }\n\n  toUint8Array(): Uint8Array {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n\n  approximateByteSize(): number {\n    return this.binaryString.length * 2;\n  }\n\n  compareTo(other: ByteString): number {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n\n  isEqual(other: ByteString): boolean {\n    return this.binaryString === other.binaryString;\n  }\n}\n\n/**\n * Helper function to convert an Uint8array to a binary string.\n */\nexport function binaryStringFromUint8Array(array: Uint8Array): string {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n\n/**\n * Helper function to convert a binary string to an Uint8Array.\n */\nexport function uint8ArrayFromBinaryString(binaryString: string): Uint8Array {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Base64DecodeError } from '../../util/base64_decode_error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  try {\n    return atob(encoded);\n  } catch (e) {\n    // Check that `DOMException` is defined before using it to avoid\n    // \"ReferenceError: Property 'DOMException' doesn't exist\" in react-native.\n    // (https://github.com/firebase/firebase-js-sdk/issues/7115)\n    if (typeof DOMException !== 'undefined' && e instanceof DOMException) {\n      throw new Base64DecodeError('Invalid base64 string: ' + e);\n    } else {\n      throw e;\n    }\n  }\n}\n\n/** Converts a binary string to a Base64 encoded string. */\nexport function encodeBase64(raw: string): string {\n  return btoa(raw);\n}\n\n/** True if and only if the Base64 conversion functions are available. */\nexport function isBase64Available(): boolean {\n  return typeof atob !== 'undefined';\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../protos/firestore_proto_api';\nimport { hardAssert } from '../util/assert';\nimport { ByteString } from '../util/byte_string';\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(\n  /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/\n);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nexport function normalizeTimestamp(date: Timestamp): {\n  seconds: number;\n  nanos: number;\n} {\n  hardAssert(!!date, 'Cannot normalize null or undefined timestamp.');\n\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction, 'invalid timestamp: ' + date);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n\n    return { seconds, nanos };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return { seconds, nanos };\n  }\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nexport function normalizeNumber(value: number | string | undefined): number {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nexport function normalizeByteString(blob: string | Uint8Array): ByteString {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\n// Number of nanoseconds in a millisecond.\nconst MS_TO_NANOS = 1e6;\n\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nexport class Timestamp {\n  /**\n   * Creates a new timestamp with the current date, with millisecond precision.\n   *\n   * @returns a new timestamp representing the current date.\n   */\n  static now(): Timestamp {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  /**\n   * Creates a new timestamp from the given date.\n   *\n   * @param date - The date to initialize the `Timestamp` from.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     date.\n   */\n  static fromDate(date: Date): Timestamp {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  /**\n   * Creates a new timestamp from the given number of milliseconds.\n   *\n   * @param milliseconds - Number of milliseconds since Unix epoch\n   *     1970-01-01T00:00:00Z.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     number of milliseconds.\n   */\n  static fromMillis(milliseconds: number): Timestamp {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = Math.floor((milliseconds - seconds * 1000) * MS_TO_NANOS);\n    return new Timestamp(seconds, nanos);\n  }\n\n  /**\n   * Creates a new timestamp.\n   *\n   * @param seconds - The number of seconds of UTC time since Unix epoch\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   *     9999-12-31T23:59:59Z inclusive.\n   * @param nanoseconds - The non-negative fractions of a second at nanosecond\n   *     resolution. Negative second values with fractions must still have\n   *     non-negative nanoseconds values that count forward in time. Must be\n   *     from 0 to 999,999,999 inclusive.\n   */\n  constructor(\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    readonly seconds: number,\n    /**\n     * The fractions of a second at nanosecond resolution.*\n     */\n    readonly nanoseconds: number\n  ) {\n    if (nanoseconds < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n  }\n\n  /**\n   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n   * causes a loss of precision since `Date` objects only support millisecond\n   * precision.\n   *\n   * @returns JavaScript `Date` object representing the same point in time as\n   *     this `Timestamp`, with millisecond precision.\n   */\n  toDate(): Date {\n    return new Date(this.toMillis());\n  }\n\n  /**\n   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n   * epoch). This operation causes a loss of precision.\n   *\n   * @returns The point in time corresponding to this timestamp, represented as\n   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  toMillis(): number {\n    return this.seconds * 1000 + this.nanoseconds / MS_TO_NANOS;\n  }\n\n  _compareTo(other: Timestamp): number {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n\n  /**\n   * Returns true if this `Timestamp` is equal to the provided one.\n   *\n   * @param other - The `Timestamp` to compare against.\n   * @returns true if this `Timestamp` is equal to the provided one.\n   */\n  isEqual(other: Timestamp): boolean {\n    return (\n      other.seconds === this.seconds && other.nanoseconds === this.nanoseconds\n    );\n  }\n\n  /** Returns a textual representation of this `Timestamp`. */\n  toString(): string {\n    return (\n      'Timestamp(seconds=' +\n      this.seconds +\n      ', nanoseconds=' +\n      this.nanoseconds +\n      ')'\n    );\n  }\n\n  /** Returns a JSON-serializable representation of this `Timestamp`. */\n  toJSON(): { seconds: number; nanoseconds: number } {\n    return { seconds: this.seconds, nanoseconds: this.nanoseconds };\n  }\n\n  /**\n   * Converts this object to a primitive string, which allows `Timestamp` objects\n   * to be compared using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf(): string {\n    // This method returns a string of the form <seconds>.<nanoseconds> where\n    // <seconds> is translated to have a non-negative value and both <seconds>\n    // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n    // Strings with this format then have a lexiographical ordering that matches\n    // the expected ordering. The <seconds> translation is done to avoid having\n    // a leading negative sign (i.e. a leading '-' character) in its string\n    // representation, which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid\n    // 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../lite-api/timestamp';\nimport {\n  Value as ProtoValue,\n  MapValue as ProtoMapValue\n} from '../protos/firestore_proto_api';\n\nimport { normalizeTimestamp } from './normalize';\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\n\nexport function isServerTimestamp(value: ProtoValue | null): boolean {\n  const type = (value?.mapValue?.fields || {})[TYPE_KEY]?.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n\n/**\n * Creates a new ServerTimestamp proto value (using the internal format).\n */\nexport function serverTimestamp(\n  localWriteTime: Timestamp,\n  previousValue: ProtoValue | null\n): ProtoValue {\n  const mapValue: ProtoMapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n\n  // We should avoid storing deeply nested server timestamp map values\n  // because we never use the intermediate \"previous values\".\n  // For example:\n  // previous: 42L, add: t1, result: t1 -> 42L\n  // previous: t1,  add: t2, result: t2 -> 42L (NOT t2 -> t1 -> 42L)\n  // previous: t2,  add: t3, result: t3 -> 42L (NOT t3 -> t2 -> t1 -> 42L)\n  // `getPreviousValue` recursively traverses server timestamps to find the\n  // least recent Value.\n  if (previousValue && isServerTimestamp(previousValue)) {\n    previousValue = getPreviousValue(previousValue);\n  }\n  if (previousValue) {\n    mapValue.fields![PREVIOUS_VALUE_KEY] = previousValue;\n  }\n\n  return { mapValue };\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nexport function getPreviousValue(value: ProtoValue): ProtoValue | null {\n  const previousValue = value.mapValue!.fields![PREVIOUS_VALUE_KEY];\n\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nexport function getLocalWriteTime(value: ProtoValue): Timestamp {\n  const localWriteTime = normalizeTimestamp(\n    value.mapValue!.fields![LOCAL_WRITE_TIME_KEY].timestampValue!\n  );\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId } from '../core/database_info';\nimport {\n  ArrayValue,\n  LatLng,\n  MapValue,\n  Timestamp,\n  Value\n} from '../protos/firestore_proto_api';\nimport { fail } from '../util/assert';\nimport { arrayEquals, primitiveComparator } from '../util/misc';\nimport { forEach, objectSize } from '../util/obj';\nimport { isNegativeZero } from '../util/types';\n\nimport { DocumentKey } from './document_key';\nimport {\n  normalizeByteString,\n  normalizeNumber,\n  normalizeTimestamp\n} from './normalize';\nimport {\n  getLocalWriteTime,\n  getPreviousValue,\n  isServerTimestamp\n} from './server_timestamps';\nimport { TypeOrder } from './type_order';\n\nconst MAX_VALUE_TYPE = '__max__';\nexport const MAX_VALUE: Value = {\n  mapValue: {\n    fields: {\n      '__type__': { stringValue: MAX_VALUE_TYPE }\n    }\n  }\n};\n\nexport const MIN_VALUE: Value = {\n  nullValue: 'NULL_VALUE'\n};\n\n/** Extracts the backend's type order for the provided value. */\nexport function typeOrder(value: Value): TypeOrder {\n  if ('nullValue' in value) {\n    return TypeOrder.NullValue;\n  } else if ('booleanValue' in value) {\n    return TypeOrder.BooleanValue;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return TypeOrder.NumberValue;\n  } else if ('timestampValue' in value) {\n    return TypeOrder.TimestampValue;\n  } else if ('stringValue' in value) {\n    return TypeOrder.StringValue;\n  } else if ('bytesValue' in value) {\n    return TypeOrder.BlobValue;\n  } else if ('referenceValue' in value) {\n    return TypeOrder.RefValue;\n  } else if ('geoPointValue' in value) {\n    return TypeOrder.GeoPointValue;\n  } else if ('arrayValue' in value) {\n    return TypeOrder.ArrayValue;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return TypeOrder.ServerTimestampValue;\n    } else if (isMaxValue(value)) {\n      return TypeOrder.MaxValue;\n    }\n    return TypeOrder.ObjectValue;\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nexport function valueEquals(left: Value, right: Value): boolean {\n  if (left === right) {\n    return true;\n  }\n\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return true;\n    case TypeOrder.BooleanValue:\n      return left.booleanValue === right.booleanValue;\n    case TypeOrder.ServerTimestampValue:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case TypeOrder.TimestampValue:\n      return timestampEquals(left, right);\n    case TypeOrder.StringValue:\n      return left.stringValue === right.stringValue;\n    case TypeOrder.BlobValue:\n      return blobEquals(left, right);\n    case TypeOrder.RefValue:\n      return left.referenceValue === right.referenceValue;\n    case TypeOrder.GeoPointValue:\n      return geoPointEquals(left, right);\n    case TypeOrder.NumberValue:\n      return numberEquals(left, right);\n    case TypeOrder.ArrayValue:\n      return arrayEquals(\n        left.arrayValue!.values || [],\n        right.arrayValue!.values || [],\n        valueEquals\n      );\n    case TypeOrder.ObjectValue:\n      return objectEquals(left, right);\n    case TypeOrder.MaxValue:\n      return true;\n    default:\n      return fail('Unexpected value type: ' + JSON.stringify(left));\n  }\n}\n\nfunction timestampEquals(left: Value, right: Value): boolean {\n  if (\n    typeof left.timestampValue === 'string' &&\n    typeof right.timestampValue === 'string' &&\n    left.timestampValue.length === right.timestampValue.length\n  ) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n\n  const leftTimestamp = normalizeTimestamp(left.timestampValue!);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue!);\n  return (\n    leftTimestamp.seconds === rightTimestamp.seconds &&\n    leftTimestamp.nanos === rightTimestamp.nanos\n  );\n}\n\nfunction geoPointEquals(left: Value, right: Value): boolean {\n  return (\n    normalizeNumber(left.geoPointValue!.latitude) ===\n      normalizeNumber(right.geoPointValue!.latitude) &&\n    normalizeNumber(left.geoPointValue!.longitude) ===\n      normalizeNumber(right.geoPointValue!.longitude)\n  );\n}\n\nfunction blobEquals(left: Value, right: Value): boolean {\n  return normalizeByteString(left.bytesValue!).isEqual(\n    normalizeByteString(right.bytesValue!)\n  );\n}\n\nexport function numberEquals(left: Value, right: Value): boolean {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return (\n      normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue)\n    );\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue!);\n    const n2 = normalizeNumber(right.doubleValue!);\n\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n\n  return false;\n}\n\nfunction objectEquals(left: Value, right: Value): boolean {\n  const leftMap = left.mapValue!.fields || {};\n  const rightMap = right.mapValue!.fields || {};\n\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (\n        rightMap[key] === undefined ||\n        !valueEquals(leftMap[key], rightMap[key])\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/** Returns true if the ArrayValue contains the specified element. */\nexport function arrayValueContains(\n  haystack: ArrayValue,\n  needle: Value\n): boolean {\n  return (\n    (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined\n  );\n}\n\nexport function valueCompare(left: Value, right: Value): number {\n  if (left === right) {\n    return 0;\n  }\n\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n    case TypeOrder.MaxValue:\n      return 0;\n    case TypeOrder.BooleanValue:\n      return primitiveComparator(left.booleanValue!, right.booleanValue!);\n    case TypeOrder.NumberValue:\n      return compareNumbers(left, right);\n    case TypeOrder.TimestampValue:\n      return compareTimestamps(left.timestampValue!, right.timestampValue!);\n    case TypeOrder.ServerTimestampValue:\n      return compareTimestamps(\n        getLocalWriteTime(left),\n        getLocalWriteTime(right)\n      );\n    case TypeOrder.StringValue:\n      return primitiveComparator(left.stringValue!, right.stringValue!);\n    case TypeOrder.BlobValue:\n      return compareBlobs(left.bytesValue!, right.bytesValue!);\n    case TypeOrder.RefValue:\n      return compareReferences(left.referenceValue!, right.referenceValue!);\n    case TypeOrder.GeoPointValue:\n      return compareGeoPoints(left.geoPointValue!, right.geoPointValue!);\n    case TypeOrder.ArrayValue:\n      return compareArrays(left.arrayValue!, right.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return compareMaps(left.mapValue!, right.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + leftType);\n  }\n}\n\nfunction compareNumbers(left: Value, right: Value): number {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\nfunction compareTimestamps(left: Timestamp, right: Timestamp): number {\n  if (\n    typeof left === 'string' &&\n    typeof right === 'string' &&\n    left.length === right.length\n  ) {\n    return primitiveComparator(left, right);\n  }\n\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n\n  const comparison = primitiveComparator(\n    leftTimestamp.seconds,\n    rightTimestamp.seconds\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\n\nfunction compareReferences(leftPath: string, rightPath: string): number {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\n\nfunction compareGeoPoints(left: LatLng, right: LatLng): number {\n  const comparison = primitiveComparator(\n    normalizeNumber(left.latitude),\n    normalizeNumber(right.latitude)\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(\n    normalizeNumber(left.longitude),\n    normalizeNumber(right.longitude)\n  );\n}\n\nfunction compareBlobs(\n  left: string | Uint8Array,\n  right: string | Uint8Array\n): number {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\n\nfunction compareArrays(left: ArrayValue, right: ArrayValue): number {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\n\nfunction compareMaps(left: MapValue, right: MapValue): number {\n  if (left === MAX_VALUE.mapValue && right === MAX_VALUE.mapValue) {\n    return 0;\n  } else if (left === MAX_VALUE.mapValue) {\n    return 1;\n  } else if (right === MAX_VALUE.mapValue) {\n    return -1;\n  }\n\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n\n/**\n * Generates the canonical ID for the provided field value (as used in Target\n * serialization).\n */\nexport function canonicalId(value: Value): string {\n  return canonifyValue(value);\n}\n\nfunction canonifyValue(value: Value): string {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue!;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue!;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue!;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue!);\n  } else if ('stringValue' in value) {\n    return value.stringValue!;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue!);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue!);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue!);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue!);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue!);\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction canonifyByteString(byteString: string | Uint8Array): string {\n  return normalizeByteString(byteString).toBase64();\n}\n\nfunction canonifyTimestamp(timestamp: Timestamp): string {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\n\nfunction canonifyGeoPoint(geoPoint: LatLng): string {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\n\nfunction canonifyReference(referenceValue: string): string {\n  return DocumentKey.fromName(referenceValue).toString();\n}\n\nfunction canonifyMap(mapValue: MapValue): string {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields![key])}`;\n  }\n  return result + '}';\n}\n\nfunction canonifyArray(arrayValue: ArrayValue): string {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n\n/**\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\n * value.\n *\n * The memory size takes into account only the actual user data as it resides\n * in memory and ignores object overhead.\n */\nexport function estimateByteSize(value: Value): number {\n  switch (typeOrder(value)) {\n    case TypeOrder.NullValue:\n      return 4;\n    case TypeOrder.BooleanValue:\n      return 4;\n    case TypeOrder.NumberValue:\n      return 8;\n    case TypeOrder.TimestampValue:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case TypeOrder.ServerTimestampValue:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case TypeOrder.StringValue:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue!.length * 2;\n    case TypeOrder.BlobValue:\n      return normalizeByteString(value.bytesValue!).approximateByteSize();\n    case TypeOrder.RefValue:\n      return value.referenceValue!.length;\n    case TypeOrder.GeoPointValue:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case TypeOrder.ArrayValue:\n      return estimateArrayByteSize(value.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return estimateMapByteSize(value.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction estimateMapByteSize(mapValue: MapValue): number {\n  let size = 0;\n  forEach(mapValue.fields, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\n\nfunction estimateArrayByteSize(arrayValue: ArrayValue): number {\n  return (arrayValue.values || []).reduce(\n    (previousSize, value) => previousSize + estimateByteSize(value),\n    0\n  );\n}\n\n/** Returns a reference value for the provided database and key. */\nexport function refValue(databaseId: DatabaseId, key: DocumentKey): Value {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${\n      databaseId.database\n    }/documents/${key.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an IntegerValue . */\nexport function isInteger(\n  value?: Value | null\n): value is { integerValue: string | number } {\n  return !!value && 'integerValue' in value;\n}\n\n/** Returns true if `value` is a DoubleValue. */\nexport function isDouble(\n  value?: Value | null\n): value is { doubleValue: string | number } {\n  return !!value && 'doubleValue' in value;\n}\n\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nexport function isNumber(value?: Value | null): boolean {\n  return isInteger(value) || isDouble(value);\n}\n\n/** Returns true if `value` is an ArrayValue. */\nexport function isArray(\n  value?: Value | null\n): value is { arrayValue: ArrayValue } {\n  return !!value && 'arrayValue' in value;\n}\n\n/** Returns true if `value` is a ReferenceValue. */\nexport function isReferenceValue(\n  value?: Value | null\n): value is { referenceValue: string } {\n  return !!value && 'referenceValue' in value;\n}\n\n/** Returns true if `value` is a NullValue. */\nexport function isNullValue(\n  value?: Value | null\n): value is { nullValue: 'NULL_VALUE' } {\n  return !!value && 'nullValue' in value;\n}\n\n/** Returns true if `value` is NaN. */\nexport function isNanValue(\n  value?: Value | null\n): value is { doubleValue: 'NaN' | number } {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nexport function isMapValue(\n  value?: Value | null\n): value is { mapValue: MapValue } {\n  return !!value && 'mapValue' in value;\n}\n\n/** Creates a deep copy of `source`. */\nexport function deepClone(source: Value): Value {\n  if (source.geoPointValue) {\n    return { geoPointValue: { ...source.geoPointValue } };\n  } else if (\n    source.timestampValue &&\n    typeof source.timestampValue === 'object'\n  ) {\n    return { timestampValue: { ...source.timestampValue } };\n  } else if (source.mapValue) {\n    const target: Value = { mapValue: { fields: {} } };\n    forEach(\n      source.mapValue.fields,\n      (key, val) => (target.mapValue!.fields![key] = deepClone(val))\n    );\n    return target;\n  } else if (source.arrayValue) {\n    const target: Value = { arrayValue: { values: [] } };\n    for (let i = 0; i < (source.arrayValue.values || []).length; ++i) {\n      target.arrayValue!.values![i] = deepClone(source.arrayValue.values![i]);\n    }\n    return target;\n  } else {\n    return { ...source };\n  }\n}\n\n/** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\nexport function isMaxValue(value: Value): boolean {\n  return (\n    (((value.mapValue || {}).fields || {})['__type__'] || {}).stringValue ===\n    MAX_VALUE_TYPE\n  );\n}\n\n/** Returns the lowest value for the given value type (inclusive). */\nexport function valuesGetLowerBound(value: Value): Value {\n  if ('nullValue' in value) {\n    return MIN_VALUE;\n  } else if ('booleanValue' in value) {\n    return { booleanValue: false };\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return { doubleValue: NaN };\n  } else if ('timestampValue' in value) {\n    return { timestampValue: { seconds: Number.MIN_SAFE_INTEGER } };\n  } else if ('stringValue' in value) {\n    return { stringValue: '' };\n  } else if ('bytesValue' in value) {\n    return { bytesValue: '' };\n  } else if ('referenceValue' in value) {\n    return refValue(DatabaseId.empty(), DocumentKey.empty());\n  } else if ('geoPointValue' in value) {\n    return { geoPointValue: { latitude: -90, longitude: -180 } };\n  } else if ('arrayValue' in value) {\n    return { arrayValue: {} };\n  } else if ('mapValue' in value) {\n    return { mapValue: {} };\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\n/** Returns the largest value for the given value type (exclusive). */\nexport function valuesGetUpperBound(value: Value): Value {\n  if ('nullValue' in value) {\n    return { booleanValue: false };\n  } else if ('booleanValue' in value) {\n    return { doubleValue: NaN };\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return { timestampValue: { seconds: Number.MIN_SAFE_INTEGER } };\n  } else if ('timestampValue' in value) {\n    return { stringValue: '' };\n  } else if ('stringValue' in value) {\n    return { bytesValue: '' };\n  } else if ('bytesValue' in value) {\n    return refValue(DatabaseId.empty(), DocumentKey.empty());\n  } else if ('referenceValue' in value) {\n    return { geoPointValue: { latitude: -90, longitude: -180 } };\n  } else if ('geoPointValue' in value) {\n    return { arrayValue: {} };\n  } else if ('arrayValue' in value) {\n    return { mapValue: {} };\n  } else if ('mapValue' in value) {\n    return MAX_VALUE;\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nexport function lowerBoundCompare(\n  left: { value: Value; inclusive: boolean },\n  right: { value: Value; inclusive: boolean }\n): number {\n  const cmp = valueCompare(left.value, right.value);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  if (left.inclusive && !right.inclusive) {\n    return -1;\n  } else if (!left.inclusive && right.inclusive) {\n    return 1;\n  }\n\n  return 0;\n}\n\nexport function upperBoundCompare(\n  left: { value: Value; inclusive: boolean },\n  right: { value: Value; inclusive: boolean }\n): number {\n  const cmp = valueCompare(left.value, right.value);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  if (left.inclusive && !right.inclusive) {\n    return 1;\n  } else if (!left.inclusive && right.inclusive) {\n    return -1;\n  }\n\n  return 0;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { isReferenceValue, valueCompare, valueEquals } from '../model/values';\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\nimport { debugAssert } from '../util/assert';\n\nimport { Direction, OrderBy } from './order_by';\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nexport class Bound {\n  constructor(readonly position: ProtoValue[], readonly inclusive: boolean) {}\n}\n\nfunction boundCompareToDocument(\n  bound: Bound,\n  orderBy: OrderBy[],\n  doc: Document\n): number {\n  debugAssert(\n    bound.position.length <= orderBy.length,\n    \"Bound has more components than query's orderBy\"\n  );\n  let comparison = 0;\n  for (let i = 0; i < bound.position.length; i++) {\n    const orderByComponent = orderBy[i];\n    const component = bound.position[i];\n    if (orderByComponent.field.isKeyField()) {\n      debugAssert(\n        isReferenceValue(component),\n        'Bound has a non-key value where the key path is being used.'\n      );\n      comparison = DocumentKey.comparator(\n        DocumentKey.fromName(component.referenceValue),\n        doc.key\n      );\n    } else {\n      const docValue = doc.data.field(orderByComponent.field);\n      debugAssert(\n        docValue !== null,\n        'Field should exist since document matched the orderBy already.'\n      );\n      comparison = valueCompare(component, docValue);\n    }\n    if (orderByComponent.dir === Direction.DESCENDING) {\n      comparison = comparison * -1;\n    }\n    if (comparison !== 0) {\n      break;\n    }\n  }\n  return comparison;\n}\n\n/**\n * Returns true if a document sorts after a bound using the provided sort\n * order.\n */\nexport function boundSortsAfterDocument(\n  bound: Bound,\n  orderBy: OrderBy[],\n  doc: Document\n): boolean {\n  const comparison = boundCompareToDocument(bound, orderBy, doc);\n  return bound.inclusive ? comparison >= 0 : comparison > 0;\n}\n\n/**\n * Returns true if a document sorts before a bound using the provided sort\n * order.\n */\nexport function boundSortsBeforeDocument(\n  bound: Bound,\n  orderBy: OrderBy[],\n  doc: Document\n): boolean {\n  const comparison = boundCompareToDocument(bound, orderBy, doc);\n  return bound.inclusive ? comparison <= 0 : comparison < 0;\n}\n\nexport function boundEquals(left: Bound | null, right: Bound | null): boolean {\n  if (left === null) {\n    return right === null;\n  } else if (right === null) {\n    return false;\n  }\n\n  if (\n    left.inclusive !== right.inclusive ||\n    left.position.length !== right.position.length\n  ) {\n    return false;\n  }\n  for (let i = 0; i < left.position.length; i++) {\n    const leftPosition = left.position[i];\n    const rightPosition = right.position[i];\n    if (!valueEquals(leftPosition, rightPosition)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { FieldPath } from '../model/path';\nimport {\n  arrayValueContains,\n  canonicalId,\n  isArray,\n  isReferenceValue,\n  typeOrder,\n  valueCompare,\n  valueEquals\n} from '../model/values';\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\nimport { debugAssert, fail } from '../util/assert';\n\n// The operator of a FieldFilter\nexport const enum Operator {\n  LESS_THAN = '<',\n  LESS_THAN_OR_EQUAL = '<=',\n  EQUAL = '==',\n  NOT_EQUAL = '!=',\n  GREATER_THAN = '>',\n  GREATER_THAN_OR_EQUAL = '>=',\n  ARRAY_CONTAINS = 'array-contains',\n  IN = 'in',\n  NOT_IN = 'not-in',\n  ARRAY_CONTAINS_ANY = 'array-contains-any'\n}\n\n// The operator of a CompositeFilter\nexport const enum CompositeOperator {\n  OR = 'or',\n  AND = 'and'\n}\n\nexport abstract class Filter {\n  abstract matches(doc: Document): boolean;\n\n  abstract getFlattenedFilters(): readonly FieldFilter[];\n\n  abstract getFilters(): Filter[];\n}\n\nexport class FieldFilter extends Filter {\n  protected constructor(\n    public readonly field: FieldPath,\n    public readonly op: Operator,\n    public readonly value: ProtoValue\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(\n    field: FieldPath,\n    op: Operator,\n    value: ProtoValue\n  ): FieldFilter {\n    if (field.isKeyField()) {\n      if (op === Operator.IN || op === Operator.NOT_IN) {\n        return this.createKeyFieldInFilter(field, op, value);\n      } else {\n        debugAssert(\n          isReferenceValue(value),\n          'Comparing on key, but filter value not a RefValue'\n        );\n        debugAssert(\n          op !== Operator.ARRAY_CONTAINS && op !== Operator.ARRAY_CONTAINS_ANY,\n          `'${op.toString()}' queries don't make sense on document keys.`\n        );\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (op === Operator.ARRAY_CONTAINS) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === Operator.IN) {\n      debugAssert(\n        isArray(value),\n        'IN filter has invalid value: ' + value.toString()\n      );\n      return new InFilter(field, value);\n    } else if (op === Operator.NOT_IN) {\n      debugAssert(\n        isArray(value),\n        'NOT_IN filter has invalid value: ' + value.toString()\n      );\n      return new NotInFilter(field, value);\n    } else if (op === Operator.ARRAY_CONTAINS_ANY) {\n      debugAssert(\n        isArray(value),\n        'ARRAY_CONTAINS_ANY filter has invalid value: ' + value.toString()\n      );\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n\n  private static createKeyFieldInFilter(\n    field: FieldPath,\n    op: Operator.IN | Operator.NOT_IN,\n    value: ProtoValue\n  ): FieldFilter {\n    debugAssert(\n      isArray(value),\n      `Comparing on key with ${op.toString()}` +\n        ', but filter value not an ArrayValue'\n    );\n    debugAssert(\n      (value.arrayValue.values || []).every(elem => isReferenceValue(elem)),\n      `Comparing on key with ${op.toString()}` +\n        ', but an array value was not a RefValue'\n    );\n\n    return op === Operator.IN\n      ? new KeyFieldInFilter(field, value)\n      : new KeyFieldNotInFilter(field, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.data.field(this.field);\n    // Types do not have to match in NOT_EQUAL filters.\n    if (this.op === Operator.NOT_EQUAL) {\n      return (\n        other !== null &&\n        this.matchesComparison(valueCompare(other!, this.value))\n      );\n    }\n\n    // Only compare types with matching backend order (such as double and int).\n    return (\n      other !== null &&\n      typeOrder(this.value) === typeOrder(other) &&\n      this.matchesComparison(valueCompare(other, this.value))\n    );\n  }\n\n  protected matchesComparison(comparison: number): boolean {\n    switch (this.op) {\n      case Operator.LESS_THAN:\n        return comparison < 0;\n      case Operator.LESS_THAN_OR_EQUAL:\n        return comparison <= 0;\n      case Operator.EQUAL:\n        return comparison === 0;\n      case Operator.NOT_EQUAL:\n        return comparison !== 0;\n      case Operator.GREATER_THAN:\n        return comparison > 0;\n      case Operator.GREATER_THAN_OR_EQUAL:\n        return comparison >= 0;\n      default:\n        return fail('Unknown FieldFilter operator: ' + this.op);\n    }\n  }\n\n  isInequality(): boolean {\n    return (\n      [\n        Operator.LESS_THAN,\n        Operator.LESS_THAN_OR_EQUAL,\n        Operator.GREATER_THAN,\n        Operator.GREATER_THAN_OR_EQUAL,\n        Operator.NOT_EQUAL,\n        Operator.NOT_IN\n      ].indexOf(this.op) >= 0\n    );\n  }\n\n  getFlattenedFilters(): readonly FieldFilter[] {\n    return [this];\n  }\n\n  getFilters(): Filter[] {\n    return [this];\n  }\n}\n\nexport class CompositeFilter extends Filter {\n  private memoizedFlattenedFilters: FieldFilter[] | null = null;\n\n  protected constructor(\n    public readonly filters: readonly Filter[],\n    public readonly op: CompositeOperator\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(filters: Filter[], op: CompositeOperator): CompositeFilter {\n    return new CompositeFilter(filters, op);\n  }\n\n  matches(doc: Document): boolean {\n    if (compositeFilterIsConjunction(this)) {\n      // For conjunctions, all filters must match, so return false if any filter doesn't match.\n      return this.filters.find(filter => !filter.matches(doc)) === undefined;\n    } else {\n      // For disjunctions, at least one filter should match.\n      return this.filters.find(filter => filter.matches(doc)) !== undefined;\n    }\n  }\n\n  getFlattenedFilters(): readonly FieldFilter[] {\n    if (this.memoizedFlattenedFilters !== null) {\n      return this.memoizedFlattenedFilters;\n    }\n\n    this.memoizedFlattenedFilters = this.filters.reduce((result, subfilter) => {\n      return result.concat(subfilter.getFlattenedFilters());\n    }, [] as FieldFilter[]);\n\n    return this.memoizedFlattenedFilters;\n  }\n\n  // Returns a mutable copy of `this.filters`\n  getFilters(): Filter[] {\n    return Object.assign([], this.filters);\n  }\n}\n\nexport function compositeFilterIsConjunction(\n  compositeFilter: CompositeFilter\n): boolean {\n  return compositeFilter.op === CompositeOperator.AND;\n}\n\nexport function compositeFilterIsDisjunction(\n  compositeFilter: CompositeFilter\n): boolean {\n  return compositeFilter.op === CompositeOperator.OR;\n}\n\n/**\n * Returns true if this filter is a conjunction of field filters only. Returns false otherwise.\n */\nexport function compositeFilterIsFlatConjunction(\n  compositeFilter: CompositeFilter\n): boolean {\n  return (\n    compositeFilterIsFlat(compositeFilter) &&\n    compositeFilterIsConjunction(compositeFilter)\n  );\n}\n\n/**\n * Returns true if this filter does not contain any composite filters. Returns false otherwise.\n */\nexport function compositeFilterIsFlat(\n  compositeFilter: CompositeFilter\n): boolean {\n  for (const filter of compositeFilter.filters) {\n    if (filter instanceof CompositeFilter) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function canonifyFilter(filter: Filter): string {\n  debugAssert(\n    filter instanceof FieldFilter || filter instanceof CompositeFilter,\n    'canonifyFilter() only supports FieldFilters and CompositeFilters'\n  );\n\n  if (filter instanceof FieldFilter) {\n    // TODO(b/29183165): Technically, this won't be unique if two values have\n    // the same description, such as the int 3 and the string \"3\". So we should\n    // add the types in here somehow, too.\n    return (\n      filter.field.canonicalString() +\n      filter.op.toString() +\n      canonicalId(filter.value)\n    );\n  } else if (compositeFilterIsFlatConjunction(filter)) {\n    // Older SDK versions use an implicit AND operation between their filters.\n    // In the new SDK versions, the developer may use an explicit AND filter.\n    // To stay consistent with the old usages, we add a special case to ensure\n    // the canonical ID for these two are the same. For example:\n    // `col.whereEquals(\"a\", 1).whereEquals(\"b\", 2)` should have the same\n    // canonical ID as `col.where(and(equals(\"a\",1), equals(\"b\",2)))`.\n    return filter.filters.map(filter => canonifyFilter(filter)).join(',');\n  } else {\n    // filter instanceof CompositeFilter\n    const canonicalIdsString = filter.filters\n      .map(filter => canonifyFilter(filter))\n      .join(',');\n    return `${filter.op}(${canonicalIdsString})`;\n  }\n}\n\nexport function filterEquals(f1: Filter, f2: Filter): boolean {\n  if (f1 instanceof FieldFilter) {\n    return fieldFilterEquals(f1, f2);\n  } else if (f1 instanceof CompositeFilter) {\n    return compositeFilterEquals(f1, f2);\n  } else {\n    fail('Only FieldFilters and CompositeFilters can be compared');\n  }\n}\n\nexport function fieldFilterEquals(f1: FieldFilter, f2: Filter): boolean {\n  return (\n    f2 instanceof FieldFilter &&\n    f1.op === f2.op &&\n    f1.field.isEqual(f2.field) &&\n    valueEquals(f1.value, f2.value)\n  );\n}\n\nexport function compositeFilterEquals(\n  f1: CompositeFilter,\n  f2: Filter\n): boolean {\n  if (\n    f2 instanceof CompositeFilter &&\n    f1.op === f2.op &&\n    f1.filters.length === f2.filters.length\n  ) {\n    const subFiltersMatch: boolean = f1.filters.reduce(\n      (result: boolean, f1Filter: Filter, index: number): boolean =>\n        result && filterEquals(f1Filter, f2.filters[index]),\n      true\n    );\n\n    return subFiltersMatch;\n  }\n\n  return false;\n}\n\n/**\n * Returns a new composite filter that contains all filter from\n * `compositeFilter` plus all the given filters in `otherFilters`.\n */\nexport function compositeFilterWithAddedFilters(\n  compositeFilter: CompositeFilter,\n  otherFilters: Filter[]\n): CompositeFilter {\n  const mergedFilters = compositeFilter.filters.concat(otherFilters);\n  return CompositeFilter.create(mergedFilters, compositeFilter.op);\n}\n\n/** Returns a debug description for `filter`. */\nexport function stringifyFilter(filter: Filter): string {\n  debugAssert(\n    filter instanceof FieldFilter || filter instanceof CompositeFilter,\n    'stringifyFilter() only supports FieldFilters and CompositeFilters'\n  );\n  if (filter instanceof FieldFilter) {\n    return stringifyFieldFilter(filter);\n  } else if (filter instanceof CompositeFilter) {\n    return stringifyCompositeFilter(filter);\n  } else {\n    return 'Filter';\n  }\n}\n\nexport function stringifyCompositeFilter(filter: CompositeFilter): string {\n  return (\n    filter.op.toString() +\n    ` {` +\n    filter.getFilters().map(stringifyFilter).join(' ,') +\n    '}'\n  );\n}\n\nexport function stringifyFieldFilter(filter: FieldFilter): string {\n  return `${filter.field.canonicalString()} ${filter.op} ${canonicalId(\n    filter.value\n  )}`;\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nexport class KeyFieldFilter extends FieldFilter {\n  private readonly key: DocumentKey;\n\n  constructor(field: FieldPath, op: Operator, value: ProtoValue) {\n    super(field, op, value);\n    debugAssert(\n      isReferenceValue(value),\n      'KeyFieldFilter expects a ReferenceValue'\n    );\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n\n  matches(doc: Document): boolean {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nexport class KeyFieldInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.IN, value);\n    this.keys = extractDocumentKeysFromArrayValue(Operator.IN, value);\n  }\n\n  matches(doc: Document): boolean {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\n/** Filter that matches on key fields not present within an array. */\nexport class KeyFieldNotInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.NOT_IN, value);\n    this.keys = extractDocumentKeysFromArrayValue(Operator.NOT_IN, value);\n  }\n\n  matches(doc: Document): boolean {\n    return !this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\nfunction extractDocumentKeysFromArrayValue(\n  op: Operator.IN | Operator.NOT_IN,\n  value: ProtoValue\n): DocumentKey[] {\n  debugAssert(\n    isArray(value),\n    'KeyFieldInFilter/KeyFieldNotInFilter expects an ArrayValue'\n  );\n  return (value.arrayValue?.values || []).map(v => {\n    debugAssert(\n      isReferenceValue(v),\n      `Comparing on key with ${op.toString()}, but an array value was not ` +\n        `a ReferenceValue`\n    );\n    return DocumentKey.fromName(v.referenceValue);\n  });\n}\n\n/** A Filter that implements the array-contains operator. */\nexport class ArrayContainsFilter extends FieldFilter {\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.ARRAY_CONTAINS, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.data.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nexport class InFilter extends FieldFilter {\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'InFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.data.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the not-in operator. */\nexport class NotInFilter extends FieldFilter {\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.NOT_IN, value);\n    debugAssert(isArray(value), 'NotInFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    if (\n      arrayValueContains(this.value.arrayValue!, { nullValue: 'NULL_VALUE' })\n    ) {\n      return false;\n    }\n    const other = doc.data.field(this.field);\n    return other !== null && !arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nexport class ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field: FieldPath, value: ProtoValue) {\n    super(field, Operator.ARRAY_CONTAINS_ANY, value);\n    debugAssert(isArray(value), 'ArrayContainsAnyFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.data.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val =>\n      arrayValueContains(this.value.arrayValue!, val)\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldPath } from '../model/path';\n\n/**\n * The direction of sorting in an order by.\n */\nexport const enum Direction {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nexport class OrderBy {\n  constructor(\n    readonly field: FieldPath,\n    readonly dir: Direction = Direction.ASCENDING\n  ) {}\n}\n\nexport function canonifyOrderBy(orderBy: OrderBy): string {\n  // TODO(b/29183165): Make this collision robust.\n  return orderBy.field.canonicalString() + orderBy.dir;\n}\n\nexport function stringifyOrderBy(orderBy: OrderBy): string {\n  return `${orderBy.field.canonicalString()} (${orderBy.dir})`;\n}\n\nexport function orderByEquals(left: OrderBy, right: OrderBy): boolean {\n  return left.dir === right.dir && left.field.isEqual(right.field);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../lite-api/timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static min(): SnapshotVersion {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n\n  static max(): SnapshotVersion {\n    return new SnapshotVersion(new Timestamp(253402300799, 1e9 - 1));\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n\n  isEqual(other: SnapshotVersion): boolean {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\n\n/*\n * Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\nexport interface Entry<K, V> {\n  key: K;\n  value: V;\n}\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nexport class SortedMap<K, V> {\n  // visible for testing\n  root: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  constructor(\n    public comparator: Comparator<K>,\n    root?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.root = root ? root : LLRBNode.EMPTY;\n  }\n\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .insert(key, value, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns a copy of the map, with the specified key removed.\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .remove(key, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns the value of the node with the given key, or null.\n  get(key: K): V | null {\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(key: K): number {\n    // Number of nodes that were pruned when descending right\n    let prunedNodes = 0;\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    }\n    // Node not found\n    return -1;\n  }\n\n  isEmpty(): boolean {\n    return this.root.isEmpty();\n  }\n\n  // Returns the total number of nodes in the map.\n  get size(): number {\n    return this.root.size;\n  }\n\n  // Returns the minimum key in the map.\n  minKey(): K | null {\n    return this.root.minKey();\n  }\n\n  // Returns the maximum key in the map.\n  maxKey(): K | null {\n    return this.root.maxKey();\n  }\n\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).inorderTraversal(action);\n  }\n\n  forEach(fn: (k: K, v: V) => void): void {\n    this.inorderTraversal((k, v) => {\n      fn(k, v);\n      return false;\n    });\n  }\n\n  toString(): string {\n    const descriptions: string[] = [];\n    this.inorderTraversal((k, v) => {\n      descriptions.push(`${k}:${v}`);\n      return false;\n    });\n    return `{${descriptions.join(', ')}}`;\n  }\n\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).reverseTraversal(action);\n  }\n\n  // Returns an iterator over the SortedMap.\n  getIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, false);\n  }\n\n  getIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, false);\n  }\n\n  getReverseIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, true);\n  }\n\n  getReverseIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, true);\n  }\n} // end SortedMap\n\n// An iterator over an LLRBNode.\nexport class SortedMapIterator<K, V> {\n  private isReverse: boolean;\n  private nodeStack: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>>;\n\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    isReverse: boolean\n  ) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (startKey && isReverse) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): Entry<K, V> {\n    debugAssert(\n      this.nodeStack.length > 0,\n      'getNext() called on iterator when hasNext() is false.'\n    );\n\n    let node = this.nodeStack.pop()!;\n    const result = { key: node.key, value: node.value };\n\n    if (this.isReverse) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack.length > 0;\n  }\n\n  peek(): Entry<K, V> | null {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack[this.nodeStack.length - 1];\n    return { key: node.key, value: node.value };\n  }\n} // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nexport class LLRBNode<K, V> {\n  readonly color: boolean;\n  readonly left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly size: number;\n\n  // Empty node is shared between all LLRB trees.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static EMPTY: LLRBEmptyNode<any, any> = null as any;\n\n  static RED = true;\n  static BLACK = false;\n\n  constructor(\n    public key: K,\n    public value: V,\n    color?: boolean,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  }\n\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.left as LLRBNode<K, V>).inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.right as LLRBNode<K, V>).inorderTraversal(action)\n    );\n  }\n\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.right as LLRBNode<K, V>).reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.left as LLRBNode<K, V>).reverseTraversal(action)\n    );\n  }\n\n  // Returns the minimum node in the tree.\n  private min(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min();\n    }\n  }\n\n  // Returns the maximum key in the tree.\n  minKey(): K | null {\n    return this.min().key;\n  }\n\n  // Returns the maximum key in the tree.\n  maxKey(): K | null {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  // Returns new tree, with the key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp();\n  }\n\n  private removeMin(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin(), null);\n    return n.fixUp();\n  }\n\n  // Returns new tree, with the specified item removed.\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let smallest: LLRBNode<K, V>;\n    let n: LLRBNode<K, V> = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp();\n  }\n\n  isRed(): boolean {\n    return this.color;\n  }\n\n  // Returns new tree after performing any needed rotations.\n  private fixUp(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedLeft(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.right.left.isRed()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight()\n      );\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedRight(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private rotateLeft(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return (this.right as LLRBNode<K, V>).copy(\n      null,\n      null,\n      this.color,\n      nl,\n      null\n    );\n  }\n\n  private rotateRight(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return (this.left as LLRBNode<K, V>).copy(null, null, this.color, null, nr);\n  }\n\n  private colorFlip(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    const blackDepth = this.check();\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  protected check(): number {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed()) {\n      throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = (this.left as LLRBNode<K, V>).check();\n    if (blackDepth !== (this.right as LLRBNode<K, V>).check()) {\n      throw fail('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  }\n} // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nexport class LLRBEmptyNode<K, V> {\n  get key(): never {\n    throw fail('LLRBEmptyNode has no key.');\n  }\n  get value(): never {\n    throw fail('LLRBEmptyNode has no value.');\n  }\n  get color(): never {\n    throw fail('LLRBEmptyNode has no color.');\n  }\n  get left(): never {\n    throw fail('LLRBEmptyNode has no left child.');\n  }\n  get right(): never {\n    throw fail('LLRBEmptyNode has no right child.');\n  }\n  size = 0;\n\n  // Returns a copy of the current node.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(key, value);\n  }\n\n  // Returns a copy of the tree, with the specified key removed.\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  isEmpty(): boolean {\n    return true;\n  }\n\n  inorderTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  reverseTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  minKey(): K | null {\n    return null;\n  }\n\n  maxKey(): K | null {\n    return null;\n  }\n\n  isRed(): boolean {\n    return false;\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    return true;\n  }\n\n  protected check(): 0 {\n    return 0;\n  }\n} // end LLRBEmptyNode\n\nLLRBNode.EMPTY = new LLRBEmptyNode<unknown, unknown>();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap, SortedMapIterator } from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> {\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) {\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  }\n\n  has(elem: T): boolean {\n    return this.data.get(elem) !== null;\n  }\n\n  first(): T | null {\n    return this.data.minKey();\n  }\n\n  last(): T | null {\n    return this.data.maxKey();\n  }\n\n  get size(): number {\n    return this.data.size;\n  }\n\n  indexOf(elem: T): number {\n    return this.data.indexOf(elem);\n  }\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void {\n    this.data.inorderTraversal((k: T, v: boolean) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n      cb(elem.key);\n    }\n  }\n\n  /**\n   * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void {\n    let iter: SortedMapIterator<T, boolean>;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) {\n        return;\n      }\n    }\n  }\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n\n  getIterator(): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIterator());\n  }\n\n  getIteratorFrom(key: T): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIteratorFrom(key));\n  }\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> {\n    if (!this.has(elem)) {\n      return this;\n    }\n    return this.copy(this.data.remove(elem));\n  }\n\n  isEmpty(): boolean {\n    return this.data.isEmpty();\n  }\n\n  unionWith(other: SortedSet<T>): SortedSet<T> {\n    let result: SortedSet<T> = this;\n\n    // Make sure `result` always refers to the larger one of the two sets.\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n\n  isEqual(other: SortedSet<T>): boolean {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toArray(): T[] {\n    const res: T[] = [];\n    this.forEach(targetId => {\n      res.push(targetId);\n    });\n    return res;\n  }\n\n  toString(): string {\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\n\nexport class SortedSetIterator<T> {\n  constructor(private iter: SortedMapIterator<T, boolean>) {}\n\n  getNext(): T {\n    return this.iter.getNext().key;\n  }\n\n  hasNext(): boolean {\n    return this.iter.hasNext();\n  }\n}\n\n/**\n * Compares two sorted sets for equality using their natural ordering. The\n * method computes the intersection and invokes `onAdd` for every element that\n * is in `after` but not `before`. `onRemove` is invoked for every element in\n * `before` but missing from `after`.\n *\n * The method creates a copy of both `before` and `after` and runs in O(n log\n * n), where n is the size of the two lists.\n *\n * @param before - The elements that exist in the original set.\n * @param after - The elements to diff against the original set.\n * @param comparator - The comparator for the elements in before and after.\n * @param onAdd - A function to invoke for every element that is part of `\n * after` but not `before`.\n * @param onRemove - A function to invoke for every element that is part of\n * `before` but not `after`.\n */\nexport function diffSortedSets<T>(\n  before: SortedSet<T>,\n  after: SortedSet<T>,\n  comparator: (l: T, r: T) => number,\n  onAdd: (entry: T) => void,\n  onRemove: (entry: T) => void\n): void {\n  const beforeIt = before.getIterator();\n  const afterIt = after.getIterator();\n\n  let beforeValue = advanceIterator(beforeIt);\n  let afterValue = advanceIterator(afterIt);\n\n  // Walk through the two sets at the same time, using the ordering defined by\n  // `comparator`.\n  while (beforeValue || afterValue) {\n    let added = false;\n    let removed = false;\n\n    if (beforeValue && afterValue) {\n      const cmp = comparator(beforeValue, afterValue);\n      if (cmp < 0) {\n        // The element was removed if the next element in our ordered\n        // walkthrough is only in `before`.\n        removed = true;\n      } else if (cmp > 0) {\n        // The element was added if the next element in our ordered walkthrough\n        // is only in `after`.\n        added = true;\n      }\n    } else if (beforeValue != null) {\n      removed = true;\n    } else {\n      added = true;\n    }\n\n    if (added) {\n      onAdd(afterValue!);\n      afterValue = advanceIterator(afterIt);\n    } else if (removed) {\n      onRemove(beforeValue!);\n      beforeValue = advanceIterator(beforeIt);\n    } else {\n      beforeValue = advanceIterator(beforeIt);\n      afterValue = advanceIterator(afterIt);\n    }\n  }\n}\n\n/**\n * Returns the next element from the iterator or `undefined` if none available.\n */\nfunction advanceIterator<T>(it: SortedSetIterator<T>): T | undefined {\n  return it.hasNext() ? it.getNext() : undefined;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { arrayEquals } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { FieldPath } from './path';\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nexport class FieldMask {\n  constructor(readonly fields: FieldPath[]) {\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    fields.sort(FieldPath.comparator);\n    debugAssert(\n      !fields.some((v, i) => i !== 0 && v.isEqual(fields[i - 1])),\n      'FieldMask contains field that is not unique: ' +\n        fields.find((v, i) => i !== 0 && v.isEqual(fields[i - 1]))!\n    );\n  }\n\n  static empty(): FieldMask {\n    return new FieldMask([]);\n  }\n\n  /**\n   * Returns a new FieldMask object that is the result of adding all the given\n   * fields paths to this field mask.\n   */\n  unionWith(extraFields: FieldPath[]): FieldMask {\n    let mergedMaskSet = new SortedSet<FieldPath>(FieldPath.comparator);\n    for (const fieldPath of this.fields) {\n      mergedMaskSet = mergedMaskSet.add(fieldPath);\n    }\n    for (const fieldPath of extraFields) {\n      mergedMaskSet = mergedMaskSet.add(fieldPath);\n    }\n    return new FieldMask(mergedMaskSet.toArray());\n  }\n\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(fieldPath: FieldPath): boolean {\n    for (const fieldMaskPath of this.fields) {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isEqual(other: FieldMask): boolean {\n    return arrayEquals(this.fields, other.fields, (l, r) => l.isEqual(r));\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  MapValue as ProtoMapValue,\n  Value as ProtoValue\n} from '../protos/firestore_proto_api';\nimport { debugAssert } from '../util/assert';\nimport { forEach } from '../util/obj';\n\nimport { FieldMask } from './field_mask';\nimport { FieldPath } from './path';\nimport { isServerTimestamp } from './server_timestamps';\nimport { deepClone, isMapValue, valueEquals } from './values';\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nexport class ObjectValue {\n  constructor(readonly value: { mapValue: ProtoMapValue }) {\n    debugAssert(\n      !isServerTimestamp(value),\n      'ServerTimestamps should be converted to ServerTimestampValue'\n    );\n  }\n\n  static empty(): ObjectValue {\n    return new ObjectValue({ mapValue: {} });\n  }\n\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path - the path to search\n   * @returns The value at the path or null if the path is not set.\n   */\n  field(path: FieldPath): ProtoValue | null {\n    if (path.isEmpty()) {\n      return this.value;\n    } else {\n      let currentLevel: ProtoValue = this.value;\n      for (let i = 0; i < path.length - 1; ++i) {\n        currentLevel = (currentLevel.mapValue!.fields || {})[path.get(i)];\n        if (!isMapValue(currentLevel)) {\n          return null;\n        }\n      }\n      currentLevel = (currentLevel.mapValue!.fields! || {})[path.lastSegment()];\n      return currentLevel || null;\n    }\n  }\n\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path - The field path to set.\n   * @param value - The value to set.\n   */\n  set(path: FieldPath, value: ProtoValue): void {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot set field for empty path on ObjectValue'\n    );\n    const fieldsMap = this.getFieldsMap(path.popLast());\n    fieldsMap[path.lastSegment()] = deepClone(value);\n  }\n\n  /**\n   * Sets the provided fields to the provided values.\n   *\n   * @param data - A map of fields to values (or null for deletes).\n   */\n  setAll(data: Map<FieldPath, ProtoValue | null>): void {\n    let parent = FieldPath.emptyPath();\n\n    let upserts: { [key: string]: ProtoValue } = {};\n    let deletes: string[] = [];\n\n    data.forEach((value, path) => {\n      if (!parent.isImmediateParentOf(path)) {\n        // Insert the accumulated changes at this parent location\n        const fieldsMap = this.getFieldsMap(parent);\n        this.applyChanges(fieldsMap, upserts, deletes);\n        upserts = {};\n        deletes = [];\n        parent = path.popLast();\n      }\n\n      if (value) {\n        upserts[path.lastSegment()] = deepClone(value);\n      } else {\n        deletes.push(path.lastSegment());\n      }\n    });\n\n    const fieldsMap = this.getFieldsMap(parent);\n    this.applyChanges(fieldsMap, upserts, deletes);\n  }\n\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path - The field path to remove.\n   */\n  delete(path: FieldPath): void {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    const nestedValue = this.field(path.popLast());\n    if (isMapValue(nestedValue) && nestedValue.mapValue.fields) {\n      delete nestedValue.mapValue.fields[path.lastSegment()];\n    }\n  }\n\n  isEqual(other: ObjectValue): boolean {\n    return valueEquals(this.value, other.value);\n  }\n\n  /**\n   * Returns the map that contains the leaf element of `path`. If the parent\n   * entry does not yet exist, or if it is not a map, a new map will be created.\n   */\n  private getFieldsMap(path: FieldPath): Record<string, ProtoValue> {\n    let current = this.value;\n\n    if (!current.mapValue!.fields) {\n      current.mapValue = { fields: {} };\n    }\n\n    for (let i = 0; i < path.length; ++i) {\n      let next = current.mapValue!.fields![path.get(i)];\n      if (!isMapValue(next) || !next.mapValue.fields) {\n        next = { mapValue: { fields: {} } };\n        current.mapValue!.fields![path.get(i)] = next;\n      }\n      current = next as { mapValue: ProtoMapValue };\n    }\n\n    return current.mapValue!.fields!;\n  }\n\n  /**\n   * Modifies `fieldsMap` by adding, replacing or deleting the specified\n   * entries.\n   */\n  private applyChanges(\n    fieldsMap: Record<string, ProtoValue>,\n    inserts: { [key: string]: ProtoValue },\n    deletes: string[]\n  ): void {\n    forEach(inserts, (key, val) => (fieldsMap[key] = val));\n    for (const field of deletes) {\n      delete fieldsMap[field];\n    }\n  }\n\n  clone(): ObjectValue {\n    return new ObjectValue(\n      deepClone(this.value) as { mapValue: ProtoMapValue }\n    );\n  }\n}\n\n/**\n * Returns a FieldMask built from all fields in a MapValue.\n */\nexport function extractFieldMask(value: ProtoMapValue): FieldMask {\n  const fields: FieldPath[] = [];\n  forEach(value!.fields, (key, value) => {\n    const currentPath = new FieldPath([key]);\n    if (isMapValue(value)) {\n      const nestedMask = extractFieldMask(value.mapValue!);\n      const nestedFields = nestedMask.fields;\n      if (nestedFields.length === 0) {\n        // Preserve the empty map by adding it to the FieldMask.\n        fields.push(currentPath);\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the\n        // leaf nodes.\n        for (const nestedPath of nestedFields) {\n          fields.push(currentPath.child(nestedPath));\n        }\n      }\n    } else {\n      // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n      // nodes.\n      fields.push(currentPath);\n    }\n  });\n  return new FieldMask(fields);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, fail } from '../util/assert';\n\nimport { DocumentKey } from './document_key';\nimport { ObjectValue } from './object_value';\nimport { FieldPath } from './path';\nimport { valueCompare } from './values';\n\n/**\n * Whether the document represents an existing document, a document that is\n * known to exist or a document whose state or existence is unknown.\n */\nconst enum DocumentType {\n  /**\n   * Represents the initial state of a MutableDocument when only the document\n   * key is known. Invalid documents transition to other states as mutations are\n   * applied. If a document remains invalid after applying mutations, it should\n   * be discarded.\n   *\n   * Invalid documents can have neither local nor committed mutations.\n   */\n  INVALID,\n  /**\n   * Represents a document in Firestore with a key, version, data and whether\n   * the data has local mutations applied to it.\n   *\n   * Found documents can be sycned or have or committed mutations applied.\n   */\n  FOUND_DOCUMENT,\n  /**\n   * Represents that no documents exists for the key at the given version.\n   *\n   * Documents that are deleted based on a local mutation do not raise snapshots\n   * with `hasPendingWrites`. As such, deleted documents never have\n   * `HAS_LOCAL_MUTATIONS` set. Once a delete is committed, we store them with\n   * `HAS_COMMITTED_MUTATIONS` until we received the delete from the Watch\n   * stream.\n   */\n  NO_DOCUMENT,\n  /**\n   * Represents an existing document whose data is unknown (e.g. a document that\n   * was updated without a known base document).\n   *\n   * An unknown document always has `HAS_COMMITTED_MUTATIONS` set, since unknown\n   * documents can only be generated by applying a patch mutation from a write\n   * acknowledgement.\n   */\n  UNKNOWN_DOCUMENT\n}\n\n/** Describes whether a document has latency-compensated edits applied. */\nconst enum DocumentState {\n  /** No mutations applied. Document was sent to us by Watch. */\n  SYNCED,\n  /**\n   * Local mutations applied via the mutation queue. Document is potentially\n   * inconsistent.\n   */\n  HAS_LOCAL_MUTATIONS,\n  /**\n   * Mutations applied based on a write acknowledgment. Document is potentially\n   * inconsistent.\n   */\n  HAS_COMMITTED_MUTATIONS\n}\n\n/**\n * Represents a document in Firestore with a key, version, data and whether the\n * data has local mutations applied to it.\n */\nexport interface Document {\n  /** The key for this document */\n  readonly key: DocumentKey;\n\n  /**\n   * The version of this document if it exists or a version at which this\n   * document was guaranteed to not exist.\n   */\n  readonly version: SnapshotVersion;\n\n  /**\n   * The timestamp at which this document was read from the remote server. Uses\n   * `SnapshotVersion.min()` for documents created by the user.\n   */\n  readonly readTime: SnapshotVersion;\n\n  /**\n   * The timestamp at which the document was created. This value increases\n   * monotonically when a document is deleted then recreated. It can also be\n   * compared to `createTime` of other documents and the `readTime` of a query.\n   */\n  readonly createTime: SnapshotVersion;\n\n  /** The underlying data of this document or an empty value if no data exists. */\n  readonly data: ObjectValue;\n\n  /** Returns whether local mutations were applied via the mutation queue. */\n  readonly hasLocalMutations: boolean;\n\n  /** Returns whether mutations were applied based on a write acknowledgment. */\n  readonly hasCommittedMutations: boolean;\n\n  /**\n   * Whether this document had a local mutation applied that has not yet been\n   * acknowledged by Watch.\n   */\n  readonly hasPendingWrites: boolean;\n\n  /**\n   * Returns whether this document is valid (i.e. it is an entry in the\n   * RemoteDocumentCache, was created by a mutation or read from the backend).\n   */\n  isValidDocument(): boolean;\n\n  /**\n   * Returns whether the document exists and its data is known at the current\n   * version.\n   */\n  isFoundDocument(): boolean;\n\n  /**\n   * Returns whether the document is known to not exist at the current version.\n   */\n  isNoDocument(): boolean;\n\n  /**\n   * Returns whether the document exists and its data is unknown at the current\n   * version.\n   */\n  isUnknownDocument(): boolean;\n\n  isEqual(other: Document | null | undefined): boolean;\n\n  /** Creates a mutable copy of this document. */\n  mutableCopy(): MutableDocument;\n\n  toString(): string;\n}\n\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */\nexport class MutableDocument implements Document {\n  private constructor(\n    readonly key: DocumentKey,\n    private documentType: DocumentType,\n    public version: SnapshotVersion,\n    public readTime: SnapshotVersion,\n    public createTime: SnapshotVersion,\n    public data: ObjectValue,\n    private documentState: DocumentState\n  ) {}\n\n  /**\n   * Creates a document with no known version or data, but which can serve as\n   * base document for mutations.\n   */\n  static newInvalidDocument(documentKey: DocumentKey): MutableDocument {\n    return new MutableDocument(\n      documentKey,\n      DocumentType.INVALID,\n      /* version */ SnapshotVersion.min(),\n      /* readTime */ SnapshotVersion.min(),\n      /* createTime */ SnapshotVersion.min(),\n      ObjectValue.empty(),\n      DocumentState.SYNCED\n    );\n  }\n\n  /**\n   * Creates a new document that is known to exist with the given data at the\n   * given version.\n   */\n  static newFoundDocument(\n    documentKey: DocumentKey,\n    version: SnapshotVersion,\n    createTime: SnapshotVersion,\n    value: ObjectValue\n  ): MutableDocument {\n    return new MutableDocument(\n      documentKey,\n      DocumentType.FOUND_DOCUMENT,\n      /* version */ version,\n      /* readTime */ SnapshotVersion.min(),\n      /* createTime */ createTime,\n      value,\n      DocumentState.SYNCED\n    );\n  }\n\n  /** Creates a new document that is known to not exist at the given version. */\n  static newNoDocument(\n    documentKey: DocumentKey,\n    version: SnapshotVersion\n  ): MutableDocument {\n    return new MutableDocument(\n      documentKey,\n      DocumentType.NO_DOCUMENT,\n      /* version */ version,\n      /* readTime */ SnapshotVersion.min(),\n      /* createTime */ SnapshotVersion.min(),\n      ObjectValue.empty(),\n      DocumentState.SYNCED\n    );\n  }\n\n  /**\n   * Creates a new document that is known to exist at the given version but\n   * whose data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n  static newUnknownDocument(\n    documentKey: DocumentKey,\n    version: SnapshotVersion\n  ): MutableDocument {\n    return new MutableDocument(\n      documentKey,\n      DocumentType.UNKNOWN_DOCUMENT,\n      /* version */ version,\n      /* readTime */ SnapshotVersion.min(),\n      /* createTime */ SnapshotVersion.min(),\n      ObjectValue.empty(),\n      DocumentState.HAS_COMMITTED_MUTATIONS\n    );\n  }\n\n  /**\n   * Changes the document type to indicate that it exists and that its version\n   * and data are known.\n   */\n  convertToFoundDocument(\n    version: SnapshotVersion,\n    value: ObjectValue\n  ): MutableDocument {\n    // If a document is switching state from being an invalid or deleted\n    // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n    // update from Watch or due to applying a local set mutation on top\n    // of a deleted document, our best guess about its createTime would be the\n    // version at which the document transitioned to a FOUND_DOCUMENT.\n    if (\n      this.createTime.isEqual(SnapshotVersion.min()) &&\n      (this.documentType === DocumentType.NO_DOCUMENT ||\n        this.documentType === DocumentType.INVALID)\n    ) {\n      this.createTime = version;\n    }\n    this.version = version;\n    this.documentType = DocumentType.FOUND_DOCUMENT;\n    this.data = value;\n    this.documentState = DocumentState.SYNCED;\n    return this;\n  }\n\n  /**\n   * Changes the document type to indicate that it doesn't exist at the given\n   * version.\n   */\n  convertToNoDocument(version: SnapshotVersion): MutableDocument {\n    this.version = version;\n    this.documentType = DocumentType.NO_DOCUMENT;\n    this.data = ObjectValue.empty();\n    this.documentState = DocumentState.SYNCED;\n    return this;\n  }\n\n  /**\n   * Changes the document type to indicate that it exists at a given version but\n   * that its data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n  convertToUnknownDocument(version: SnapshotVersion): MutableDocument {\n    this.version = version;\n    this.documentType = DocumentType.UNKNOWN_DOCUMENT;\n    this.data = ObjectValue.empty();\n    this.documentState = DocumentState.HAS_COMMITTED_MUTATIONS;\n    return this;\n  }\n\n  setHasCommittedMutations(): MutableDocument {\n    debugAssert(\n      this.isValidDocument(),\n      'Invalid documents cannot have committed mutations'\n    );\n    this.documentState = DocumentState.HAS_COMMITTED_MUTATIONS;\n    return this;\n  }\n\n  setHasLocalMutations(): MutableDocument {\n    this.documentState = DocumentState.HAS_LOCAL_MUTATIONS;\n    this.version = SnapshotVersion.min();\n    return this;\n  }\n\n  setReadTime(readTime: SnapshotVersion): MutableDocument {\n    this.readTime = readTime;\n    return this;\n  }\n\n  get hasLocalMutations(): boolean {\n    return this.documentState === DocumentState.HAS_LOCAL_MUTATIONS;\n  }\n\n  get hasCommittedMutations(): boolean {\n    return this.documentState === DocumentState.HAS_COMMITTED_MUTATIONS;\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n\n  isValidDocument(): boolean {\n    return this.documentType !== DocumentType.INVALID;\n  }\n\n  isFoundDocument(): boolean {\n    return this.documentType === DocumentType.FOUND_DOCUMENT;\n  }\n\n  isNoDocument(): boolean {\n    return this.documentType === DocumentType.NO_DOCUMENT;\n  }\n\n  isUnknownDocument(): boolean {\n    return this.documentType === DocumentType.UNKNOWN_DOCUMENT;\n  }\n\n  isEqual(other: Document | null | undefined): boolean {\n    return (\n      other instanceof MutableDocument &&\n      this.key.isEqual(other.key) &&\n      this.version.isEqual(other.version) &&\n      this.documentType === other.documentType &&\n      this.documentState === other.documentState &&\n      this.data.isEqual(other.data)\n    );\n  }\n\n  mutableCopy(): MutableDocument {\n    return new MutableDocument(\n      this.key,\n      this.documentType,\n      this.version,\n      this.readTime,\n      this.createTime,\n      this.data.clone(),\n      this.documentState\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${this.version}, ${JSON.stringify(\n        this.data.value\n      )}, ` +\n      `{createTime: ${this.createTime}}), ` +\n      `{documentType: ${this.documentType}}), ` +\n      `{documentState: ${this.documentState}})`\n    );\n  }\n}\n\n/**\n * Compares the value for field `field` in the provided documents. Throws if\n * the field does not exist in both documents.\n */\nexport function compareDocumentsByField(\n  field: FieldPath,\n  d1: Document,\n  d2: Document\n): number {\n  const v1 = d1.data.field(field);\n  const v2 = d2.data.field(field);\n  if (v1 !== null && v2 !== null) {\n    return valueCompare(v1, v2);\n  } else {\n    return fail(\"Trying to compare documents on fields that don't exist\");\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\nimport {\n  FieldIndex,\n  fieldIndexGetArraySegment,\n  fieldIndexGetDirectionalSegments,\n  IndexKind\n} from '../model/field_index';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport {\n  canonicalId,\n  MAX_VALUE,\n  MIN_VALUE,\n  lowerBoundCompare,\n  upperBoundCompare,\n  valuesGetLowerBound,\n  valuesGetUpperBound\n} from '../model/values';\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\nimport { debugCast } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\nimport { isNullOrUndefined } from '../util/types';\n\nimport { Bound, boundEquals } from './bound';\nimport {\n  Filter,\n  FieldFilter,\n  canonifyFilter,\n  stringifyFilter,\n  filterEquals,\n  Operator\n} from './filter';\nimport {\n  canonifyOrderBy,\n  OrderBy,\n  orderByEquals,\n  stringifyOrderBy\n} from './order_by';\n\n/**\n * A Target represents the WatchTarget representation of a Query, which is used\n * by the LocalStore and the RemoteStore to keep track of and to execute\n * backend queries. While a Query can represent multiple Targets, each Targets\n * maps to a single WatchTarget in RemoteStore and a single TargetData entry\n * in persistence.\n */\nexport interface Target {\n  readonly path: ResourcePath;\n  readonly collectionGroup: string | null;\n  readonly orderBy: OrderBy[];\n  readonly filters: Filter[];\n  readonly limit: number | null;\n  readonly startAt: Bound | null;\n  readonly endAt: Bound | null;\n}\n\n// Visible for testing\nexport class TargetImpl implements Target {\n  memoizedCanonicalId: string | null = null;\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly orderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {}\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\nexport function newTarget(\n  path: ResourcePath,\n  collectionGroup: string | null = null,\n  orderBy: OrderBy[] = [],\n  filters: Filter[] = [],\n  limit: number | null = null,\n  startAt: Bound | null = null,\n  endAt: Bound | null = null\n): Target {\n  return new TargetImpl(\n    path,\n    collectionGroup,\n    orderBy,\n    filters,\n    limit,\n    startAt,\n    endAt\n  );\n}\n\nexport function canonifyTarget(target: Target): string {\n  const targetImpl = debugCast(target, TargetImpl);\n\n  if (targetImpl.memoizedCanonicalId === null) {\n    let str = targetImpl.path.canonicalString();\n    if (targetImpl.collectionGroup !== null) {\n      str += '|cg:' + targetImpl.collectionGroup;\n    }\n    str += '|f:';\n    str += targetImpl.filters.map(f => canonifyFilter(f)).join(',');\n    str += '|ob:';\n    str += targetImpl.orderBy.map(o => canonifyOrderBy(o)).join(',');\n\n    if (!isNullOrUndefined(targetImpl.limit)) {\n      str += '|l:';\n      str += targetImpl.limit!;\n    }\n    if (targetImpl.startAt) {\n      str += '|lb:';\n      str += targetImpl.startAt.inclusive ? 'b:' : 'a:';\n      str += targetImpl.startAt.position.map(p => canonicalId(p)).join(',');\n    }\n    if (targetImpl.endAt) {\n      str += '|ub:';\n      str += targetImpl.endAt.inclusive ? 'a:' : 'b:';\n      str += targetImpl.endAt.position.map(p => canonicalId(p)).join(',');\n    }\n    targetImpl.memoizedCanonicalId = str;\n  }\n  return targetImpl.memoizedCanonicalId;\n}\n\nexport function stringifyTarget(target: Target): string {\n  let str = target.path.canonicalString();\n  if (target.collectionGroup !== null) {\n    str += ' collectionGroup=' + target.collectionGroup;\n  }\n  if (target.filters.length > 0) {\n    str += `, filters: [${target.filters\n      .map(f => stringifyFilter(f))\n      .join(', ')}]`;\n  }\n  if (!isNullOrUndefined(target.limit)) {\n    str += ', limit: ' + target.limit;\n  }\n  if (target.orderBy.length > 0) {\n    str += `, orderBy: [${target.orderBy\n      .map(o => stringifyOrderBy(o))\n      .join(', ')}]`;\n  }\n  if (target.startAt) {\n    str += ', startAt: ';\n    str += target.startAt.inclusive ? 'b:' : 'a:';\n    str += target.startAt.position.map(p => canonicalId(p)).join(',');\n  }\n  if (target.endAt) {\n    str += ', endAt: ';\n    str += target.endAt.inclusive ? 'a:' : 'b:';\n    str += target.endAt.position.map(p => canonicalId(p)).join(',');\n  }\n  return `Target(${str})`;\n}\n\nexport function targetEquals(left: Target, right: Target): boolean {\n  if (left.limit !== right.limit) {\n    return false;\n  }\n\n  if (left.orderBy.length !== right.orderBy.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.orderBy.length; i++) {\n    if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {\n      return false;\n    }\n  }\n\n  if (left.filters.length !== right.filters.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.filters.length; i++) {\n    if (!filterEquals(left.filters[i], right.filters[i])) {\n      return false;\n    }\n  }\n\n  if (left.collectionGroup !== right.collectionGroup) {\n    return false;\n  }\n\n  if (!left.path.isEqual(right.path)) {\n    return false;\n  }\n\n  if (!boundEquals(left.startAt, right.startAt)) {\n    return false;\n  }\n\n  return boundEquals(left.endAt, right.endAt);\n}\n\nexport function targetIsDocumentTarget(target: Target): boolean {\n  return (\n    DocumentKey.isDocumentKey(target.path) &&\n    target.collectionGroup === null &&\n    target.filters.length === 0\n  );\n}\n\n/** Returns the field filters that target the given field path. */\nexport function targetGetFieldFiltersForPath(\n  target: Target,\n  path: FieldPath\n): FieldFilter[] {\n  return target.filters.filter(\n    f => f instanceof FieldFilter && f.field.isEqual(path)\n  ) as FieldFilter[];\n}\n\n/**\n * Returns the values that are used in ARRAY_CONTAINS or ARRAY_CONTAINS_ANY\n * filters. Returns `null` if there are no such filters.\n */\nexport function targetGetArrayValues(\n  target: Target,\n  fieldIndex: FieldIndex\n): ProtoValue[] | null {\n  const segment = fieldIndexGetArraySegment(fieldIndex);\n  if (segment === undefined) {\n    return null;\n  }\n\n  for (const fieldFilter of targetGetFieldFiltersForPath(\n    target,\n    segment.fieldPath\n  )) {\n    switch (fieldFilter.op) {\n      case Operator.ARRAY_CONTAINS_ANY:\n        return fieldFilter.value.arrayValue!.values || [];\n      case Operator.ARRAY_CONTAINS:\n        return [fieldFilter.value];\n      default:\n      // Remaining filters are not array filters.\n    }\n  }\n  return null;\n}\n\n/**\n * Returns the list of values that are used in != or NOT_IN filters. Returns\n * `null` if there are no such filters.\n */\nexport function targetGetNotInValues(\n  target: Target,\n  fieldIndex: FieldIndex\n): ProtoValue[] | null {\n  const values = new Map</* fieldPath = */ string, ProtoValue>();\n\n  for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n    for (const fieldFilter of targetGetFieldFiltersForPath(\n      target,\n      segment.fieldPath\n    )) {\n      switch (fieldFilter.op) {\n        case Operator.EQUAL:\n        case Operator.IN:\n          // Encode equality prefix, which is encoded in the index value before\n          // the inequality (e.g. `a == 'a' && b != 'b'` is encoded to\n          // `value != 'ab'`).\n          values.set(segment.fieldPath.canonicalString(), fieldFilter.value);\n          break;\n        case Operator.NOT_IN:\n        case Operator.NOT_EQUAL:\n          // NotIn/NotEqual is always a suffix. There cannot be any remaining\n          // segments and hence we can return early here.\n          values.set(segment.fieldPath.canonicalString(), fieldFilter.value);\n          return Array.from(values.values());\n        default:\n        // Remaining filters cannot be used as notIn bounds.\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * Returns a lower bound of field values that can be used as a starting point to\n * scan the index defined by `fieldIndex`. Returns `MIN_VALUE` if no lower bound\n * exists.\n */\nexport function targetGetLowerBound(\n  target: Target,\n  fieldIndex: FieldIndex\n): Bound {\n  const values: ProtoValue[] = [];\n  let inclusive = true;\n\n  // For each segment, retrieve a lower bound if there is a suitable filter or\n  // startAt.\n  for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n    const segmentBound =\n      segment.kind === IndexKind.ASCENDING\n        ? targetGetAscendingBound(target, segment.fieldPath, target.startAt)\n        : targetGetDescendingBound(target, segment.fieldPath, target.startAt);\n\n    values.push(segmentBound.value);\n    inclusive &&= segmentBound.inclusive;\n  }\n  return new Bound(values, inclusive);\n}\n\n/**\n * Returns an upper bound of field values that can be used as an ending point\n * when scanning the index defined by `fieldIndex`. Returns `MAX_VALUE` if no\n * upper bound exists.\n */\nexport function targetGetUpperBound(\n  target: Target,\n  fieldIndex: FieldIndex\n): Bound {\n  const values: ProtoValue[] = [];\n  let inclusive = true;\n\n  // For each segment, retrieve an upper bound if there is a suitable filter or\n  // endAt.\n  for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n    const segmentBound =\n      segment.kind === IndexKind.ASCENDING\n        ? targetGetDescendingBound(target, segment.fieldPath, target.endAt)\n        : targetGetAscendingBound(target, segment.fieldPath, target.endAt);\n\n    values.push(segmentBound.value);\n    inclusive &&= segmentBound.inclusive;\n  }\n\n  return new Bound(values, inclusive);\n}\n\n/**\n * Returns the value to use as the lower bound for ascending index segment at\n * the provided `fieldPath` (or the upper bound for an descending segment).\n */\nfunction targetGetAscendingBound(\n  target: Target,\n  fieldPath: FieldPath,\n  bound: Bound | null\n): { value: ProtoValue; inclusive: boolean } {\n  let value: ProtoValue = MIN_VALUE;\n\n  let inclusive = true;\n\n  // Process all filters to find a value for the current field segment\n  for (const fieldFilter of targetGetFieldFiltersForPath(target, fieldPath)) {\n    let filterValue: ProtoValue = MIN_VALUE;\n    let filterInclusive = true;\n\n    switch (fieldFilter.op) {\n      case Operator.LESS_THAN:\n      case Operator.LESS_THAN_OR_EQUAL:\n        filterValue = valuesGetLowerBound(fieldFilter.value);\n        break;\n      case Operator.EQUAL:\n      case Operator.IN:\n      case Operator.GREATER_THAN_OR_EQUAL:\n        filterValue = fieldFilter.value;\n        break;\n      case Operator.GREATER_THAN:\n        filterValue = fieldFilter.value;\n        filterInclusive = false;\n        break;\n      case Operator.NOT_EQUAL:\n      case Operator.NOT_IN:\n        filterValue = MIN_VALUE;\n        break;\n      default:\n      // Remaining filters cannot be used as lower bounds.\n    }\n\n    if (\n      lowerBoundCompare(\n        { value, inclusive },\n        { value: filterValue, inclusive: filterInclusive }\n      ) < 0\n    ) {\n      value = filterValue;\n      inclusive = filterInclusive;\n    }\n  }\n\n  // If there is an additional bound, compare the values against the existing\n  // range to see if we can narrow the scope.\n  if (bound !== null) {\n    for (let i = 0; i < target.orderBy.length; ++i) {\n      const orderBy = target.orderBy[i];\n      if (orderBy.field.isEqual(fieldPath)) {\n        const cursorValue = bound.position[i];\n        if (\n          lowerBoundCompare(\n            { value, inclusive },\n            { value: cursorValue, inclusive: bound.inclusive }\n          ) < 0\n        ) {\n          value = cursorValue;\n          inclusive = bound.inclusive;\n        }\n        break;\n      }\n    }\n  }\n\n  return { value, inclusive };\n}\n\n/**\n * Returns the value to use as the upper bound for ascending index segment at\n * the provided `fieldPath` (or the lower bound for a descending segment).\n */\nfunction targetGetDescendingBound(\n  target: Target,\n  fieldPath: FieldPath,\n  bound: Bound | null\n): { value: ProtoValue; inclusive: boolean } {\n  let value: ProtoValue = MAX_VALUE;\n  let inclusive = true;\n\n  // Process all filters to find a value for the current field segment\n  for (const fieldFilter of targetGetFieldFiltersForPath(target, fieldPath)) {\n    let filterValue: ProtoValue = MAX_VALUE;\n    let filterInclusive = true;\n\n    switch (fieldFilter.op) {\n      case Operator.GREATER_THAN_OR_EQUAL:\n      case Operator.GREATER_THAN:\n        filterValue = valuesGetUpperBound(fieldFilter.value);\n        filterInclusive = false;\n        break;\n      case Operator.EQUAL:\n      case Operator.IN:\n      case Operator.LESS_THAN_OR_EQUAL:\n        filterValue = fieldFilter.value;\n        break;\n      case Operator.LESS_THAN:\n        filterValue = fieldFilter.value;\n        filterInclusive = false;\n        break;\n      case Operator.NOT_EQUAL:\n      case Operator.NOT_IN:\n        filterValue = MAX_VALUE;\n        break;\n      default:\n      // Remaining filters cannot be used as upper bounds.\n    }\n\n    if (\n      upperBoundCompare(\n        { value, inclusive },\n        { value: filterValue, inclusive: filterInclusive }\n      ) > 0\n    ) {\n      value = filterValue;\n      inclusive = filterInclusive;\n    }\n  }\n\n  // If there is an additional bound, compare the values against the existing\n  // range to see if we can narrow the scope.\n  if (bound !== null) {\n    for (let i = 0; i < target.orderBy.length; ++i) {\n      const orderBy = target.orderBy[i];\n      if (orderBy.field.isEqual(fieldPath)) {\n        const cursorValue = bound.position[i];\n        if (\n          upperBoundCompare(\n            { value, inclusive },\n            { value: cursorValue, inclusive: bound.inclusive }\n          ) > 0\n        ) {\n          value = cursorValue;\n          inclusive = bound.inclusive;\n        }\n        break;\n      }\n    }\n  }\n\n  return { value, inclusive };\n}\n\n/** Returns the number of segments of a perfect index for this target. */\nexport function targetGetSegmentCount(target: Target): number {\n  let fields = new SortedSet<FieldPath>(FieldPath.comparator);\n  let hasArraySegment = false;\n\n  for (const filter of target.filters) {\n    for (const subFilter of filter.getFlattenedFilters()) {\n      // __name__ is not an explicit segment of any index, so we don't need to\n      // count it.\n      if (subFilter.field.isKeyField()) {\n        continue;\n      }\n\n      // ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filters must be counted separately.\n      // For instance, it is possible to have an index for \"a ARRAY a ASC\". Even\n      // though these are on the same field, they should be counted as two\n      // separate segments in an index.\n      if (\n        subFilter.op === Operator.ARRAY_CONTAINS ||\n        subFilter.op === Operator.ARRAY_CONTAINS_ANY\n      ) {\n        hasArraySegment = true;\n      } else {\n        fields = fields.add(subFilter.field);\n      }\n    }\n  }\n\n  for (const orderBy of target.orderBy) {\n    // __name__ is not an explicit segment of any index, so we don't need to\n    // count it.\n    if (!orderBy.field.isKeyField()) {\n      fields = fields.add(orderBy.field);\n    }\n  }\n\n  return fields.size + (hasArraySegment ? 1 : 0);\n}\n\nexport function targetHasLimit(target: Target): boolean {\n  return target.limit !== null;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { compareDocumentsByField, Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { debugAssert, debugCast, fail } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\n\nimport {\n  Bound,\n  boundSortsAfterDocument,\n  boundSortsBeforeDocument\n} from './bound';\nimport { FieldFilter, Filter } from './filter';\nimport { Direction, OrderBy } from './order_by';\nimport {\n  canonifyTarget,\n  newTarget,\n  stringifyTarget,\n  Target,\n  targetEquals\n} from './target';\n\nexport const enum LimitType {\n  First = 'F',\n  Last = 'L'\n}\n\n/**\n * The Query interface defines all external properties of a query.\n *\n * QueryImpl implements this interface to provide memoization for `queryNormalizedOrderBy`\n * and `queryToTarget`.\n */\nexport interface Query {\n  readonly path: ResourcePath;\n  readonly collectionGroup: string | null;\n  readonly explicitOrderBy: OrderBy[];\n  readonly filters: Filter[];\n  readonly limit: number | null;\n  readonly limitType: LimitType;\n  readonly startAt: Bound | null;\n  readonly endAt: Bound | null;\n}\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nexport class QueryImpl implements Query {\n  memoizedNormalizedOrderBy: OrderBy[] | null = null;\n\n  // The corresponding `Target` of this `Query` instance, for use with\n  // non-aggregate queries.\n  memoizedTarget: Target | null = null;\n\n  // The corresponding `Target` of this `Query` instance, for use with\n  // aggregate queries. Unlike targets for non-aggregate queries,\n  // aggregate query targets do not contain normalized order-bys, they only\n  // contain explicit order-bys.\n  memoizedAggregateTarget: Target | null = null;\n\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly explicitOrderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly limitType: LimitType = LimitType.First,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {\n    if (this.startAt) {\n      debugAssert(\n        this.startAt.position.length <= queryNormalizedOrderBy(this).length,\n        'Bound is longer than orderBy'\n      );\n    }\n    if (this.endAt) {\n      debugAssert(\n        this.endAt.position.length <= queryNormalizedOrderBy(this).length,\n        'Bound is longer than orderBy'\n      );\n    }\n  }\n}\n\n/** Creates a new Query instance with the options provided. */\nexport function newQuery(\n  path: ResourcePath,\n  collectionGroup: string | null,\n  explicitOrderBy: OrderBy[],\n  filters: Filter[],\n  limit: number | null,\n  limitType: LimitType,\n  startAt: Bound | null,\n  endAt: Bound | null\n): Query {\n  return new QueryImpl(\n    path,\n    collectionGroup,\n    explicitOrderBy,\n    filters,\n    limit,\n    limitType,\n    startAt,\n    endAt\n  );\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */\nexport function newQueryForPath(path: ResourcePath): Query {\n  return new QueryImpl(path);\n}\n\n/**\n * Helper to convert a collection group query into a collection query at a\n * specific path. This is used when executing collection group queries, since\n * we have to split the query into a set of collection queries at multiple\n * paths.\n */\nexport function asCollectionQueryAtPath(\n  query: Query,\n  path: ResourcePath\n): Query {\n  return new QueryImpl(\n    path,\n    /*collectionGroup=*/ null,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\n/**\n * Returns true if this query does not specify any query constraints that\n * could remove results.\n */\nexport function queryMatchesAllDocuments(query: Query): boolean {\n  return (\n    query.filters.length === 0 &&\n    query.limit === null &&\n    query.startAt == null &&\n    query.endAt == null &&\n    (query.explicitOrderBy.length === 0 ||\n      (query.explicitOrderBy.length === 1 &&\n        query.explicitOrderBy[0].field.isKeyField()))\n  );\n}\n\n// Returns the sorted set of inequality filter fields used in this query.\nexport function getInequalityFilterFields(query: Query): SortedSet<FieldPath> {\n  let result = new SortedSet<FieldPath>(FieldPath.comparator);\n  query.filters.forEach((filter: Filter) => {\n    const subFilters = filter.getFlattenedFilters();\n    subFilters.forEach((filter: FieldFilter) => {\n      if (filter.isInequality()) {\n        result = result.add(filter.field);\n      }\n    });\n  });\n  return result;\n}\n\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\nexport function newQueryForCollectionGroup(collectionId: string): Query {\n  return new QueryImpl(ResourcePath.emptyPath(), collectionId);\n}\n\n/**\n * Returns whether the query matches a single document by path (rather than a\n * collection).\n */\nexport function isDocumentQuery(query: Query): boolean {\n  return (\n    DocumentKey.isDocumentKey(query.path) &&\n    query.collectionGroup === null &&\n    query.filters.length === 0\n  );\n}\n\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nexport function isCollectionGroupQuery(query: Query): boolean {\n  return query.collectionGroup !== null;\n}\n\n/**\n * Returns the normalized order-by constraint that is used to execute the Query,\n * which can be different from the order-by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`). The normalized order-by\n * includes implicit order-bys in addition to the explicit user provided\n * order-bys.\n */\nexport function queryNormalizedOrderBy(query: Query): OrderBy[] {\n  const queryImpl = debugCast(query, QueryImpl);\n  if (queryImpl.memoizedNormalizedOrderBy === null) {\n    queryImpl.memoizedNormalizedOrderBy = [];\n    const fieldsNormalized = new Set<string>();\n\n    // Any explicit order by fields should be added as is.\n    for (const orderBy of queryImpl.explicitOrderBy) {\n      queryImpl.memoizedNormalizedOrderBy.push(orderBy);\n      fieldsNormalized.add(orderBy.field.canonicalString());\n    }\n\n    // The order of the implicit ordering always matches the last explicit order by.\n    const lastDirection =\n      queryImpl.explicitOrderBy.length > 0\n        ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1].dir\n        : Direction.ASCENDING;\n\n    // Any inequality fields not explicitly ordered should be implicitly ordered in a lexicographical\n    // order. When there are multiple inequality filters on the same field, the field should be added\n    // only once.\n    // Note: `SortedSet<FieldPath>` sorts the key field before other fields. However, we want the key\n    // field to be sorted last.\n    const inequalityFields: SortedSet<FieldPath> =\n      getInequalityFilterFields(queryImpl);\n    inequalityFields.forEach(field => {\n      if (\n        !fieldsNormalized.has(field.canonicalString()) &&\n        !field.isKeyField()\n      ) {\n        queryImpl.memoizedNormalizedOrderBy!.push(\n          new OrderBy(field, lastDirection)\n        );\n      }\n    });\n\n    // Add the document key field to the last if it is not explicitly ordered.\n    if (!fieldsNormalized.has(FieldPath.keyField().canonicalString())) {\n      queryImpl.memoizedNormalizedOrderBy.push(\n        new OrderBy(FieldPath.keyField(), lastDirection)\n      );\n    }\n  }\n  return queryImpl.memoizedNormalizedOrderBy;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation.\n */\nexport function queryToTarget(query: Query): Target {\n  const queryImpl = debugCast(query, QueryImpl);\n  if (!queryImpl.memoizedTarget) {\n    queryImpl.memoizedTarget = _queryToTarget(\n      queryImpl,\n      queryNormalizedOrderBy(query)\n    );\n  }\n\n  return queryImpl.memoizedTarget;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation,\n * for use within an aggregate query. Unlike targets for non-aggregate queries,\n * aggregate query targets do not contain normalized order-bys, they only\n * contain explicit order-bys.\n */\nexport function queryToAggregateTarget(query: Query): Target {\n  const queryImpl = debugCast(query, QueryImpl);\n\n  if (!queryImpl.memoizedAggregateTarget) {\n    // Do not include implicit order-bys for aggregate queries.\n    queryImpl.memoizedAggregateTarget = _queryToTarget(\n      queryImpl,\n      query.explicitOrderBy\n    );\n  }\n\n  return queryImpl.memoizedAggregateTarget;\n}\n\nfunction _queryToTarget(queryImpl: QueryImpl, orderBys: OrderBy[]): Target {\n  if (queryImpl.limitType === LimitType.First) {\n    return newTarget(\n      queryImpl.path,\n      queryImpl.collectionGroup,\n      orderBys,\n      queryImpl.filters,\n      queryImpl.limit,\n      queryImpl.startAt,\n      queryImpl.endAt\n    );\n  } else {\n    // Flip the orderBy directions since we want the last results\n    orderBys = orderBys.map(orderBy => {\n      const dir =\n        orderBy.dir === Direction.DESCENDING\n          ? Direction.ASCENDING\n          : Direction.DESCENDING;\n      return new OrderBy(orderBy.field, dir);\n    });\n\n    // We need to swap the cursors to match the now-flipped query ordering.\n    const startAt = queryImpl.endAt\n      ? new Bound(queryImpl.endAt.position, queryImpl.endAt.inclusive)\n      : null;\n    const endAt = queryImpl.startAt\n      ? new Bound(queryImpl.startAt.position, queryImpl.startAt.inclusive)\n      : null;\n\n    // Now return as a LimitType.First query.\n    return newTarget(\n      queryImpl.path,\n      queryImpl.collectionGroup,\n      orderBys,\n      queryImpl.filters,\n      queryImpl.limit,\n      startAt,\n      endAt\n    );\n  }\n}\n\nexport function queryWithAddedFilter(query: Query, filter: Filter): Query {\n  debugAssert(\n    !isDocumentQuery(query),\n    'No filtering allowed for document query'\n  );\n\n  const newFilters = query.filters.concat([filter]);\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    newFilters,\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithAddedOrderBy(query: Query, orderBy: OrderBy): Query {\n  debugAssert(\n    !query.startAt && !query.endAt,\n    'Bounds must be set after orderBy'\n  );\n  // TODO(dimond): validate that orderBy does not list the same key twice.\n  const newOrderBy = query.explicitOrderBy.concat([orderBy]);\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    newOrderBy,\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithLimit(\n  query: Query,\n  limit: number | null,\n  limitType: LimitType\n): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    limit,\n    limitType,\n    query.startAt,\n    query.endAt\n  );\n}\n\nexport function queryWithStartAt(query: Query, bound: Bound): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    bound,\n    query.endAt\n  );\n}\n\nexport function queryWithEndAt(query: Query, bound: Bound): Query {\n  return new QueryImpl(\n    query.path,\n    query.collectionGroup,\n    query.explicitOrderBy.slice(),\n    query.filters.slice(),\n    query.limit,\n    query.limitType,\n    query.startAt,\n    bound\n  );\n}\n\nexport function queryEquals(left: Query, right: Query): boolean {\n  return (\n    targetEquals(queryToTarget(left), queryToTarget(right)) &&\n    left.limitType === right.limitType\n  );\n}\n\n// TODO(b/29183165): This is used to get a unique string from a query to, for\n// example, use as a dictionary key, but the implementation is subject to\n// collisions. Make it collision-free.\nexport function canonifyQuery(query: Query): string {\n  return `${canonifyTarget(queryToTarget(query))}|lt:${query.limitType}`;\n}\n\nexport function stringifyQuery(query: Query): string {\n  return `Query(target=${stringifyTarget(queryToTarget(query))}; limitType=${\n    query.limitType\n  })`;\n}\n\n/** Returns whether `doc` matches the constraints of `query`. */\nexport function queryMatches(query: Query, doc: Document): boolean {\n  return (\n    doc.isFoundDocument() &&\n    queryMatchesPathAndCollectionGroup(query, doc) &&\n    queryMatchesOrderBy(query, doc) &&\n    queryMatchesFilters(query, doc) &&\n    queryMatchesBounds(query, doc)\n  );\n}\n\nfunction queryMatchesPathAndCollectionGroup(\n  query: Query,\n  doc: Document\n): boolean {\n  const docPath = doc.key.path;\n  if (query.collectionGroup !== null) {\n    // NOTE: this.path is currently always empty since we don't expose Collection\n    // Group queries rooted at a document path yet.\n    return (\n      doc.key.hasCollectionId(query.collectionGroup) &&\n      query.path.isPrefixOf(docPath)\n    );\n  } else if (DocumentKey.isDocumentKey(query.path)) {\n    // exact match for document queries\n    return query.path.isEqual(docPath);\n  } else {\n    // shallow ancestor queries by default\n    return query.path.isImmediateParentOf(docPath);\n  }\n}\n\n/**\n * A document must have a value for every ordering clause in order to show up\n * in the results.\n */\nfunction queryMatchesOrderBy(query: Query, doc: Document): boolean {\n  // We must use `queryNormalizedOrderBy()` to get the list of all orderBys (both implicit and explicit).\n  // Note that for OR queries, orderBy applies to all disjunction terms and implicit orderBys must\n  // be taken into account. For example, the query \"a > 1 || b==1\" has an implicit \"orderBy a\" due\n  // to the inequality, and is evaluated as \"a > 1 orderBy a || b==1 orderBy a\".\n  // A document with content of {b:1} matches the filters, but does not match the orderBy because\n  // it's missing the field 'a'.\n  for (const orderBy of queryNormalizedOrderBy(query)) {\n    // order-by key always matches\n    if (!orderBy.field.isKeyField() && doc.data.field(orderBy.field) === null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction queryMatchesFilters(query: Query, doc: Document): boolean {\n  for (const filter of query.filters) {\n    if (!filter.matches(doc)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Makes sure a document is within the bounds, if provided. */\nfunction queryMatchesBounds(query: Query, doc: Document): boolean {\n  if (\n    query.startAt &&\n    !boundSortsBeforeDocument(query.startAt, queryNormalizedOrderBy(query), doc)\n  ) {\n    return false;\n  }\n  if (\n    query.endAt &&\n    !boundSortsAfterDocument(query.endAt, queryNormalizedOrderBy(query), doc)\n  ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns the collection group that this query targets.\n *\n * PORTING NOTE: This is only used in the Web SDK to facilitate multi-tab\n * synchronization for query results.\n */\nexport function queryCollectionGroup(query: Query): string {\n  return (\n    query.collectionGroup ||\n    (query.path.length % 2 === 1\n      ? query.path.lastSegment()\n      : query.path.get(query.path.length - 2))\n  );\n}\n\n/**\n * Returns a new comparator function that can be used to compare two documents\n * based on the Query's ordering constraint.\n */\nexport function newQueryComparator(\n  query: Query\n): (d1: Document, d2: Document) => number {\n  return (d1: Document, d2: Document): number => {\n    let comparedOnKeyField = false;\n    for (const orderBy of queryNormalizedOrderBy(query)) {\n      const comp = compareDocs(orderBy, d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    // Assert that we actually compared by key\n    debugAssert(\n      comparedOnKeyField,\n      \"orderBy used that doesn't compare on key field\"\n    );\n    return 0;\n  };\n}\n\nexport function compareDocs(\n  orderBy: OrderBy,\n  d1: Document,\n  d2: Document\n): number {\n  const comparison = orderBy.field.isKeyField()\n    ? DocumentKey.comparator(d1.key, d2.key)\n    : compareDocumentsByField(orderBy.field, d1, d2);\n  switch (orderBy.dir) {\n    case Direction.ASCENDING:\n      return comparison;\n    case Direction.DESCENDING:\n      return -1 * comparison;\n    default:\n      return fail('Unknown direction: ' + orderBy.dir);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\nimport { isNegativeZero, isSafeInteger } from '../util/types';\n\n/** Base interface for the Serializer implementation. */\nexport interface Serializer {\n  readonly useProto3Json: boolean;\n}\n\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\nexport function toDouble(serializer: Serializer, value: number): ProtoValue {\n  if (serializer.useProto3Json) {\n    if (isNaN(value)) {\n      return { doubleValue: 'NaN' };\n    } else if (value === Infinity) {\n      return { doubleValue: 'Infinity' };\n    } else if (value === -Infinity) {\n      return { doubleValue: '-Infinity' };\n    }\n  }\n  return { doubleValue: isNegativeZero(value) ? '-0' : value };\n}\n\n/**\n * Returns an IntegerValue for `value`.\n */\nexport function toInteger(value: number): ProtoValue {\n  return { integerValue: '' + value };\n}\n\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nexport function toNumber(serializer: Serializer, value: number): ProtoValue {\n  return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../lite-api/timestamp';\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\nimport { Serializer, toDouble, toInteger } from '../remote/number_serializer';\nimport { debugAssert } from '../util/assert';\nimport { arrayEquals } from '../util/misc';\n\nimport { normalizeNumber } from './normalize';\nimport { serverTimestamp } from './server_timestamps';\nimport { isArray, isInteger, isNumber, valueEquals } from './values';\n\n/** Used to represent a field transform on a mutation. */\nexport class TransformOperation {\n  // Make sure that the structural type of `TransformOperation` is unique.\n  // See https://github.com/microsoft/TypeScript/issues/5451\n  private _ = undefined;\n}\n\n/**\n * Computes the local transform result against the provided `previousValue`,\n * optionally using the provided localWriteTime.\n */\nexport function applyTransformOperationToLocalView(\n  transform: TransformOperation,\n  previousValue: ProtoValue | null,\n  localWriteTime: Timestamp\n): ProtoValue {\n  if (transform instanceof ServerTimestampTransform) {\n    return serverTimestamp(localWriteTime, previousValue);\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  } else {\n    debugAssert(\n      transform instanceof NumericIncrementTransformOperation,\n      'Expected NumericIncrementTransformOperation but was: ' + transform\n    );\n    return applyNumericIncrementTransformOperationToLocalView(\n      transform,\n      previousValue\n    );\n  }\n}\n\n/**\n * Computes a final transform result after the transform has been acknowledged\n * by the server, potentially using the server-provided transformResult.\n */\nexport function applyTransformOperationToRemoteDocument(\n  transform: TransformOperation,\n  previousValue: ProtoValue | null,\n  transformResult: ProtoValue | null\n): ProtoValue {\n  // The server just sends null as the transform result for array operations,\n  // so we have to calculate a result the same as we do for local\n  // applications.\n  if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  }\n\n  debugAssert(\n    transformResult !== null,\n    \"Didn't receive transformResult for non-array transform\"\n  );\n  return transformResult;\n}\n\n/**\n * If this transform operation is not idempotent, returns the base value to\n * persist for this transform. If a base value is returned, the transform\n * operation is always applied to this base value, even if document has\n * already been updated.\n *\n * Base values provide consistent behavior for non-idempotent transforms and\n * allow us to return the same latency-compensated value even if the backend\n * has already applied the transform operation. The base value is null for\n * idempotent transforms, as they can be re-played even if the backend has\n * already applied them.\n *\n * @returns a base value to store along with the mutation, or null for\n * idempotent transforms.\n */\nexport function computeTransformOperationBaseValue(\n  transform: TransformOperation,\n  previousValue: ProtoValue | null\n): ProtoValue | null {\n  if (transform instanceof NumericIncrementTransformOperation) {\n    return isNumber(previousValue) ? previousValue! : { integerValue: 0 };\n  }\n  return null;\n}\n\nexport function transformOperationEquals(\n  left: TransformOperation,\n  right: TransformOperation\n): boolean {\n  if (\n    left instanceof ArrayUnionTransformOperation &&\n    right instanceof ArrayUnionTransformOperation\n  ) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (\n    left instanceof ArrayRemoveTransformOperation &&\n    right instanceof ArrayRemoveTransformOperation\n  ) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (\n    left instanceof NumericIncrementTransformOperation &&\n    right instanceof NumericIncrementTransformOperation\n  ) {\n    return valueEquals(left.operand, right.operand);\n  }\n\n  return (\n    left instanceof ServerTimestampTransform &&\n    right instanceof ServerTimestampTransform\n  );\n}\n\n/** Transforms a value into a server-generated timestamp. */\nexport class ServerTimestampTransform extends TransformOperation {}\n\n/** Transforms an array value via a union operation. */\nexport class ArrayUnionTransformOperation extends TransformOperation {\n  constructor(readonly elements: ProtoValue[]) {\n    super();\n  }\n}\n\nfunction applyArrayUnionTransformOperation(\n  transform: ArrayUnionTransformOperation,\n  previousValue: ProtoValue | null\n): ProtoValue {\n  const values = coercedFieldValuesArray(previousValue);\n  for (const toUnion of transform.elements) {\n    if (!values.some(element => valueEquals(element, toUnion))) {\n      values.push(toUnion);\n    }\n  }\n  return { arrayValue: { values } };\n}\n\n/** Transforms an array value via a remove operation. */\nexport class ArrayRemoveTransformOperation extends TransformOperation {\n  constructor(readonly elements: ProtoValue[]) {\n    super();\n  }\n}\n\nfunction applyArrayRemoveTransformOperation(\n  transform: ArrayRemoveTransformOperation,\n  previousValue: ProtoValue | null\n): ProtoValue {\n  let values = coercedFieldValuesArray(previousValue);\n  for (const toRemove of transform.elements) {\n    values = values.filter(element => !valueEquals(element, toRemove));\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nexport class NumericIncrementTransformOperation extends TransformOperation {\n  constructor(readonly serializer: Serializer, readonly operand: ProtoValue) {\n    super();\n    debugAssert(\n      isNumber(operand),\n      'NumericIncrementTransform transform requires a NumberValue'\n    );\n  }\n}\n\nexport function applyNumericIncrementTransformOperationToLocalView(\n  transform: NumericIncrementTransformOperation,\n  previousValue: ProtoValue | null\n): ProtoValue {\n  // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n  // precision and resolves overflows by reducing precision, we do not\n  // manually cap overflows at 2^63.\n  const baseValue = computeTransformOperationBaseValue(\n    transform,\n    previousValue\n  )!;\n  const sum = asNumber(baseValue) + asNumber(transform.operand);\n  if (isInteger(baseValue) && isInteger(transform.operand)) {\n    return toInteger(sum);\n  } else {\n    return toDouble(transform.serializer, sum);\n  }\n}\n\nfunction asNumber(value: ProtoValue): number {\n  return normalizeNumber(value.integerValue || value.doubleValue);\n}\n\nfunction coercedFieldValuesArray(value: ProtoValue | null): ProtoValue[] {\n  return isArray(value) && value.arrayValue.values\n    ? value.arrayValue.values.slice()\n    : [];\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Timestamp } from '../lite-api/timestamp';\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { arrayEquals } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { Document, MutableDocument } from './document';\nimport { DocumentKey } from './document_key';\nimport { FieldMask } from './field_mask';\nimport { ObjectValue } from './object_value';\nimport { FieldPath } from './path';\nimport {\n  applyTransformOperationToLocalView,\n  applyTransformOperationToRemoteDocument,\n  computeTransformOperationBaseValue,\n  TransformOperation,\n  transformOperationEquals\n} from './transform_operation';\n\n/** A field path and the TransformOperation to perform upon it. */\nexport class FieldTransform {\n  constructor(\n    readonly field: FieldPath,\n    readonly transform: TransformOperation\n  ) {}\n}\n\nexport function fieldTransformEquals(\n  left: FieldTransform,\n  right: FieldTransform\n): boolean {\n  return (\n    left.field.isEqual(right.field) &&\n    transformOperationEquals(left.transform, right.transform)\n  );\n}\n\nexport function fieldTransformsAreEqual(\n  left?: FieldTransform[],\n  right?: FieldTransform[]\n): boolean {\n  if (left === undefined && right === undefined) {\n    return true;\n  }\n\n  if (left && right) {\n    return arrayEquals(left, right, (l, r) => fieldTransformEquals(l, r));\n  }\n\n  return false;\n}\n\n/** The result of successfully applying a mutation to the backend. */\nexport class MutationResult {\n  constructor(\n    /**\n     * The version at which the mutation was committed:\n     *\n     * - For most operations, this is the updateTime in the WriteResult.\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\n     *   not stored and have no updateTime).\n     *\n     * Note that these versions can be different: No-op writes will not change\n     * the updateTime even though the commitTime advances.\n     */\n    readonly version: SnapshotVersion,\n    /**\n     * The resulting fields returned from the backend after a mutation\n     * containing field transforms has been committed. Contains one FieldValue\n     * for each FieldTransform that was in the mutation.\n     *\n     * Will be empty if the mutation did not contain any field transforms.\n     */\n    readonly transformResults: Array<ProtoValue | null>\n  ) {}\n}\n\nexport const enum MutationType {\n  Set,\n  Patch,\n  Delete,\n  Verify\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nexport class Precondition {\n  private constructor(\n    readonly updateTime?: SnapshotVersion,\n    readonly exists?: boolean\n  ) {\n    debugAssert(\n      updateTime === undefined || exists === undefined,\n      'Precondition can specify \"exists\" or \"updateTime\" but not both'\n    );\n  }\n\n  /** Creates a new empty Precondition. */\n  static none(): Precondition {\n    return new Precondition();\n  }\n\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists: boolean): Precondition {\n    return new Precondition(undefined, exists);\n  }\n\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version: SnapshotVersion): Precondition {\n    return new Precondition(version);\n  }\n\n  /** Returns whether this Precondition is empty. */\n  get isNone(): boolean {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n\n  isEqual(other: Precondition): boolean {\n    return (\n      this.exists === other.exists &&\n      (this.updateTime\n        ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\n        : !other.updateTime)\n    );\n  }\n}\n\n/** Returns true if the preconditions is valid for the given document. */\nexport function preconditionIsValidForDocument(\n  precondition: Precondition,\n  document: MutableDocument\n): boolean {\n  if (precondition.updateTime !== undefined) {\n    return (\n      document.isFoundDocument() &&\n      document.version.isEqual(precondition.updateTime)\n    );\n  } else if (precondition.exists !== undefined) {\n    return precondition.exists === document.isFoundDocument();\n  } else {\n    debugAssert(precondition.isNone, 'Precondition should be empty');\n    return true;\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */\nexport abstract class Mutation {\n  abstract readonly type: MutationType;\n  abstract readonly key: DocumentKey;\n  abstract readonly precondition: Precondition;\n  abstract readonly fieldTransforms: FieldTransform[];\n  /**\n   * Returns a `FieldMask` representing the fields that will be changed by\n   * applying this mutation. Returns `null` if the mutation will overwrite the\n   * entire document.\n   */\n  abstract getFieldMask(): FieldMask | null;\n}\n\n/**\n * A utility method to calculate a `Mutation` representing the overlay from the\n * final state of the document, and a `FieldMask` representing the fields that\n * are mutated by the local mutations.\n */\nexport function calculateOverlayMutation(\n  doc: MutableDocument,\n  mask: FieldMask | null\n): Mutation | null {\n  if (!doc.hasLocalMutations || (mask && mask!.fields.length === 0)) {\n    return null;\n  }\n\n  // mask is null when sets or deletes are applied to the current document.\n  if (mask === null) {\n    if (doc.isNoDocument()) {\n      return new DeleteMutation(doc.key, Precondition.none());\n    } else {\n      return new SetMutation(doc.key, doc.data, Precondition.none());\n    }\n  } else {\n    const docValue = doc.data;\n    const patchValue = ObjectValue.empty();\n    let maskSet = new SortedSet<FieldPath>(FieldPath.comparator);\n    for (let path of mask.fields) {\n      if (!maskSet.has(path)) {\n        let value = docValue.field(path);\n        // If we are deleting a nested field, we take the immediate parent as\n        // the mask used to construct the resulting mutation.\n        // Justification: Nested fields can create parent fields implicitly. If\n        // only a leaf entry is deleted in later mutations, the parent field\n        // should still remain, but we may have lost this information.\n        // Consider mutation (foo.bar 1), then mutation (foo.bar delete()).\n        // This leaves the final result (foo, {}). Despite the fact that `doc`\n        // has the correct result, `foo` is not in `mask`, and the resulting\n        // mutation would miss `foo`.\n        if (value === null && path.length > 1) {\n          path = path.popLast();\n          value = docValue.field(path);\n        }\n        if (value === null) {\n          patchValue.delete(path);\n        } else {\n          patchValue.set(path, value);\n        }\n        maskSet = maskSet.add(path);\n      }\n    }\n    return new PatchMutation(\n      doc.key,\n      patchValue,\n      new FieldMask(maskSet.toArray()),\n      Precondition.none()\n    );\n  }\n}\n\n/**\n * Applies this mutation to the given document for the purposes of computing a\n * new remote document. If the input document doesn't match the expected state\n * (e.g. it is invalid or outdated), the document type may transition to\n * unknown.\n *\n * @param mutation - The mutation to apply.\n * @param document - The document to mutate. The input document can be an\n *     invalid document if the client has no knowledge of the pre-mutation state\n *     of the document.\n * @param mutationResult - The result of applying the mutation from the backend.\n */\nexport function mutationApplyToRemoteDocument(\n  mutation: Mutation,\n  document: MutableDocument,\n  mutationResult: MutationResult\n): void {\n  mutationVerifyKeyMatches(mutation, document);\n  if (mutation instanceof SetMutation) {\n    setMutationApplyToRemoteDocument(mutation, document, mutationResult);\n  } else if (mutation instanceof PatchMutation) {\n    patchMutationApplyToRemoteDocument(mutation, document, mutationResult);\n  } else {\n    debugAssert(\n      mutation instanceof DeleteMutation,\n      'Unexpected mutation type: ' + mutation\n    );\n    deleteMutationApplyToRemoteDocument(mutation, document, mutationResult);\n  }\n}\n\n/**\n * Applies this mutation to the given document for the purposes of computing\n * the new local view of a document. If the input document doesn't match the\n * expected state, the document is not modified.\n *\n * @param mutation - The mutation to apply.\n * @param document - The document to mutate. The input document can be an\n *     invalid document if the client has no knowledge of the pre-mutation state\n *     of the document.\n * @param previousMask - The fields that have been updated before applying this mutation.\n * @param localWriteTime - A timestamp indicating the local write time of the\n *     batch this mutation is a part of.\n * @returns A `FieldMask` representing the fields that are changed by applying this mutation.\n */\nexport function mutationApplyToLocalView(\n  mutation: Mutation,\n  document: MutableDocument,\n  previousMask: FieldMask | null,\n  localWriteTime: Timestamp\n): FieldMask | null {\n  mutationVerifyKeyMatches(mutation, document);\n\n  if (mutation instanceof SetMutation) {\n    return setMutationApplyToLocalView(\n      mutation,\n      document,\n      previousMask,\n      localWriteTime\n    );\n  } else if (mutation instanceof PatchMutation) {\n    return patchMutationApplyToLocalView(\n      mutation,\n      document,\n      previousMask,\n      localWriteTime\n    );\n  } else {\n    debugAssert(\n      mutation instanceof DeleteMutation,\n      'Unexpected mutation type: ' + mutation\n    );\n    return deleteMutationApplyToLocalView(mutation, document, previousMask);\n  }\n}\n\n/**\n * If this mutation is not idempotent, returns the base value to persist with\n * this mutation. If a base value is returned, the mutation is always applied\n * to this base value, even if document has already been updated.\n *\n * The base value is a sparse object that consists of only the document\n * fields for which this mutation contains a non-idempotent transformation\n * (e.g. a numeric increment). The provided value guarantees consistent\n * behavior for non-idempotent transforms and allow us to return the same\n * latency-compensated value even if the backend has already applied the\n * mutation. The base value is null for idempotent mutations, as they can be\n * re-played even if the backend has already applied them.\n *\n * @returns a base value to store along with the mutation, or null for\n * idempotent mutations.\n */\nexport function mutationExtractBaseValue(\n  mutation: Mutation,\n  document: Document\n): ObjectValue | null {\n  let baseObject: ObjectValue | null = null;\n  for (const fieldTransform of mutation.fieldTransforms) {\n    const existingValue = document.data.field(fieldTransform.field);\n    const coercedValue = computeTransformOperationBaseValue(\n      fieldTransform.transform,\n      existingValue || null\n    );\n\n    if (coercedValue != null) {\n      if (baseObject === null) {\n        baseObject = ObjectValue.empty();\n      }\n      baseObject.set(fieldTransform.field, coercedValue);\n    }\n  }\n  return baseObject ? baseObject : null;\n}\n\nexport function mutationEquals(left: Mutation, right: Mutation): boolean {\n  if (left.type !== right.type) {\n    return false;\n  }\n\n  if (!left.key.isEqual(right.key)) {\n    return false;\n  }\n\n  if (!left.precondition.isEqual(right.precondition)) {\n    return false;\n  }\n\n  if (!fieldTransformsAreEqual(left.fieldTransforms, right.fieldTransforms)) {\n    return false;\n  }\n\n  if (left.type === MutationType.Set) {\n    return (left as SetMutation).value.isEqual((right as SetMutation).value);\n  }\n\n  if (left.type === MutationType.Patch) {\n    return (\n      (left as PatchMutation).data.isEqual((right as PatchMutation).data) &&\n      (left as PatchMutation).fieldMask.isEqual(\n        (right as PatchMutation).fieldMask\n      )\n    );\n  }\n\n  return true;\n}\n\nfunction mutationVerifyKeyMatches(\n  mutation: Mutation,\n  document: MutableDocument\n): void {\n  debugAssert(\n    document.key.isEqual(mutation.key),\n    'Can only apply a mutation to a document with the same key'\n  );\n}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nexport class SetMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly value: ObjectValue,\n    readonly precondition: Precondition,\n    readonly fieldTransforms: FieldTransform[] = []\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Set;\n\n  getFieldMask(): FieldMask | null {\n    return null;\n  }\n}\n\nfunction setMutationApplyToRemoteDocument(\n  mutation: SetMutation,\n  document: MutableDocument,\n  mutationResult: MutationResult\n): void {\n  // Unlike setMutationApplyToLocalView, if we're applying a mutation to a\n  // remote document the server has accepted the mutation so the precondition\n  // must have held.\n  const newData = mutation.value.clone();\n  const transformResults = serverTransformResults(\n    mutation.fieldTransforms,\n    document,\n    mutationResult.transformResults\n  );\n  newData.setAll(transformResults);\n  document\n    .convertToFoundDocument(mutationResult.version, newData)\n    .setHasCommittedMutations();\n}\n\nfunction setMutationApplyToLocalView(\n  mutation: SetMutation,\n  document: MutableDocument,\n  previousMask: FieldMask | null,\n  localWriteTime: Timestamp\n): FieldMask | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    // The mutation failed to apply (e.g. a document ID created with add()\n    // caused a name collision).\n    return previousMask;\n  }\n\n  const newData = mutation.value.clone();\n  const transformResults = localTransformResults(\n    mutation.fieldTransforms,\n    localWriteTime,\n    document\n  );\n  newData.setAll(transformResults);\n  document\n    .convertToFoundDocument(document.version, newData)\n    .setHasLocalMutations();\n  return null; // SetMutation overwrites all fields.\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nexport class PatchMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly precondition: Precondition,\n    readonly fieldTransforms: FieldTransform[] = []\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Patch;\n\n  getFieldMask(): FieldMask | null {\n    return this.fieldMask;\n  }\n}\n\nfunction patchMutationApplyToRemoteDocument(\n  mutation: PatchMutation,\n  document: MutableDocument,\n  mutationResult: MutationResult\n): void {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    // Since the mutation was not rejected, we know that the precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and convert to an UnknownDocument with a\n    // known updateTime.\n    document.convertToUnknownDocument(mutationResult.version);\n    return;\n  }\n\n  const transformResults = serverTransformResults(\n    mutation.fieldTransforms,\n    document,\n    mutationResult.transformResults\n  );\n  const newData = document.data;\n  newData.setAll(getPatch(mutation));\n  newData.setAll(transformResults);\n  document\n    .convertToFoundDocument(mutationResult.version, newData)\n    .setHasCommittedMutations();\n}\n\nfunction patchMutationApplyToLocalView(\n  mutation: PatchMutation,\n  document: MutableDocument,\n  previousMask: FieldMask | null,\n  localWriteTime: Timestamp\n): FieldMask | null {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    return previousMask;\n  }\n\n  const transformResults = localTransformResults(\n    mutation.fieldTransforms,\n    localWriteTime,\n    document\n  );\n  const newData = document.data;\n  newData.setAll(getPatch(mutation));\n  newData.setAll(transformResults);\n  document\n    .convertToFoundDocument(document.version, newData)\n    .setHasLocalMutations();\n\n  if (previousMask === null) {\n    return null;\n  }\n\n  return previousMask\n    .unionWith(mutation.fieldMask.fields)\n    .unionWith(mutation.fieldTransforms.map(transform => transform.field));\n}\n\n/**\n * Returns a FieldPath/Value map with the content of the PatchMutation.\n */\nfunction getPatch(mutation: PatchMutation): Map<FieldPath, ProtoValue | null> {\n  const result = new Map<FieldPath, ProtoValue | null>();\n  mutation.fieldMask.fields.forEach(fieldPath => {\n    if (!fieldPath.isEmpty()) {\n      const newValue = mutation.data.field(fieldPath);\n      result.set(fieldPath, newValue);\n    }\n  });\n  return result;\n}\n\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use after a mutation\n * containing transforms has been acknowledged by the server.\n *\n * @param fieldTransforms - The field transforms to apply the result to.\n * @param mutableDocument - The current state of the document after applying all\n * previous mutations.\n * @param serverTransformResults - The transform results received by the server.\n * @returns The transform results list.\n */\nfunction serverTransformResults(\n  fieldTransforms: FieldTransform[],\n  mutableDocument: MutableDocument,\n  serverTransformResults: Array<ProtoValue | null>\n): Map<FieldPath, ProtoValue> {\n  const transformResults = new Map<FieldPath, ProtoValue>();\n  hardAssert(\n    fieldTransforms.length === serverTransformResults.length,\n    `server transform result count (${serverTransformResults.length}) ` +\n      `should match field transform count (${fieldTransforms.length})`\n  );\n\n  for (let i = 0; i < serverTransformResults.length; i++) {\n    const fieldTransform = fieldTransforms[i];\n    const transform = fieldTransform.transform;\n    const previousValue = mutableDocument.data.field(fieldTransform.field);\n    transformResults.set(\n      fieldTransform.field,\n      applyTransformOperationToRemoteDocument(\n        transform,\n        previousValue,\n        serverTransformResults[i]\n      )\n    );\n  }\n  return transformResults;\n}\n\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use when applying a\n * transform locally.\n *\n * @param fieldTransforms - The field transforms to apply the result to.\n * @param localWriteTime - The local time of the mutation (used to\n *     generate ServerTimestampValues).\n * @param mutableDocument - The document to apply transforms on.\n * @returns The transform results list.\n */\nfunction localTransformResults(\n  fieldTransforms: FieldTransform[],\n  localWriteTime: Timestamp,\n  mutableDocument: MutableDocument\n): Map<FieldPath, ProtoValue> {\n  const transformResults = new Map<FieldPath, ProtoValue>();\n  for (const fieldTransform of fieldTransforms) {\n    const transform = fieldTransform.transform;\n\n    const previousValue = mutableDocument.data.field(fieldTransform.field);\n    transformResults.set(\n      fieldTransform.field,\n      applyTransformOperationToLocalView(\n        transform,\n        previousValue,\n        localWriteTime\n      )\n    );\n  }\n  return transformResults;\n}\n\n/** A mutation that deletes the document at the given key. */\nexport class DeleteMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Delete;\n  readonly fieldTransforms: FieldTransform[] = [];\n\n  getFieldMask(): FieldMask | null {\n    return null;\n  }\n}\n\nfunction deleteMutationApplyToRemoteDocument(\n  mutation: DeleteMutation,\n  document: MutableDocument,\n  mutationResult: MutationResult\n): void {\n  debugAssert(\n    mutationResult.transformResults.length === 0,\n    'Transform results received by DeleteMutation.'\n  );\n\n  // Unlike applyToLocalView, if we're applying a mutation to a remote\n  // document the server has accepted the mutation so the precondition must\n  // have held.\n  document\n    .convertToNoDocument(mutationResult.version)\n    .setHasCommittedMutations();\n}\n\nfunction deleteMutationApplyToLocalView(\n  mutation: DeleteMutation,\n  document: MutableDocument,\n  previousMask: FieldMask | null\n): FieldMask | null {\n  debugAssert(\n    document.key.isEqual(mutation.key),\n    'Can only apply mutation to document with same key'\n  );\n  if (preconditionIsValidForDocument(mutation.precondition, document)) {\n    document.convertToNoDocument(document.version).setHasLocalMutations();\n    return null;\n  }\n  return previousMask;\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nexport class VerifyMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Verify;\n  readonly fieldTransforms: FieldTransform[] = [];\n\n  getFieldMask(): FieldMask | null {\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Aggregate } from '../core/aggregate';\nimport { Bound } from '../core/bound';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  CompositeFilter,\n  compositeFilterIsFlatConjunction,\n  CompositeOperator,\n  FieldFilter,\n  Filter,\n  Operator\n} from '../core/filter';\nimport { Direction, OrderBy } from '../core/order_by';\nimport {\n  LimitType,\n  newQuery,\n  newQueryForPath,\n  Query,\n  queryToTarget\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { targetIsDocumentTarget, Target } from '../core/target';\nimport { TargetId } from '../core/types';\nimport { Timestamp } from '../lite-api/timestamp';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { MutableDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { FieldMask } from '../model/field_mask';\nimport {\n  DeleteMutation,\n  FieldTransform,\n  Mutation,\n  MutationResult,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  VerifyMutation\n} from '../model/mutation';\nimport { normalizeTimestamp } from '../model/normalize';\nimport { ObjectValue } from '../model/object_value';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform,\n  TransformOperation\n} from '../model/transform_operation';\nimport { isNanValue, isNullValue } from '../model/values';\nimport {\n  ApiClientObjectMap as ProtoApiClientObjectMap,\n  BatchGetDocumentsResponse as ProtoBatchGetDocumentsResponse,\n  CompositeFilterOp as ProtoCompositeFilterOp,\n  Cursor as ProtoCursor,\n  Document as ProtoDocument,\n  DocumentMask as ProtoDocumentMask,\n  DocumentsTarget as ProtoDocumentsTarget,\n  FieldFilterOp as ProtoFieldFilterOp,\n  FieldReference as ProtoFieldReference,\n  FieldTransform as ProtoFieldTransform,\n  Filter as ProtoFilter,\n  ListenResponse as ProtoListenResponse,\n  Order as ProtoOrder,\n  OrderDirection as ProtoOrderDirection,\n  Precondition as ProtoPrecondition,\n  QueryTarget as ProtoQueryTarget,\n  RunAggregationQueryRequest as ProtoRunAggregationQueryRequest,\n  Aggregation as ProtoAggregation,\n  Status as ProtoStatus,\n  Target as ProtoTarget,\n  TargetChangeTargetChangeType as ProtoTargetChangeTargetChangeType,\n  Timestamp as ProtoTimestamp,\n  Write as ProtoWrite,\n  WriteResult as ProtoWriteResult\n} from '../protos/firestore_proto_api';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { ByteString } from '../util/byte_string';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\n\nimport { ExistenceFilter } from './existence_filter';\nimport { Serializer } from './number_serializer';\nimport { mapCodeFromRpcCode } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\n\nconst DIRECTIONS = (() => {\n  const dirs: { [dir: string]: ProtoOrderDirection } = {};\n  dirs[Direction.ASCENDING] = 'ASCENDING';\n  dirs[Direction.DESCENDING] = 'DESCENDING';\n  return dirs;\n})();\n\nconst OPERATORS = (() => {\n  const ops: { [op: string]: ProtoFieldFilterOp } = {};\n  ops[Operator.LESS_THAN] = 'LESS_THAN';\n  ops[Operator.LESS_THAN_OR_EQUAL] = 'LESS_THAN_OR_EQUAL';\n  ops[Operator.GREATER_THAN] = 'GREATER_THAN';\n  ops[Operator.GREATER_THAN_OR_EQUAL] = 'GREATER_THAN_OR_EQUAL';\n  ops[Operator.EQUAL] = 'EQUAL';\n  ops[Operator.NOT_EQUAL] = 'NOT_EQUAL';\n  ops[Operator.ARRAY_CONTAINS] = 'ARRAY_CONTAINS';\n  ops[Operator.IN] = 'IN';\n  ops[Operator.NOT_IN] = 'NOT_IN';\n  ops[Operator.ARRAY_CONTAINS_ANY] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\n\nconst COMPOSITE_OPERATORS = (() => {\n  const ops: { [op: string]: ProtoCompositeFilterOp } = {};\n  ops[CompositeOperator.AND] = 'AND';\n  ops[CompositeOperator.OR] = 'OR';\n  return ops;\n})();\n\nfunction assertPresent(value: unknown, description: string): asserts value {\n  debugAssert(!isNullOrUndefined(value), description + ' is missing');\n}\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nexport class JsonProtoSerializer implements Serializer {\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly useProto3Json: boolean\n  ) {}\n}\n\nfunction fromRpcStatus(status: ProtoStatus): FirestoreError {\n  const code =\n    status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\n  return new FirestoreError(code, status.message || '');\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\nfunction toInt32Proto(\n  serializer: JsonProtoSerializer,\n  val: number | null\n): number | { value: number } | null {\n  if (serializer.useProto3Json || isNullOrUndefined(val)) {\n    return val;\n  } else {\n    return { value: val };\n  }\n}\n\n/**\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\n */\nfunction fromInt32Proto(\n  val: number | { value: number } | undefined\n): number | null {\n  let result;\n  if (typeof val === 'object') {\n    result = val.value;\n  } else {\n    result = val;\n  }\n  return isNullOrUndefined(result) ? null : result;\n}\n\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nexport function toTimestamp(\n  serializer: JsonProtoSerializer,\n  timestamp: Timestamp\n): ProtoTimestamp {\n  if (serializer.useProto3Json) {\n    // Serialize to ISO-8601 date format, but with full nano resolution.\n    // Since JS Date has only millis, let's only use it for the seconds and\n    // then manually add the fractions to the end.\n    const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n    // Remove .xxx frac part and Z in the end.\n    const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n    // Pad the fraction out to 9 digits (nanos).\n    const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n\n    return `${strUntilSeconds}.${nanoStr}Z`;\n  } else {\n    return {\n      seconds: '' + timestamp.seconds,\n      nanos: timestamp.nanoseconds\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  }\n}\n\nfunction fromTimestamp(date: ProtoTimestamp): Timestamp {\n  const timestamp = normalizeTimestamp(date);\n  return new Timestamp(timestamp.seconds, timestamp.nanos);\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nexport function toBytes(\n  serializer: JsonProtoSerializer,\n  bytes: ByteString\n): string | Uint8Array {\n  if (serializer.useProto3Json) {\n    return bytes.toBase64();\n  } else {\n    return bytes.toUint8Array();\n  }\n}\n\n/**\n * Returns a ByteString based on the proto string value.\n */\nexport function fromBytes(\n  serializer: JsonProtoSerializer,\n  value: string | Uint8Array | undefined\n): ByteString {\n  if (serializer.useProto3Json) {\n    hardAssert(\n      value === undefined || typeof value === 'string',\n      'value must be undefined or a string when using proto3 Json'\n    );\n    return ByteString.fromBase64String(value ? value : '');\n  } else {\n    hardAssert(\n      value === undefined || value instanceof Uint8Array,\n      'value must be undefined or Uint8Array'\n    );\n    return ByteString.fromUint8Array(value ? value : new Uint8Array());\n  }\n}\n\nexport function toVersion(\n  serializer: JsonProtoSerializer,\n  version: SnapshotVersion\n): ProtoTimestamp {\n  return toTimestamp(serializer, version.toTimestamp());\n}\n\nexport function fromVersion(version: ProtoTimestamp): SnapshotVersion {\n  hardAssert(!!version, \"Trying to deserialize version that isn't set\");\n  return SnapshotVersion.fromTimestamp(fromTimestamp(version));\n}\n\nexport function toResourceName(\n  databaseId: DatabaseId,\n  path: ResourcePath\n): string {\n  return fullyQualifiedPrefixPath(databaseId)\n    .child('documents')\n    .child(path)\n    .canonicalString();\n}\n\nfunction fromResourceName(name: string): ResourcePath {\n  const resource = ResourcePath.fromString(name);\n  hardAssert(\n    isValidResourceName(resource),\n    'Tried to deserialize invalid key ' + resource.toString()\n  );\n  return resource;\n}\n\nexport function toName(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey\n): string {\n  return toResourceName(serializer.databaseId, key.path);\n}\n\nexport function fromName(\n  serializer: JsonProtoSerializer,\n  name: string\n): DocumentKey {\n  const resource = fromResourceName(name);\n\n  if (resource.get(1) !== serializer.databaseId.projectId) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Tried to deserialize key from different project: ' +\n        resource.get(1) +\n        ' vs ' +\n        serializer.databaseId.projectId\n    );\n  }\n\n  if (resource.get(3) !== serializer.databaseId.database) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Tried to deserialize key from different database: ' +\n        resource.get(3) +\n        ' vs ' +\n        serializer.databaseId.database\n    );\n  }\n  return new DocumentKey(extractLocalPathFromResourceName(resource));\n}\n\nfunction toQueryPath(\n  serializer: JsonProtoSerializer,\n  path: ResourcePath\n): string {\n  return toResourceName(serializer.databaseId, path);\n}\n\nfunction fromQueryPath(name: string): ResourcePath {\n  const resourceName = fromResourceName(name);\n  // In v1beta1 queries for collections at the root did not have a trailing\n  // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n  // ability to read the v1beta1 form for compatibility with queries persisted\n  // in the local target cache.\n  if (resourceName.length === 4) {\n    return ResourcePath.emptyPath();\n  }\n  return extractLocalPathFromResourceName(resourceName);\n}\n\nexport function getEncodedDatabaseId(serializer: JsonProtoSerializer): string {\n  const path = new ResourcePath([\n    'projects',\n    serializer.databaseId.projectId,\n    'databases',\n    serializer.databaseId.database\n  ]);\n  return path.canonicalString();\n}\n\nfunction fullyQualifiedPrefixPath(databaseId: DatabaseId): ResourcePath {\n  return new ResourcePath([\n    'projects',\n    databaseId.projectId,\n    'databases',\n    databaseId.database\n  ]);\n}\n\nfunction extractLocalPathFromResourceName(\n  resourceName: ResourcePath\n): ResourcePath {\n  hardAssert(\n    resourceName.length > 4 && resourceName.get(4) === 'documents',\n    'tried to deserialize invalid key ' + resourceName.toString()\n  );\n  return resourceName.popFirst(5);\n}\n\n/** Creates a Document proto from key and fields (but no create/update time) */\nexport function toMutationDocument(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey,\n  fields: ObjectValue\n): ProtoDocument {\n  return {\n    name: toName(serializer, key),\n    fields: fields.value.mapValue.fields\n  };\n}\n\nexport function toDocument(\n  serializer: JsonProtoSerializer,\n  document: MutableDocument\n): ProtoDocument {\n  debugAssert(\n    !document.hasLocalMutations,\n    \"Can't serialize documents with mutations.\"\n  );\n  return {\n    name: toName(serializer, document.key),\n    fields: document.data.value.mapValue.fields,\n    updateTime: toTimestamp(serializer, document.version.toTimestamp()),\n    createTime: toTimestamp(serializer, document.createTime.toTimestamp())\n  };\n}\n\nexport function fromDocument(\n  serializer: JsonProtoSerializer,\n  document: ProtoDocument,\n  hasCommittedMutations?: boolean\n): MutableDocument {\n  const key = fromName(serializer, document.name!);\n  const version = fromVersion(document.updateTime!);\n  // If we read a document from persistence that is missing createTime, it's due\n  // to older SDK versions not storing this information. In such cases, we'll\n  // set the createTime to zero. This can be removed in the long term.\n  const createTime = document.createTime\n    ? fromVersion(document.createTime)\n    : SnapshotVersion.min();\n  const data = new ObjectValue({ mapValue: { fields: document.fields } });\n  const result = MutableDocument.newFoundDocument(\n    key,\n    version,\n    createTime,\n    data\n  );\n  if (hasCommittedMutations) {\n    result.setHasCommittedMutations();\n  }\n  return hasCommittedMutations ? result.setHasCommittedMutations() : result;\n}\n\nfunction fromFound(\n  serializer: JsonProtoSerializer,\n  doc: ProtoBatchGetDocumentsResponse\n): MutableDocument {\n  hardAssert(\n    !!doc.found,\n    'Tried to deserialize a found document from a missing document.'\n  );\n  assertPresent(doc.found.name, 'doc.found.name');\n  assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n  const key = fromName(serializer, doc.found.name);\n  const version = fromVersion(doc.found.updateTime);\n  const createTime = doc.found.createTime\n    ? fromVersion(doc.found.createTime)\n    : SnapshotVersion.min();\n  const data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\n  return MutableDocument.newFoundDocument(key, version, createTime, data);\n}\n\nfunction fromMissing(\n  serializer: JsonProtoSerializer,\n  result: ProtoBatchGetDocumentsResponse\n): MutableDocument {\n  hardAssert(\n    !!result.missing,\n    'Tried to deserialize a missing document from a found document.'\n  );\n  hardAssert(\n    !!result.readTime,\n    'Tried to deserialize a missing document without a read time.'\n  );\n  const key = fromName(serializer, result.missing);\n  const version = fromVersion(result.readTime);\n  return MutableDocument.newNoDocument(key, version);\n}\n\nexport function fromBatchGetDocumentsResponse(\n  serializer: JsonProtoSerializer,\n  result: ProtoBatchGetDocumentsResponse\n): MutableDocument {\n  if ('found' in result) {\n    return fromFound(serializer, result);\n  } else if ('missing' in result) {\n    return fromMissing(serializer, result);\n  }\n  return fail('invalid batch get response: ' + JSON.stringify(result));\n}\n\nexport function fromWatchChange(\n  serializer: JsonProtoSerializer,\n  change: ProtoListenResponse\n): WatchChange {\n  let watchChange: WatchChange;\n  if ('targetChange' in change) {\n    assertPresent(change.targetChange, 'targetChange');\n    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n    // if unset\n    const state = fromWatchTargetChangeState(\n      change.targetChange.targetChangeType || 'NO_CHANGE'\n    );\n    const targetIds: TargetId[] = change.targetChange.targetIds || [];\n\n    const resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\n    const causeProto = change.targetChange!.cause;\n    const cause = causeProto && fromRpcStatus(causeProto);\n    watchChange = new WatchTargetChange(\n      state,\n      targetIds,\n      resumeToken,\n      cause || null\n    );\n  } else if ('documentChange' in change) {\n    assertPresent(change.documentChange, 'documentChange');\n    const entityChange = change.documentChange;\n    assertPresent(entityChange.document, 'documentChange.name');\n    assertPresent(entityChange.document.name, 'documentChange.document.name');\n    assertPresent(\n      entityChange.document.updateTime,\n      'documentChange.document.updateTime'\n    );\n    const key = fromName(serializer, entityChange.document.name);\n    const version = fromVersion(entityChange.document.updateTime);\n    const createTime = entityChange.document.createTime\n      ? fromVersion(entityChange.document.createTime)\n      : SnapshotVersion.min();\n    const data = new ObjectValue({\n      mapValue: { fields: entityChange.document.fields }\n    });\n    const doc = MutableDocument.newFoundDocument(\n      key,\n      version,\n      createTime,\n      data\n    );\n    const updatedTargetIds = entityChange.targetIds || [];\n    const removedTargetIds = entityChange.removedTargetIds || [];\n    watchChange = new DocumentWatchChange(\n      updatedTargetIds,\n      removedTargetIds,\n      doc.key,\n      doc\n    );\n  } else if ('documentDelete' in change) {\n    assertPresent(change.documentDelete, 'documentDelete');\n    const docDelete = change.documentDelete;\n    assertPresent(docDelete.document, 'documentDelete.document');\n    const key = fromName(serializer, docDelete.document);\n    const version = docDelete.readTime\n      ? fromVersion(docDelete.readTime)\n      : SnapshotVersion.min();\n    const doc = MutableDocument.newNoDocument(key, version);\n    const removedTargetIds = docDelete.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n  } else if ('documentRemove' in change) {\n    assertPresent(change.documentRemove, 'documentRemove');\n    const docRemove = change.documentRemove;\n    assertPresent(docRemove.document, 'documentRemove');\n    const key = fromName(serializer, docRemove.document);\n    const removedTargetIds = docRemove.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n  } else if ('filter' in change) {\n    // TODO(dimond): implement existence filter parsing with strategy.\n    assertPresent(change.filter, 'filter');\n    const filter = change.filter;\n    assertPresent(filter.targetId, 'filter.targetId');\n    const { count = 0, unchangedNames } = filter;\n    const existenceFilter = new ExistenceFilter(count, unchangedNames);\n    const targetId = filter.targetId;\n    watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n  } else {\n    return fail('Unknown change type ' + JSON.stringify(change));\n  }\n  return watchChange;\n}\n\nfunction fromWatchTargetChangeState(\n  state: ProtoTargetChangeTargetChangeType\n): WatchTargetChangeState {\n  if (state === 'NO_CHANGE') {\n    return WatchTargetChangeState.NoChange;\n  } else if (state === 'ADD') {\n    return WatchTargetChangeState.Added;\n  } else if (state === 'REMOVE') {\n    return WatchTargetChangeState.Removed;\n  } else if (state === 'CURRENT') {\n    return WatchTargetChangeState.Current;\n  } else if (state === 'RESET') {\n    return WatchTargetChangeState.Reset;\n  } else {\n    return fail('Got unexpected TargetChange.state: ' + state);\n  }\n}\n\nexport function versionFromListenResponse(\n  change: ProtoListenResponse\n): SnapshotVersion {\n  // We have only reached a consistent snapshot for the entire stream if there\n  // is a read_time set and it applies to all targets (i.e. the list of\n  // targets is empty). The backend is guaranteed to send such responses.\n  if (!('targetChange' in change)) {\n    return SnapshotVersion.min();\n  }\n  const targetChange = change.targetChange!;\n  if (targetChange.targetIds && targetChange.targetIds.length) {\n    return SnapshotVersion.min();\n  }\n  if (!targetChange.readTime) {\n    return SnapshotVersion.min();\n  }\n  return fromVersion(targetChange.readTime);\n}\n\nexport function toMutation(\n  serializer: JsonProtoSerializer,\n  mutation: Mutation\n): ProtoWrite {\n  let result: ProtoWrite;\n  if (mutation instanceof SetMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.value)\n    };\n  } else if (mutation instanceof DeleteMutation) {\n    result = { delete: toName(serializer, mutation.key) };\n  } else if (mutation instanceof PatchMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.data),\n      updateMask: toDocumentMask(mutation.fieldMask)\n    };\n  } else if (mutation instanceof VerifyMutation) {\n    result = {\n      verify: toName(serializer, mutation.key)\n    };\n  } else {\n    return fail('Unknown mutation type ' + mutation.type);\n  }\n\n  if (mutation.fieldTransforms.length > 0) {\n    result.updateTransforms = mutation.fieldTransforms.map(transform =>\n      toFieldTransform(serializer, transform)\n    );\n  }\n\n  if (!mutation.precondition.isNone) {\n    result.currentDocument = toPrecondition(serializer, mutation.precondition);\n  }\n\n  return result;\n}\n\nexport function fromMutation(\n  serializer: JsonProtoSerializer,\n  proto: ProtoWrite\n): Mutation {\n  const precondition = proto.currentDocument\n    ? fromPrecondition(proto.currentDocument)\n    : Precondition.none();\n\n  const fieldTransforms = proto.updateTransforms\n    ? proto.updateTransforms.map(transform =>\n        fromFieldTransform(serializer, transform)\n      )\n    : [];\n\n  if (proto.update) {\n    assertPresent(proto.update.name, 'name');\n    const key = fromName(serializer, proto.update.name);\n    const value = new ObjectValue({\n      mapValue: { fields: proto.update.fields }\n    });\n\n    if (proto.updateMask) {\n      const fieldMask = fromDocumentMask(proto.updateMask);\n      return new PatchMutation(\n        key,\n        value,\n        fieldMask,\n        precondition,\n        fieldTransforms\n      );\n    } else {\n      return new SetMutation(key, value, precondition, fieldTransforms);\n    }\n  } else if (proto.delete) {\n    const key = fromName(serializer, proto.delete);\n    return new DeleteMutation(key, precondition);\n  } else if (proto.verify) {\n    const key = fromName(serializer, proto.verify);\n    return new VerifyMutation(key, precondition);\n  } else {\n    return fail('unknown mutation proto: ' + JSON.stringify(proto));\n  }\n}\n\nfunction toPrecondition(\n  serializer: JsonProtoSerializer,\n  precondition: Precondition\n): ProtoPrecondition {\n  debugAssert(!precondition.isNone, \"Can't serialize an empty precondition\");\n  if (precondition.updateTime !== undefined) {\n    return {\n      updateTime: toVersion(serializer, precondition.updateTime)\n    };\n  } else if (precondition.exists !== undefined) {\n    return { exists: precondition.exists };\n  } else {\n    return fail('Unknown precondition');\n  }\n}\n\nfunction fromPrecondition(precondition: ProtoPrecondition): Precondition {\n  if (precondition.updateTime !== undefined) {\n    return Precondition.updateTime(fromVersion(precondition.updateTime));\n  } else if (precondition.exists !== undefined) {\n    return Precondition.exists(precondition.exists);\n  } else {\n    return Precondition.none();\n  }\n}\n\nfunction fromWriteResult(\n  proto: ProtoWriteResult,\n  commitTime: ProtoTimestamp\n): MutationResult {\n  // NOTE: Deletes don't have an updateTime.\n  let version = proto.updateTime\n    ? fromVersion(proto.updateTime)\n    : fromVersion(commitTime);\n\n  if (version.isEqual(SnapshotVersion.min())) {\n    // The Firestore Emulator currently returns an update time of 0 for\n    // deletes of non-existing documents (rather than null). This breaks the\n    // test \"get deleted doc while offline with source=cache\" as NoDocuments\n    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n    // TODO(#2149): Remove this when Emulator is fixed\n    version = fromVersion(commitTime);\n  }\n\n  return new MutationResult(version, proto.transformResults || []);\n}\n\nexport function fromWriteResults(\n  protos: ProtoWriteResult[] | undefined,\n  commitTime?: ProtoTimestamp\n): MutationResult[] {\n  if (protos && protos.length > 0) {\n    hardAssert(\n      commitTime !== undefined,\n      'Received a write result without a commit time'\n    );\n    return protos.map(proto => fromWriteResult(proto, commitTime));\n  } else {\n    return [];\n  }\n}\n\nfunction toFieldTransform(\n  serializer: JsonProtoSerializer,\n  fieldTransform: FieldTransform\n): ProtoFieldTransform {\n  const transform = fieldTransform.transform;\n  if (transform instanceof ServerTimestampTransform) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      setToServerValue: 'REQUEST_TIME'\n    };\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      appendMissingElements: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      removeAllFromArray: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof NumericIncrementTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      increment: transform.operand\n    };\n  } else {\n    throw fail('Unknown transform: ' + fieldTransform.transform);\n  }\n}\n\nfunction fromFieldTransform(\n  serializer: JsonProtoSerializer,\n  proto: ProtoFieldTransform\n): FieldTransform {\n  let transform: TransformOperation | null = null;\n  if ('setToServerValue' in proto) {\n    hardAssert(\n      proto.setToServerValue === 'REQUEST_TIME',\n      'Unknown server value transform proto: ' + JSON.stringify(proto)\n    );\n    transform = new ServerTimestampTransform();\n  } else if ('appendMissingElements' in proto) {\n    const values = proto.appendMissingElements!.values || [];\n    transform = new ArrayUnionTransformOperation(values);\n  } else if ('removeAllFromArray' in proto) {\n    const values = proto.removeAllFromArray!.values || [];\n    transform = new ArrayRemoveTransformOperation(values);\n  } else if ('increment' in proto) {\n    transform = new NumericIncrementTransformOperation(\n      serializer,\n      proto.increment!\n    );\n  } else {\n    fail('Unknown transform proto: ' + JSON.stringify(proto));\n  }\n  const fieldPath = FieldPath.fromServerFormat(proto.fieldPath!);\n  return new FieldTransform(fieldPath, transform!);\n}\n\nexport function toDocumentsTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): ProtoDocumentsTarget {\n  return { documents: [toQueryPath(serializer, target.path)] };\n}\n\nexport function fromDocumentsTarget(\n  documentsTarget: ProtoDocumentsTarget\n): Target {\n  const count = documentsTarget.documents!.length;\n  hardAssert(\n    count === 1,\n    'DocumentsTarget contained other than 1 document: ' + count\n  );\n  const name = documentsTarget.documents![0];\n  return queryToTarget(newQueryForPath(fromQueryPath(name)));\n}\n\nexport function toQueryTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): ProtoQueryTarget {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const result: ProtoQueryTarget = { structuredQuery: {} };\n  const path = target.path;\n  if (target.collectionGroup !== null) {\n    debugAssert(\n      path.length % 2 === 0,\n      'Collection Group queries should be within a document path or root.'\n    );\n    result.parent = toQueryPath(serializer, path);\n    result.structuredQuery!.from = [\n      {\n        collectionId: target.collectionGroup,\n        allDescendants: true\n      }\n    ];\n  } else {\n    debugAssert(\n      path.length % 2 !== 0,\n      'Document queries with filters are not supported.'\n    );\n    result.parent = toQueryPath(serializer, path.popLast());\n    result.structuredQuery!.from = [{ collectionId: path.lastSegment() }];\n  }\n\n  const where = toFilters(target.filters);\n  if (where) {\n    result.structuredQuery!.where = where;\n  }\n\n  const orderBy = toOrder(target.orderBy);\n  if (orderBy) {\n    result.structuredQuery!.orderBy = orderBy;\n  }\n\n  const limit = toInt32Proto(serializer, target.limit);\n  if (limit !== null) {\n    result.structuredQuery!.limit = limit;\n  }\n\n  if (target.startAt) {\n    result.structuredQuery!.startAt = toStartAtCursor(target.startAt);\n  }\n  if (target.endAt) {\n    result.structuredQuery!.endAt = toEndAtCursor(target.endAt);\n  }\n\n  return result;\n}\n\nexport function toRunAggregationQueryRequest(\n  serializer: JsonProtoSerializer,\n  target: Target,\n  aggregates: Aggregate[]\n): {\n  request: ProtoRunAggregationQueryRequest;\n  aliasMap: Record<string, string>;\n} {\n  const queryTarget = toQueryTarget(serializer, target);\n  const aliasMap: Record<string, string> = {};\n\n  const aggregations: ProtoAggregation[] = [];\n  let aggregationNum = 0;\n\n  aggregates.forEach(aggregate => {\n    // Map all client-side aliases to a unique short-form\n    // alias. This avoids issues with client-side aliases that\n    // exceed the 1500-byte string size limit.\n    const serverAlias = `aggregate_${aggregationNum++}`;\n    aliasMap[serverAlias] = aggregate.alias;\n\n    if (aggregate.aggregateType === 'count') {\n      aggregations.push({\n        alias: serverAlias,\n        count: {}\n      });\n    } else if (aggregate.aggregateType === 'avg') {\n      aggregations.push({\n        alias: serverAlias,\n        avg: {\n          field: toFieldPathReference(aggregate.fieldPath!)\n        }\n      });\n    } else if (aggregate.aggregateType === 'sum') {\n      aggregations.push({\n        alias: serverAlias,\n        sum: {\n          field: toFieldPathReference(aggregate.fieldPath!)\n        }\n      });\n    }\n  });\n\n  return {\n    request: {\n      structuredAggregationQuery: {\n        aggregations,\n        structuredQuery: queryTarget.structuredQuery\n      },\n      parent: queryTarget.parent\n    },\n    aliasMap\n  };\n}\n\nexport function convertQueryTargetToQuery(target: ProtoQueryTarget): Query {\n  let path = fromQueryPath(target.parent!);\n\n  const query = target.structuredQuery!;\n  const fromCount = query.from ? query.from.length : 0;\n  let collectionGroup: string | null = null;\n  if (fromCount > 0) {\n    hardAssert(\n      fromCount === 1,\n      'StructuredQuery.from with more than one collection is not supported.'\n    );\n    const from = query.from![0];\n    if (from.allDescendants) {\n      collectionGroup = from.collectionId!;\n    } else {\n      path = path.child(from.collectionId!);\n    }\n  }\n\n  let filterBy: Filter[] = [];\n  if (query.where) {\n    filterBy = fromFilters(query.where);\n  }\n\n  let orderBy: OrderBy[] = [];\n  if (query.orderBy) {\n    orderBy = fromOrder(query.orderBy);\n  }\n\n  let limit: number | null = null;\n  if (query.limit) {\n    limit = fromInt32Proto(query.limit);\n  }\n\n  let startAt: Bound | null = null;\n  if (query.startAt) {\n    startAt = fromStartAtCursor(query.startAt);\n  }\n\n  let endAt: Bound | null = null;\n  if (query.endAt) {\n    endAt = fromEndAtCursor(query.endAt);\n  }\n\n  return newQuery(\n    path,\n    collectionGroup,\n    orderBy,\n    filterBy,\n    limit,\n    LimitType.First,\n    startAt,\n    endAt\n  );\n}\n\nexport function fromQueryTarget(target: ProtoQueryTarget): Target {\n  return queryToTarget(convertQueryTargetToQuery(target));\n}\n\nexport function toListenRequestLabels(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): ProtoApiClientObjectMap<string> | null {\n  const value = toLabel(targetData.purpose);\n  if (value == null) {\n    return null;\n  } else {\n    return {\n      'goog-listen-tags': value\n    };\n  }\n}\n\nexport function toLabel(purpose: TargetPurpose): string | null {\n  switch (purpose) {\n    case TargetPurpose.Listen:\n      return null;\n    case TargetPurpose.ExistenceFilterMismatch:\n      return 'existence-filter-mismatch';\n    case TargetPurpose.ExistenceFilterMismatchBloom:\n      return 'existence-filter-mismatch-bloom';\n    case TargetPurpose.LimboResolution:\n      return 'limbo-document';\n    default:\n      return fail('Unrecognized query purpose: ' + purpose);\n  }\n}\n\nexport function toTarget(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): ProtoTarget {\n  let result: ProtoTarget;\n  const target = targetData.target;\n\n  if (targetIsDocumentTarget(target)) {\n    result = { documents: toDocumentsTarget(serializer, target) };\n  } else {\n    result = { query: toQueryTarget(serializer, target) };\n  }\n\n  result.targetId = targetData.targetId;\n\n  if (targetData.resumeToken.approximateByteSize() > 0) {\n    result.resumeToken = toBytes(serializer, targetData.resumeToken);\n    const expectedCount = toInt32Proto(serializer, targetData.expectedCount);\n    if (expectedCount !== null) {\n      result.expectedCount = expectedCount;\n    }\n  } else if (targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\n    // TODO(wuandy): Consider removing above check because it is most likely true.\n    // Right now, many tests depend on this behaviour though (leaving min() out\n    // of serialization).\n    result.readTime = toTimestamp(\n      serializer,\n      targetData.snapshotVersion.toTimestamp()\n    );\n    const expectedCount = toInt32Proto(serializer, targetData.expectedCount);\n    if (expectedCount !== null) {\n      result.expectedCount = expectedCount;\n    }\n  }\n\n  return result;\n}\n\nfunction toFilters(filters: Filter[]): ProtoFilter | undefined {\n  if (filters.length === 0) {\n    return;\n  }\n\n  return toFilter(CompositeFilter.create(filters, CompositeOperator.AND));\n}\n\nfunction fromFilters(filter: ProtoFilter): Filter[] {\n  const result = fromFilter(filter);\n\n  if (\n    result instanceof CompositeFilter &&\n    compositeFilterIsFlatConjunction(result)\n  ) {\n    return result.getFilters();\n  }\n\n  return [result];\n}\n\nfunction fromFilter(filter: ProtoFilter): Filter {\n  if (filter.unaryFilter !== undefined) {\n    return fromUnaryFilter(filter);\n  } else if (filter.fieldFilter !== undefined) {\n    return fromFieldFilter(filter);\n  } else if (filter.compositeFilter !== undefined) {\n    return fromCompositeFilter(filter);\n  } else {\n    return fail('Unknown filter: ' + JSON.stringify(filter));\n  }\n}\n\nfunction toOrder(orderBys: OrderBy[]): ProtoOrder[] | undefined {\n  if (orderBys.length === 0) {\n    return;\n  }\n  return orderBys.map(order => toPropertyOrder(order));\n}\n\nfunction fromOrder(orderBys: ProtoOrder[]): OrderBy[] {\n  return orderBys.map(order => fromPropertyOrder(order));\n}\n\nfunction toStartAtCursor(cursor: Bound): ProtoCursor {\n  return {\n    before: cursor.inclusive,\n    values: cursor.position\n  };\n}\n\nfunction toEndAtCursor(cursor: Bound): ProtoCursor {\n  return {\n    before: !cursor.inclusive,\n    values: cursor.position\n  };\n}\n\nfunction fromStartAtCursor(cursor: ProtoCursor): Bound {\n  const inclusive = !!cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, inclusive);\n}\n\nfunction fromEndAtCursor(cursor: ProtoCursor): Bound {\n  const inclusive = !cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, inclusive);\n}\n\n// visible for testing\nexport function toDirection(dir: Direction): ProtoOrderDirection {\n  return DIRECTIONS[dir];\n}\n\n// visible for testing\nexport function fromDirection(\n  dir: ProtoOrderDirection | undefined\n): Direction | undefined {\n  switch (dir) {\n    case 'ASCENDING':\n      return Direction.ASCENDING;\n    case 'DESCENDING':\n      return Direction.DESCENDING;\n    default:\n      return undefined;\n  }\n}\n\n// visible for testing\nexport function toOperatorName(op: Operator): ProtoFieldFilterOp {\n  return OPERATORS[op];\n}\n\nexport function toCompositeOperatorName(\n  op: CompositeOperator\n): ProtoCompositeFilterOp {\n  return COMPOSITE_OPERATORS[op];\n}\n\nexport function fromOperatorName(op: ProtoFieldFilterOp): Operator {\n  switch (op) {\n    case 'EQUAL':\n      return Operator.EQUAL;\n    case 'NOT_EQUAL':\n      return Operator.NOT_EQUAL;\n    case 'GREATER_THAN':\n      return Operator.GREATER_THAN;\n    case 'GREATER_THAN_OR_EQUAL':\n      return Operator.GREATER_THAN_OR_EQUAL;\n    case 'LESS_THAN':\n      return Operator.LESS_THAN;\n    case 'LESS_THAN_OR_EQUAL':\n      return Operator.LESS_THAN_OR_EQUAL;\n    case 'ARRAY_CONTAINS':\n      return Operator.ARRAY_CONTAINS;\n    case 'IN':\n      return Operator.IN;\n    case 'NOT_IN':\n      return Operator.NOT_IN;\n    case 'ARRAY_CONTAINS_ANY':\n      return Operator.ARRAY_CONTAINS_ANY;\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified operator');\n    default:\n      return fail('Unknown operator');\n  }\n}\n\nexport function fromCompositeOperatorName(\n  op: ProtoCompositeFilterOp\n): CompositeOperator {\n  switch (op) {\n    case 'AND':\n      return CompositeOperator.AND;\n    case 'OR':\n      return CompositeOperator.OR;\n    default:\n      return fail('Unknown operator');\n  }\n}\n\nexport function toFieldPathReference(path: FieldPath): ProtoFieldReference {\n  return { fieldPath: path.canonicalString() };\n}\n\nexport function fromFieldPathReference(\n  fieldReference: ProtoFieldReference\n): FieldPath {\n  return FieldPath.fromServerFormat(fieldReference.fieldPath!);\n}\n\n// visible for testing\nexport function toPropertyOrder(orderBy: OrderBy): ProtoOrder {\n  return {\n    field: toFieldPathReference(orderBy.field),\n    direction: toDirection(orderBy.dir)\n  };\n}\n\nexport function fromPropertyOrder(orderBy: ProtoOrder): OrderBy {\n  return new OrderBy(\n    fromFieldPathReference(orderBy.field!),\n    fromDirection(orderBy.direction)\n  );\n}\n\n// visible for testing\nexport function toFilter(filter: Filter): ProtoFilter {\n  if (filter instanceof FieldFilter) {\n    return toUnaryOrFieldFilter(filter);\n  } else if (filter instanceof CompositeFilter) {\n    return toCompositeFilter(filter);\n  } else {\n    return fail('Unrecognized filter type ' + JSON.stringify(filter));\n  }\n}\n\nexport function toCompositeFilter(filter: CompositeFilter): ProtoFilter {\n  const protos = filter.getFilters().map(filter => toFilter(filter));\n\n  if (protos.length === 1) {\n    return protos[0];\n  }\n\n  return {\n    compositeFilter: {\n      op: toCompositeOperatorName(filter.op),\n      filters: protos\n    }\n  };\n}\n\nexport function toUnaryOrFieldFilter(filter: FieldFilter): ProtoFilter {\n  if (filter.op === Operator.EQUAL) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NULL'\n        }\n      };\n    }\n  } else if (filter.op === Operator.NOT_EQUAL) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NULL'\n        }\n      };\n    }\n  }\n  return {\n    fieldFilter: {\n      field: toFieldPathReference(filter.field),\n      op: toOperatorName(filter.op),\n      value: filter.value\n    }\n  };\n}\n\nexport function fromUnaryFilter(filter: ProtoFilter): Filter {\n  switch (filter.unaryFilter!.op!) {\n    case 'IS_NAN':\n      const nanField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nanField, Operator.EQUAL, {\n        doubleValue: NaN\n      });\n    case 'IS_NULL':\n      const nullField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nullField, Operator.EQUAL, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'IS_NOT_NAN':\n      const notNanField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(notNanField, Operator.NOT_EQUAL, {\n        doubleValue: NaN\n      });\n    case 'IS_NOT_NULL':\n      const notNullField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(notNullField, Operator.NOT_EQUAL, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified filter');\n    default:\n      return fail('Unknown filter');\n  }\n}\n\nexport function fromFieldFilter(filter: ProtoFilter): FieldFilter {\n  return FieldFilter.create(\n    fromFieldPathReference(filter.fieldFilter!.field!),\n    fromOperatorName(filter.fieldFilter!.op!),\n    filter.fieldFilter!.value!\n  );\n}\n\nexport function fromCompositeFilter(filter: ProtoFilter): CompositeFilter {\n  return CompositeFilter.create(\n    filter.compositeFilter!.filters!.map(filter => fromFilter(filter)),\n    fromCompositeOperatorName(filter.compositeFilter!.op!)\n  );\n}\n\nexport function toDocumentMask(fieldMask: FieldMask): ProtoDocumentMask {\n  const canonicalFields: string[] = [];\n  fieldMask.fields.forEach(field =>\n    canonicalFields.push(field.canonicalString())\n  );\n  return {\n    fieldPaths: canonicalFields\n  };\n}\n\nexport function fromDocumentMask(proto: ProtoDocumentMask): FieldMask {\n  const paths = proto.fieldPaths || [];\n  return new FieldMask(paths.map(path => FieldPath.fromServerFormat(path)));\n}\n\nexport function isValidResourceName(path: ResourcePath): boolean {\n  // Resource names have at least 4 components (project ID, database ID)\n  return (\n    path.length >= 4 &&\n    path.get(0) === 'projects' &&\n    path.get(2) === 'databases'\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Return the Platform-specific serializer monitor. */\nimport { DatabaseId } from '../../core/database_info';\nimport { JsonProtoSerializer } from '../../remote/serializer';\n\nexport function newSerializer(databaseId: DatabaseId): JsonProtoSerializer {\n  return new JsonProtoSerializer(databaseId, /* useProto3Json= */ true);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { logDebug } from '../util/log';\n\nconst LOG_TAG = 'ExponentialBackoff';\n\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nexport class ExponentialBackoff {\n  private currentBaseMs: number = 0;\n  private timerPromise: DelayedOperation<void> | null = null;\n  /** The last backoff attempt, as epoch milliseconds. */\n  private lastAttemptTime = Date.now();\n\n  constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    private readonly queue: AsyncQueue,\n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    private readonly timerId: TimerId,\n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    private readonly initialDelayMs: number = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    private readonly backoffFactor: number = DEFAULT_BACKOFF_FACTOR,\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    private readonly maxDelayMs: number = DEFAULT_BACKOFF_MAX_DELAY_MS\n  ) {\n    this.reset();\n  }\n\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset(): void {\n    this.currentBaseMs = 0;\n  }\n\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  resetToMax(): void {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  backoffAndRun(op: () => Promise<void>): void {\n    // Cancel any pending backoff operation.\n    this.cancel();\n\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(\n      this.currentBaseMs + this.jitterDelayMs()\n    );\n\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(\n      0,\n      desiredDelayWithJitterMs - delaySoFarMs\n    );\n\n    if (remainingDelayMs > 0) {\n      logDebug(\n        LOG_TAG,\n        `Backing off for ${remainingDelayMs} ms ` +\n          `(base delay: ${this.currentBaseMs} ms, ` +\n          `delay with jitter: ${desiredDelayWithJitterMs} ms, ` +\n          `last attempt: ${delaySoFarMs} ms ago)`\n      );\n    }\n\n    this.timerPromise = this.queue.enqueueAfterDelay(\n      this.timerId,\n      remainingDelayMs,\n      () => {\n        this.lastAttemptTime = Date.now();\n        return op();\n      }\n    );\n\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n\n  skipBackoff(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.skipDelay();\n      this.timerPromise = null;\n    }\n  }\n\n  cancel(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  private jitterDelayMs(): number {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { User } from '../auth/user';\nimport { Aggregate } from '../core/aggregate';\nimport { queryToAggregateTarget, Query, queryToTarget } from '../core/query';\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport {\n  ApiClientObjectMap,\n  BatchGetDocumentsRequest as ProtoBatchGetDocumentsRequest,\n  BatchGetDocumentsResponse as ProtoBatchGetDocumentsResponse,\n  RunAggregationQueryRequest as ProtoRunAggregationQueryRequest,\n  RunAggregationQueryResponse as ProtoRunAggregationQueryResponse,\n  RunQueryRequest as ProtoRunQueryRequest,\n  RunQueryResponse as ProtoRunQueryResponse,\n  Value\n} from '../protos/firestore_proto_api';\nimport { debugAssert, debugCast, hardAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\n\nimport { Connection } from './connection';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream,\n  WatchStreamListener,\n  WriteStreamListener\n} from './persistent_stream';\nimport {\n  fromDocument,\n  fromBatchGetDocumentsResponse,\n  getEncodedDatabaseId,\n  JsonProtoSerializer,\n  toMutation,\n  toName,\n  toQueryTarget,\n  toRunAggregationQueryRequest\n} from './serializer';\n\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\nexport abstract class Datastore {\n  abstract terminate(): void;\n  abstract serializer: JsonProtoSerializer;\n}\n\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass DatastoreImpl extends Datastore {\n  terminated = false;\n\n  constructor(\n    readonly authCredentials: CredentialsProvider<User>,\n    readonly appCheckCredentials: CredentialsProvider<string>,\n    readonly connection: Connection,\n    readonly serializer: JsonProtoSerializer\n  ) {\n    super();\n  }\n\n  verifyInitialized(): void {\n    debugAssert(!!this.connection, 'Datastore.start() not called');\n    if (this.terminated) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  /** Invokes the provided RPC with auth and AppCheck tokens. */\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    request: Req\n  ): Promise<Resp> {\n    this.verifyInitialized();\n    return Promise.all([\n      this.authCredentials.getToken(),\n      this.appCheckCredentials.getToken()\n    ])\n      .then(([authToken, appCheckToken]) => {\n        return this.connection.invokeRPC<Req, Resp>(\n          rpcName,\n          path,\n          request,\n          authToken,\n          appCheckToken\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.name === 'FirebaseError') {\n          if (error.code === Code.UNAUTHENTICATED) {\n            this.authCredentials.invalidateToken();\n            this.appCheckCredentials.invalidateToken();\n          }\n          throw error;\n        } else {\n          throw new FirestoreError(Code.UNKNOWN, error.toString());\n        }\n      });\n  }\n\n  /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    path: string,\n    request: Req,\n    expectedResponseCount?: number\n  ): Promise<Resp[]> {\n    this.verifyInitialized();\n    return Promise.all([\n      this.authCredentials.getToken(),\n      this.appCheckCredentials.getToken()\n    ])\n      .then(([authToken, appCheckToken]) => {\n        return this.connection.invokeStreamingRPC<Req, Resp>(\n          rpcName,\n          path,\n          request,\n          authToken,\n          appCheckToken,\n          expectedResponseCount\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.name === 'FirebaseError') {\n          if (error.code === Code.UNAUTHENTICATED) {\n            this.authCredentials.invalidateToken();\n            this.appCheckCredentials.invalidateToken();\n          }\n          throw error;\n        } else {\n          throw new FirestoreError(Code.UNKNOWN, error.toString());\n        }\n      });\n  }\n\n  terminate(): void {\n    this.terminated = true;\n  }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nexport function newDatastore(\n  authCredentials: CredentialsProvider<User>,\n  appCheckCredentials: CredentialsProvider<string>,\n  connection: Connection,\n  serializer: JsonProtoSerializer\n): Datastore {\n  return new DatastoreImpl(\n    authCredentials,\n    appCheckCredentials,\n    connection,\n    serializer\n  );\n}\n\nexport async function invokeCommitRpc(\n  datastore: Datastore,\n  mutations: Mutation[]\n): Promise<void> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\n  const request = {\n    writes: mutations.map(m => toMutation(datastoreImpl.serializer, m))\n  };\n  await datastoreImpl.invokeRPC('Commit', path, request);\n}\n\nexport async function invokeBatchGetDocumentsRpc(\n  datastore: Datastore,\n  keys: DocumentKey[]\n): Promise<Document[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\n  const request = {\n    documents: keys.map(k => toName(datastoreImpl.serializer, k))\n  };\n  const response = await datastoreImpl.invokeStreamingRPC<\n    ProtoBatchGetDocumentsRequest,\n    ProtoBatchGetDocumentsResponse\n  >('BatchGetDocuments', path, request, keys.length);\n\n  const docs = new Map<string, Document>();\n  response.forEach(proto => {\n    const doc = fromBatchGetDocumentsResponse(datastoreImpl.serializer, proto);\n    docs.set(doc.key.toString(), doc);\n  });\n  const result: Document[] = [];\n  keys.forEach(key => {\n    const doc = docs.get(key.toString());\n    hardAssert(!!doc, 'Missing entity in write response for ' + key);\n    result.push(doc);\n  });\n  return result;\n}\n\nexport async function invokeRunQueryRpc(\n  datastore: Datastore,\n  query: Query\n): Promise<Document[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const request = toQueryTarget(datastoreImpl.serializer, queryToTarget(query));\n  const response = await datastoreImpl.invokeStreamingRPC<\n    ProtoRunQueryRequest,\n    ProtoRunQueryResponse\n  >('RunQuery', request.parent!, { structuredQuery: request.structuredQuery });\n  return (\n    response\n      // Omit RunQueryResponses that only contain readTimes.\n      .filter(proto => !!proto.document)\n      .map(proto =>\n        fromDocument(datastoreImpl.serializer, proto.document!, undefined)\n      )\n  );\n}\n\nexport async function invokeRunAggregationQueryRpc(\n  datastore: Datastore,\n  query: Query,\n  aggregates: Aggregate[]\n): Promise<ApiClientObjectMap<Value>> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const { request, aliasMap } = toRunAggregationQueryRequest(\n    datastoreImpl.serializer,\n    queryToAggregateTarget(query),\n    aggregates\n  );\n\n  const parent = request.parent;\n  if (!datastoreImpl.connection.shouldResourcePathBeIncludedInRequest) {\n    delete request.parent;\n  }\n  const response = await datastoreImpl.invokeStreamingRPC<\n    ProtoRunAggregationQueryRequest,\n    ProtoRunAggregationQueryResponse\n  >('RunAggregationQuery', parent!, request, /*expectedResponseCount=*/ 1);\n\n  // Omit RunAggregationQueryResponse that only contain readTimes.\n  const filteredResult = response.filter(proto => !!proto.result);\n\n  hardAssert(\n    filteredResult.length === 1,\n    'Aggregation fields are missing from result.'\n  );\n  debugAssert(\n    !isNullOrUndefined(filteredResult[0].result),\n    'aggregationQueryResponse.result'\n  );\n  debugAssert(\n    !isNullOrUndefined(filteredResult[0].result.aggregateFields),\n    'aggregationQueryResponse.result.aggregateFields'\n  );\n\n  // Remap the short-form aliases that were sent to the server\n  // to the client-side aliases. Users will access the results\n  // using the client-side alias.\n  const unmappedAggregateFields = filteredResult[0].result?.aggregateFields;\n  const remappedFields = Object.keys(unmappedAggregateFields).reduce<\n    ApiClientObjectMap<Value>\n  >((accumulator, key) => {\n    debugAssert(\n      !isNullOrUndefined(aliasMap[key]),\n      `'${key}' not present in aliasMap result`\n    );\n    accumulator[aliasMap[key]] = unmappedAggregateFields[key]!;\n    return accumulator;\n  }, {});\n\n  return remappedFields;\n}\n\nexport function newPersistentWriteStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WriteStreamListener\n): PersistentWriteStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.verifyInitialized();\n  return new PersistentWriteStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.authCredentials,\n    datastoreImpl.appCheckCredentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n\nexport function newPersistentWatchStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WatchStreamListener\n): PersistentListenStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.verifyInitialized();\n  return new PersistentListenStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.authCredentials,\n    datastoreImpl.appCheckCredentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _FirebaseService } from '@firebase/app';\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { cloneLongPollingOptions } from '../api/long_polling_options';\nimport { User } from '../auth/user';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { newConnection } from '../platform/connection';\nimport { newSerializer } from '../platform/serializer';\nimport { Datastore, newDatastore } from '../remote/datastore';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\n\nimport { FirestoreSettingsImpl } from './settings';\n\nexport const LOG_TAG = 'ComponentProvider';\n\n// The components module manages the lifetime of dependencies of the Firestore\n// client. Dependencies can be lazily constructed and only one exists per\n// Firestore instance.\n\n/**\n * An interface implemented by FirebaseFirestore that provides compatibility\n * with the usage in this file.\n *\n * This interface mainly exists to remove a cyclic dependency.\n */\nexport interface FirestoreService extends _FirebaseService {\n  _authCredentials: CredentialsProvider<User>;\n  _appCheckCredentials: CredentialsProvider<string>;\n  _persistenceKey: string;\n  _databaseId: DatabaseId;\n  _terminated: boolean;\n\n  _freezeSettings(): FirestoreSettingsImpl;\n}\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\nconst datastoreInstances = new Map<FirestoreService, Datastore>();\n\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nexport function getDatastore(firestore: FirestoreService): Datastore {\n  if (firestore._terminated) {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      'The client has already been terminated.'\n    );\n  }\n  if (!datastoreInstances.has(firestore)) {\n    logDebug(LOG_TAG, 'Initializing Datastore');\n    const databaseInfo = makeDatabaseInfo(\n      firestore._databaseId,\n      firestore.app.options.appId || '',\n      firestore._persistenceKey,\n      firestore._freezeSettings()\n    );\n    const connection = newConnection(databaseInfo);\n    const serializer = newSerializer(firestore._databaseId);\n    const datastore = newDatastore(\n      firestore._authCredentials,\n      firestore._appCheckCredentials,\n      connection,\n      serializer\n    );\n\n    datastoreInstances.set(firestore, datastore);\n  }\n  return datastoreInstances.get(firestore)!;\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\nexport function removeComponents(firestore: FirestoreService): void {\n  const datastore = datastoreInstances.get(firestore);\n  if (datastore) {\n    logDebug(LOG_TAG, 'Removing Datastore');\n    datastoreInstances.delete(firestore);\n    datastore.terminate();\n  }\n}\n\nexport function makeDatabaseInfo(\n  databaseId: DatabaseId,\n  appId: string,\n  persistenceKey: string,\n  settings: FirestoreSettingsImpl\n): DatabaseInfo {\n  return new DatabaseInfo(\n    databaseId,\n    appId,\n    persistenceKey,\n    settings.host,\n    settings.ssl,\n    settings.experimentalForceLongPolling,\n    settings.experimentalAutoDetectLongPolling,\n    cloneLongPollingOptions(settings.experimentalLongPollingOptions),\n    settings.useFetchStreams\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseInfo } from '../../core/database_info';\nimport { Connection } from '../../remote/connection';\n\nimport { FetchConnection } from './fetch_connection';\n\nexport { newConnectivityMonitor } from '../browser/connection';\n\n/** Initializes the HTTP connection for the REST API. */\nexport function newConnection(databaseInfo: DatabaseInfo): Connection {\n  return new FetchConnection(databaseInfo, fetch.bind(null));\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirestoreLocalCache } from '../api/cache_config';\nimport { CredentialsSettings } from '../api/credentials';\nimport {\n  ExperimentalLongPollingOptions,\n  cloneLongPollingOptions,\n  longPollingOptionsEqual\n} from '../api/long_polling_options';\nimport {\n  LRU_COLLECTION_DISABLED,\n  LRU_DEFAULT_CACHE_SIZE_BYTES\n} from '../local/lru_garbage_collector';\nimport { LRU_MINIMUM_CACHE_SIZE_BYTES } from '../local/lru_garbage_collector_impl';\nimport { Code, FirestoreError } from '../util/error';\nimport { validateIsNotUsedTogether } from '../util/input_validation';\n\n// settings() defaults:\nexport const DEFAULT_HOST = 'firestore.googleapis.com';\nexport const DEFAULT_SSL = true;\n\n// The minimum long-polling timeout is hardcoded on the server. The value here\n// should be kept in sync with the value used by the server, as the server will\n// silently ignore a value below the minimum and fall back to the default.\n// Googlers see b/266868871 for relevant discussion.\nconst MIN_LONG_POLLING_TIMEOUT_SECONDS = 5;\n\n// No maximum long-polling timeout is configured in the server, and defaults to\n// 30 seconds, which is what Watch appears to use.\n// Googlers see b/266868871 for relevant discussion.\nconst MAX_LONG_POLLING_TIMEOUT_SECONDS = 30;\n\n// Whether long-polling auto-detected is enabled by default.\nconst DEFAULT_AUTO_DETECT_LONG_POLLING = true;\n\n/**\n * Specifies custom configurations for your Cloud Firestore instance.\n * You must set these before invoking any other methods.\n */\nexport interface FirestoreSettings {\n  /** The hostname to connect to. */\n  host?: string;\n\n  /** Whether to use SSL when connecting. */\n  ssl?: boolean;\n\n  /**\n   * Whether to skip nested properties that are set to `undefined` during\n   * object serialization. If set to `true`, these properties are skipped\n   * and not written to Firestore. If set to `false` or omitted, the SDK\n   * throws an exception when it encounters properties of type `undefined`.\n   */\n  ignoreUndefinedProperties?: boolean;\n}\n\n/**\n * @internal\n * Undocumented, private additional settings not exposed in our public API.\n */\nexport interface PrivateSettings extends FirestoreSettings {\n  // Can be a google-auth-library or gapi client.\n  credentials?: CredentialsSettings;\n  cacheSizeBytes?: number;\n  experimentalForceLongPolling?: boolean;\n  experimentalAutoDetectLongPolling?: boolean;\n  experimentalLongPollingOptions?: ExperimentalLongPollingOptions;\n  useFetchStreams?: boolean;\n\n  localCache?: FirestoreLocalCache;\n}\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nexport class FirestoreSettingsImpl {\n  /** The hostname to connect to. */\n  readonly host: string;\n\n  /** Whether to use SSL when connecting. */\n  readonly ssl: boolean;\n\n  readonly cacheSizeBytes: number;\n\n  readonly experimentalForceLongPolling: boolean;\n\n  readonly experimentalAutoDetectLongPolling: boolean;\n\n  readonly experimentalLongPollingOptions: ExperimentalLongPollingOptions;\n\n  readonly ignoreUndefinedProperties: boolean;\n\n  readonly useFetchStreams: boolean;\n  readonly localCache?: FirestoreLocalCache;\n\n  // Can be a google-auth-library or gapi client.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  credentials?: any;\n\n  constructor(settings: PrivateSettings) {\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't provide ssl option if host option is not set\"\n        );\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      this.host = settings.host;\n      this.ssl = settings.ssl ?? DEFAULT_SSL;\n    }\n\n    this.credentials = settings.credentials;\n    this.ignoreUndefinedProperties = !!settings.ignoreUndefinedProperties;\n    this.localCache = settings.localCache;\n\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LRU_DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (\n        settings.cacheSizeBytes !== LRU_COLLECTION_DISABLED &&\n        settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `cacheSizeBytes must be at least ${LRU_MINIMUM_CACHE_SIZE_BYTES}`\n        );\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n\n    validateIsNotUsedTogether(\n      'experimentalForceLongPolling',\n      settings.experimentalForceLongPolling,\n      'experimentalAutoDetectLongPolling',\n      settings.experimentalAutoDetectLongPolling\n    );\n\n    this.experimentalForceLongPolling = !!settings.experimentalForceLongPolling;\n\n    if (this.experimentalForceLongPolling) {\n      this.experimentalAutoDetectLongPolling = false;\n    } else if (settings.experimentalAutoDetectLongPolling === undefined) {\n      this.experimentalAutoDetectLongPolling = DEFAULT_AUTO_DETECT_LONG_POLLING;\n    } else {\n      // For backwards compatibility, coerce the value to boolean even though\n      // the TypeScript compiler has narrowed the type to boolean already.\n      // noinspection PointlessBooleanExpressionJS\n      this.experimentalAutoDetectLongPolling =\n        !!settings.experimentalAutoDetectLongPolling;\n    }\n\n    this.experimentalLongPollingOptions = cloneLongPollingOptions(\n      settings.experimentalLongPollingOptions ?? {}\n    );\n    validateLongPollingOptions(this.experimentalLongPollingOptions);\n\n    this.useFetchStreams = !!settings.useFetchStreams;\n  }\n\n  isEqual(other: FirestoreSettingsImpl): boolean {\n    return (\n      this.host === other.host &&\n      this.ssl === other.ssl &&\n      this.credentials === other.credentials &&\n      this.cacheSizeBytes === other.cacheSizeBytes &&\n      this.experimentalForceLongPolling ===\n        other.experimentalForceLongPolling &&\n      this.experimentalAutoDetectLongPolling ===\n        other.experimentalAutoDetectLongPolling &&\n      longPollingOptionsEqual(\n        this.experimentalLongPollingOptions,\n        other.experimentalLongPollingOptions\n      ) &&\n      this.ignoreUndefinedProperties === other.ignoreUndefinedProperties &&\n      this.useFetchStreams === other.useFetchStreams\n    );\n  }\n}\n\nfunction validateLongPollingOptions(\n  options: ExperimentalLongPollingOptions\n): void {\n  if (options.timeoutSeconds !== undefined) {\n    if (isNaN(options.timeoutSeconds)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `invalid long polling timeout: ` +\n          `${options.timeoutSeconds} (must not be NaN)`\n      );\n    }\n    if (options.timeoutSeconds < MIN_LONG_POLLING_TIMEOUT_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `invalid long polling timeout: ${options.timeoutSeconds} ` +\n          `(minimum allowed value is ${MIN_LONG_POLLING_TIMEOUT_SECONDS})`\n      );\n    }\n    if (options.timeoutSeconds > MAX_LONG_POLLING_TIMEOUT_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `invalid long polling timeout: ${options.timeoutSeconds} ` +\n          `(maximum allowed value is ${MAX_LONG_POLLING_TIMEOUT_SECONDS})`\n      );\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { PersistencePromise } from './persistence_promise';\nimport { PersistenceTransaction } from './persistence_transaction';\nimport { TargetData } from './target_data';\n\n/**\n * Describes a map whose keys are active target ids. We do not care about the type of the\n * values.\n */\nexport type ActiveTargets = SortedMap<TargetId, unknown>;\n\nexport const GC_DID_NOT_RUN: LruResults = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\n\nexport const LRU_COLLECTION_DISABLED = -1;\nexport const LRU_DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\n\nexport class LruParams {\n  private static readonly DEFAULT_COLLECTION_PERCENTILE = 10;\n  private static readonly DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\n\n  static withCacheSize(cacheSize: number): LruParams {\n    return new LruParams(\n      cacheSize,\n      LruParams.DEFAULT_COLLECTION_PERCENTILE,\n      LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n    );\n  }\n\n  static readonly DEFAULT: LruParams = new LruParams(\n    LRU_DEFAULT_CACHE_SIZE_BYTES,\n    LruParams.DEFAULT_COLLECTION_PERCENTILE,\n    LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n  );\n\n  static readonly DISABLED: LruParams = new LruParams(\n    LRU_COLLECTION_DISABLED,\n    0,\n    0\n  );\n\n  constructor(\n    // When we attempt to collect, we will only do so if the cache size is greater than this\n    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n    readonly cacheSizeCollectionThreshold: number,\n    // The percentage of sequence numbers that we will attempt to collect\n    readonly percentileToCollect: number,\n    // A cap on the total number of sequence numbers that will be collected. This prevents\n    // us from collecting a huge number of sequence numbers if the cache has grown very large.\n    readonly maximumSequenceNumbersToCollect: number\n  ) {}\n}\n\nexport interface LruGarbageCollector {\n  readonly params: LruParams;\n\n  collect(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults>;\n\n  /** Given a percentile of target to collect, returns the number of targets to collect. */\n  calculateTargetCount(\n    txn: PersistenceTransaction,\n    percentile: number\n  ): PersistencePromise<number>;\n\n  /** Returns the nth sequence number, counting in order from the smallest. */\n  nthSequenceNumber(\n    txn: PersistenceTransaction,\n    n: number\n  ): PersistencePromise<number>;\n\n  /**\n   * Removes documents that have a sequence number equal to or less than the\n   * upper bound and are not otherwise pinned.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number>;\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number>;\n\n  /**\n   * Removes targets with a sequence number equal to or less than the given\n   * upper bound, and removes document associations with those targets.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number>;\n}\n\n/**\n * Describes the results of a garbage collection run. `didRun` will be set to\n * `false` if collection was skipped (either it is disabled or the cache size\n * has not hit the threshold). If collection ran, the other fields will be\n * filled in with the details of the results.\n */\nexport interface LruResults {\n  readonly didRun: boolean;\n  readonly sequenceNumbersCollected: number;\n  readonly targetsRemoved: number;\n  readonly documentsRemoved: number;\n}\n\n/**\n * Persistence layers intending to use LRU Garbage collection should have\n * reference delegates that implement this interface. This interface defines the\n * operations that the LRU garbage collector needs from the persistence layer.\n */\nexport interface LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  /** Enumerates all the targets in the TargetCache. */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (target: TargetData) => void\n  ): PersistencePromise<void>;\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number>;\n\n  /**\n   * Enumerates sequence numbers for documents not associated with a target.\n   * Note that this may include duplicate sequence numbers.\n   */\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes all targets that have a sequence number less than or equal to\n   * `upperBound`, and are not present in the `activeTargetIds` set.\n   *\n   * @returns the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number>;\n\n  /**\n   * Removes all unreferenced documents from the cache that have a sequence\n   * number less than or equal to the given `upperBound`.\n   *\n   * @returns the number of documents removed.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number>;\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirestoreError } from '../api';\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { getLogLevel, logDebug, LogLevel } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { ignoreIfPrimaryLeaseLoss, LocalStore } from './local_store';\nimport {\n  ActiveTargets,\n  GC_DID_NOT_RUN,\n  LRU_COLLECTION_DISABLED,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams,\n  LruResults\n} from './lru_garbage_collector';\nimport { Scheduler } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { PersistenceTransaction } from './persistence_transaction';\nimport { isIndexedDbTransactionError } from './simple_db';\n\nconst LOG_TAG = 'LruGarbageCollector';\n\nexport const LRU_MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\n\n/** How long we wait to try running LRU GC after SDK initialization. */\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\n\n// The type and comparator for the items contained in the SortedSet used in\n// place of a priority queue for the RollingSequenceNumberBuffer.\ntype BufferEntry = [ListenSequenceNumber, number];\n\nfunction bufferEntryComparator(\n  [aSequence, aIndex]: BufferEntry,\n  [bSequence, bIndex]: BufferEntry\n): number {\n  const seqCmp = primitiveComparator(aSequence, bSequence);\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n\n/**\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\n * lowest n values passed to `addElement`, and finally reports the largest of\n * them in `maxValue`.\n */\nclass RollingSequenceNumberBuffer {\n  private buffer: SortedSet<BufferEntry> = new SortedSet<BufferEntry>(\n    bufferEntryComparator\n  );\n\n  private previousIndex = 0;\n\n  constructor(private readonly maxElements: number) {}\n\n  private nextIndex(): number {\n    return ++this.previousIndex;\n  }\n\n  addElement(sequenceNumber: ListenSequenceNumber): void {\n    const entry: BufferEntry = [sequenceNumber, this.nextIndex()];\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      const highestValue = this.buffer.last()!;\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  }\n\n  get maxValue(): ListenSequenceNumber {\n    // Guaranteed to be non-empty. If we decide we are not collecting any\n    // sequence numbers, nthSequenceNumber below short-circuits. If we have\n    // decided that we are collecting n sequence numbers, it's because n is some\n    // percentage of the existing sequence numbers. That means we should never\n    // be in a situation where we are collecting sequence numbers but don't\n    // actually have any.\n    return this.buffer.last()![0];\n  }\n}\n\n/**\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\n * whether or not GC is enabled, as well as which delay to use before the next run.\n */\nexport class LruScheduler implements Scheduler {\n  private gcTask: DelayedOperation<void> | null;\n\n  constructor(\n    private readonly garbageCollector: LruGarbageCollector,\n    private readonly asyncQueue: AsyncQueue,\n    private readonly localStore: LocalStore\n  ) {\n    this.gcTask = null;\n  }\n\n  start(): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot start an already started LruScheduler'\n    );\n    if (\n      this.garbageCollector.params.cacheSizeCollectionThreshold !==\n      LRU_COLLECTION_DISABLED\n    ) {\n      this.scheduleGC(INITIAL_GC_DELAY_MS);\n    }\n  }\n\n  stop(): void {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  }\n\n  get started(): boolean {\n    return this.gcTask !== null;\n  }\n\n  private scheduleGC(delay: number): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot schedule GC while a task is pending'\n    );\n    logDebug(LOG_TAG, `Garbage collection scheduled in ${delay}ms`);\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\n      TimerId.LruGarbageCollection,\n      delay,\n      async () => {\n        this.gcTask = null;\n        try {\n          await this.localStore.collectGarbage(this.garbageCollector);\n        } catch (e) {\n          if (isIndexedDbTransactionError(e as Error)) {\n            logDebug(\n              LOG_TAG,\n              'Ignoring IndexedDB error during garbage collection: ',\n              e\n            );\n          } else {\n            await ignoreIfPrimaryLeaseLoss(e as FirestoreError);\n          }\n        }\n        await this.scheduleGC(REGULAR_GC_DELAY_MS);\n      }\n    );\n  }\n}\n\n/**\n * Implements the steps for LRU garbage collection.\n */\nclass LruGarbageCollectorImpl implements LruGarbageCollector {\n  constructor(\n    private readonly delegate: LruDelegate,\n    readonly params: LruParams\n  ) {}\n\n  calculateTargetCount(\n    txn: PersistenceTransaction,\n    percentile: number\n  ): PersistencePromise<number> {\n    return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\n      return Math.floor((percentile / 100.0) * targetCount);\n    });\n  }\n\n  nthSequenceNumber(\n    txn: PersistenceTransaction,\n    n: number\n  ): PersistencePromise<ListenSequenceNumber> {\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n\n    const buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate\n      .forEachTarget(txn, target => buffer.addElement(target.sequenceNumber))\n      .next(() => {\n        return this.delegate.forEachOrphanedDocumentSequenceNumber(\n          txn,\n          sequenceNumber => buffer.addElement(sequenceNumber)\n        );\n      })\n      .next(() => buffer.maxValue);\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  }\n\n  collect(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    if (this.params.cacheSizeCollectionThreshold === LRU_COLLECTION_DISABLED) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n\n    return this.getCacheSize(txn).next(cacheSize => {\n      if (cacheSize < this.params.cacheSizeCollectionThreshold) {\n        logDebug(\n          'LruGarbageCollector',\n          `Garbage collection skipped; Cache size ${cacheSize} ` +\n            `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`\n        );\n        return GC_DID_NOT_RUN;\n      } else {\n        return this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.delegate.getCacheSize(txn);\n  }\n\n  private runGarbageCollection(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    let upperBoundSequenceNumber: number;\n    let sequenceNumbersToCollect: number, targetsRemoved: number;\n    // Timestamps for various pieces of the process\n    let countedTargetsTs: number,\n      foundUpperBoundTs: number,\n      removedTargetsTs: number,\n      removedDocumentsTs: number;\n    const startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect)\n      .next(sequenceNumbers => {\n        // Cap at the configured max\n        if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\n          logDebug(\n            'LruGarbageCollector',\n            'Capping sequence numbers to collect down ' +\n              `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` +\n              `from ${sequenceNumbers}`\n          );\n          sequenceNumbersToCollect =\n            this.params.maximumSequenceNumbersToCollect;\n        } else {\n          sequenceNumbersToCollect = sequenceNumbers;\n        }\n        countedTargetsTs = Date.now();\n\n        return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n      })\n      .next(upperBound => {\n        upperBoundSequenceNumber = upperBound;\n        foundUpperBoundTs = Date.now();\n\n        return this.removeTargets(\n          txn,\n          upperBoundSequenceNumber,\n          activeTargetIds\n        );\n      })\n      .next(numTargetsRemoved => {\n        targetsRemoved = numTargetsRemoved;\n        removedTargetsTs = Date.now();\n\n        return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n      })\n      .next(documentsRemoved => {\n        removedDocumentsTs = Date.now();\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          const desc =\n            'LRU Garbage Collection\\n' +\n            `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` +\n            `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` +\n            `${foundUpperBoundTs - countedTargetsTs}ms\\n` +\n            `\\tRemoved ${targetsRemoved} targets in ` +\n            `${removedTargetsTs - foundUpperBoundTs}ms\\n` +\n            `\\tRemoved ${documentsRemoved} documents in ` +\n            `${removedDocumentsTs - removedTargetsTs}ms\\n` +\n            `Total Duration: ${removedDocumentsTs - startTs}ms`;\n          logDebug('LruGarbageCollector', desc);\n        }\n\n        return PersistencePromise.resolve<LruResults>({\n          didRun: true,\n          sequenceNumbersCollected: sequenceNumbersToCollect,\n          targetsRemoved,\n          documentsRemoved\n        });\n      });\n  }\n}\n\nexport function newLruGarbageCollector(\n  delegate: LruDelegate,\n  params: LruParams\n): LruGarbageCollector {\n  return new LruGarbageCollectorImpl(delegate, params);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _getProvider,\n  _removeServiceInstance,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport {\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport {\n  CredentialsProvider,\n  EmulatorAuthCredentialsProvider,\n  makeAuthCredentialsProvider,\n  OAuthToken\n} from '../api/credentials';\nimport { User } from '../auth/user';\nimport { DatabaseId, DEFAULT_DATABASE_NAME } from '../core/database_info';\nimport { Code, FirestoreError } from '../util/error';\nimport { cast } from '../util/input_validation';\nimport { logWarn } from '../util/log';\n\nimport { FirestoreService, removeComponents } from './components';\nimport {\n  DEFAULT_HOST,\n  FirestoreSettingsImpl,\n  PrivateSettings,\n  FirestoreSettings\n} from './settings';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'firestore/lite': Firestore;\n  }\n}\n\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */\nexport class Firestore implements FirestoreService {\n  /**\n   * Whether it's a Firestore or Firestore Lite instance.\n   */\n  type: 'firestore-lite' | 'firestore' = 'firestore-lite';\n\n  readonly _persistenceKey: string = '(lite)';\n\n  private _settings = new FirestoreSettingsImpl({});\n  private _settingsFrozen = false;\n\n  // A task that is assigned when the terminate() is invoked and resolved when\n  // all components have shut down.\n  private _terminateTask?: Promise<void>;\n\n  /** @hideconstructor */\n  constructor(\n    public _authCredentials: CredentialsProvider<User>,\n    public _appCheckCredentials: CredentialsProvider<string>,\n    readonly _databaseId: DatabaseId,\n    readonly _app?: FirebaseApp\n  ) {}\n\n  /**\n   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n   * instance.\n   */\n  get app(): FirebaseApp {\n    if (!this._app) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._app;\n  }\n\n  get _initialized(): boolean {\n    return this._settingsFrozen;\n  }\n\n  get _terminated(): boolean {\n    return this._terminateTask !== undefined;\n  }\n\n  _setSettings(settings: PrivateSettings): void {\n    if (this._settingsFrozen) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. You can only modify settings before calling any other ' +\n          'methods on a Firestore object.'\n      );\n    }\n    this._settings = new FirestoreSettingsImpl(settings);\n    if (settings.credentials !== undefined) {\n      this._authCredentials = makeAuthCredentialsProvider(settings.credentials);\n    }\n  }\n\n  _getSettings(): FirestoreSettingsImpl {\n    return this._settings;\n  }\n\n  _freezeSettings(): FirestoreSettingsImpl {\n    this._settingsFrozen = true;\n    return this._settings;\n  }\n\n  _delete(): Promise<void> {\n    if (!this._terminateTask) {\n      this._terminateTask = this._terminate();\n    }\n    return this._terminateTask;\n  }\n\n  /** Returns a JSON-serializable representation of this `Firestore` instance. */\n  toJSON(): object {\n    return {\n      app: this._app,\n      databaseId: this._databaseId,\n      settings: this._settings\n    };\n  }\n\n  /**\n   * Terminates all components used by this client. Subclasses can override\n   * this method to clean up their own dependencies, but must also call this\n   * method.\n   *\n   * Only ever called once.\n   */\n  protected _terminate(): Promise<void> {\n    removeComponents(this);\n    return Promise.resolve();\n  }\n}\n\n/**\n * Initializes a new instance of Cloud Firestore with the provided settings.\n * Can only be called before any other functions, including\n * {@link (getFirestore:1)}. If the custom settings are empty, this function is\n * equivalent to calling {@link (getFirestore:1)}.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} with which the `Firestore` instance will\n * be associated.\n * @param settings - A settings object to configure the `Firestore` instance.\n * @returns A newly initialized `Firestore` instance.\n */\nexport function initializeFirestore(\n  app: FirebaseApp,\n  settings: FirestoreSettings\n): Firestore;\n/**\n * Initializes a new instance of Cloud Firestore with the provided settings.\n * Can only be called before any other functions, including\n * {@link (getFirestore:1)}. If the custom settings are empty, this function is\n * equivalent to calling {@link (getFirestore:1)}.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} with which the `Firestore` instance will\n * be associated.\n * @param settings - A settings object to configure the `Firestore` instance.\n * @param databaseId - The name of the database.\n * @returns A newly initialized `Firestore` instance.\n * @beta\n */\nexport function initializeFirestore(\n  app: FirebaseApp,\n  settings: FirestoreSettings,\n  databaseId?: string\n): Firestore;\nexport function initializeFirestore(\n  app: FirebaseApp,\n  settings: FirestoreSettings,\n  databaseId?: string\n): Firestore {\n  if (!databaseId) {\n    databaseId = DEFAULT_DATABASE_NAME;\n  }\n  const provider = _getProvider(app, 'firestore/lite');\n\n  if (provider.isInitialized(databaseId)) {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      'Firestore can only be initialized once per app.'\n    );\n  }\n\n  return provider.initialize({\n    options: settings,\n    instanceIdentifier: databaseId\n  });\n}\n\n/**\n * Returns the existing default {@link Firestore} instance that is associated with the\n * default {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new\n * instance with default settings.\n *\n * @returns The {@link Firestore} instance of the provided app.\n */\nexport function getFirestore(): Firestore;\n/**\n * Returns the existing default {@link Firestore} instance that is associated with the\n * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new\n * instance with default settings.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned {@link Firestore}\n * instance is associated with.\n * @returns The {@link Firestore} instance of the provided app.\n */\nexport function getFirestore(app: FirebaseApp): Firestore;\n/**\n * Returns the existing {@link Firestore} instance that is associated with the\n * default {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new\n * instance with default settings.\n *\n * @param databaseId - The name of the database.\n * @returns The {@link Firestore} instance of the provided app.\n * @beta\n */\nexport function getFirestore(databaseId: string): Firestore;\n/**\n * Returns the existing {@link Firestore} instance that is associated with the\n * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new\n * instance with default settings.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned {@link Firestore}\n * instance is associated with.\n * @param databaseId - The name of the database.\n * @returns The {@link Firestore} instance of the provided app.\n * @beta\n */\nexport function getFirestore(app: FirebaseApp, databaseId: string): Firestore;\nexport function getFirestore(\n  appOrDatabaseId?: FirebaseApp | string,\n  optionalDatabaseId?: string\n): Firestore {\n  const app: FirebaseApp =\n    typeof appOrDatabaseId === 'object' ? appOrDatabaseId : getApp();\n  const databaseId =\n    typeof appOrDatabaseId === 'string'\n      ? appOrDatabaseId\n      : optionalDatabaseId || '(default)';\n  const db = _getProvider(app, 'firestore/lite').getImmediate({\n    identifier: databaseId\n  }) as Firestore;\n  if (!db._initialized) {\n    const emulator = getDefaultEmulatorHostnameAndPort('firestore');\n    if (emulator) {\n      connectFirestoreEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */\nexport function connectFirestoreEmulator(\n  firestore: Firestore,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  firestore = cast(firestore, Firestore);\n  const settings = firestore._getSettings();\n  const newHostSetting = `${host}:${port}`;\n\n  if (settings.host !== DEFAULT_HOST && settings.host !== newHostSetting) {\n    logWarn(\n      'Host has been set in both settings() and connectFirestoreEmulator(), emulator host ' +\n        'will be used.'\n    );\n  }\n\n  firestore._setSettings({\n    ...settings,\n    host: newHostSetting,\n    ssl: false\n  });\n\n  if (options.mockUserToken) {\n    let token: string;\n    let user: User;\n    if (typeof options.mockUserToken === 'string') {\n      token = options.mockUserToken;\n      user = User.MOCK_USER;\n    } else {\n      // Let createMockUserToken validate first (catches common mistakes like\n      // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n      token = createMockUserToken(\n        options.mockUserToken,\n        firestore._app?.options.projectId\n      );\n      const uid = options.mockUserToken.sub || options.mockUserToken.user_id;\n      if (!uid) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"mockUserToken must contain 'sub' or 'user_id' field!\"\n        );\n      }\n      user = new User(uid);\n    }\n\n    firestore._authCredentials = new EmulatorAuthCredentialsProvider(\n      new OAuthToken(token, user)\n    );\n  }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */\nexport function terminate(firestore: Firestore): Promise<void> {\n  firestore = cast(firestore, Firestore);\n  _removeServiceInstance(firestore.app, 'firestore/lite');\n  return firestore._delete();\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AggregateType } from '../core/aggregate';\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { ApiClientObjectMap, Value } from '../protos/firestore_proto_api';\n\nimport { average, count, sum } from './aggregate';\nimport { DocumentData, Query } from './reference';\nimport { AbstractUserDataWriter } from './user_data_writer';\n\nexport { AggregateType };\n\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport class AggregateField<T> {\n  /** A type string to uniquely identify instances of this class. */\n  readonly type = 'AggregateField';\n\n  /** Indicates the aggregation operation of this AggregateField. */\n  readonly aggregateType: AggregateType;\n\n  /**\n   * Create a new AggregateField<T>\n   * @param aggregateType Specifies the type of aggregation operation to perform.\n   * @param _internalFieldPath Optionally specifies the field that is aggregated.\n   * @internal\n   */\n  constructor(\n    aggregateType: AggregateType = 'count',\n    readonly _internalFieldPath?: InternalFieldPath\n  ) {\n    this.aggregateType = aggregateType;\n  }\n}\n\n/**\n * The union of all `AggregateField` types that are supported by Firestore.\n */\nexport type AggregateFieldType =\n  | ReturnType<typeof sum>\n  | ReturnType<typeof average>\n  | ReturnType<typeof count>;\n\n/**\n * Specifies a set of aggregations and their aliases.\n */\nexport interface AggregateSpec {\n  [field: string]: AggregateFieldType;\n}\n\n/**\n * A type whose keys are taken from an `AggregateSpec`, and whose values are the\n * result of the aggregation performed by the corresponding `AggregateField`\n * from the input `AggregateSpec`.\n */\nexport type AggregateSpecData<T extends AggregateSpec> = {\n  [P in keyof T]: T[P] extends AggregateField<infer U> ? U : never;\n};\n\n/**\n * The results of executing an aggregation query.\n */\nexport class AggregateQuerySnapshot<\n  AggregateSpecType extends AggregateSpec,\n  AppModelType = DocumentData,\n  DbModelType extends DocumentData = DocumentData\n> {\n  /** A type string to uniquely identify instances of this class. */\n  readonly type = 'AggregateQuerySnapshot';\n\n  /**\n   * The underlying query over which the aggregations recorded in this\n   * `AggregateQuerySnapshot` were performed.\n   */\n  readonly query: Query<AppModelType, DbModelType>;\n\n  /** @hideconstructor */\n  constructor(\n    query: Query<AppModelType, DbModelType>,\n    private readonly _userDataWriter: AbstractUserDataWriter,\n    private readonly _data: ApiClientObjectMap<Value>\n  ) {\n    this.query = query;\n  }\n\n  /**\n   * Returns the results of the aggregations performed over the underlying\n   * query.\n   *\n   * The keys of the returned object will be the same as those of the\n   * `AggregateSpec` object specified to the aggregation method, and the values\n   * will be the corresponding aggregation result.\n   *\n   * @returns The results of the aggregations performed over the underlying\n   * query.\n   */\n  data(): AggregateSpecData<AggregateSpecType> {\n    return this._userDataWriter.convertObjectMap(\n      this._data\n    ) as AggregateSpecData<AggregateSpecType>;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance } from '@firebase/util';\n\nimport {\n  newQueryForCollectionGroup,\n  newQueryForPath,\n  Query as InternalQuery,\n  queryEquals\n} from '../core/query';\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  cast,\n  validateCollectionPath,\n  validateDocumentPath,\n  validateNonEmptyArgument\n} from '../util/input_validation';\nimport { AutoId } from '../util/misc';\n\nimport { Firestore } from './database';\nimport { FieldPath } from './field_path';\nimport { FieldValue } from './field_value';\nimport { FirestoreDataConverter } from './snapshot';\nimport { NestedUpdateFields, Primitive } from './types';\n\n/**\n * Document data (for use with {@link @firebase/firestore/lite#(setDoc:1)}) consists of fields mapped to\n * values.\n */\nexport interface DocumentData {\n  /** A mapping between a field and its value. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [field: string]: any;\n}\n\n/**\n * Similar to Typescript's `Partial<T>`, but allows nested fields to be\n * omitted and FieldValues to be passed in as property values.\n */\nexport type PartialWithFieldValue<T> =\n  | Partial<T>\n  | (T extends Primitive\n      ? T\n      : T extends {}\n      ? { [K in keyof T]?: PartialWithFieldValue<T[K]> | FieldValue }\n      : never);\n\n/**\n * Allows FieldValues to be passed in as a property value while maintaining\n * type safety.\n */\nexport type WithFieldValue<T> =\n  | T\n  | (T extends Primitive\n      ? T\n      : T extends {}\n      ? { [K in keyof T]: WithFieldValue<T[K]> | FieldValue }\n      : never);\n\n/**\n * Update data (for use with {@link (updateDoc:1)}) that consists of field paths\n * (e.g. 'foo' or 'foo.baz') mapped to values. Fields that contain dots\n * reference nested fields within the document. FieldValues can be passed in\n * as property values.\n */\nexport type UpdateData<T> = T extends Primitive\n  ? T\n  : T extends {}\n  ? { [K in keyof T]?: UpdateData<T[K]> | FieldValue } & NestedUpdateFields<T>\n  : Partial<T>;\n/**\n * An options object that configures the behavior of {@link @firebase/firestore/lite#(setDoc:1)}, {@link\n * @firebase/firestore/lite#(WriteBatch.set:1)} and {@link @firebase/firestore/lite#(Transaction.set:1)} calls. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a `SetOptions` with `merge: true`.\n *\n * @param merge - Changes the behavior of a `setDoc()` call to only replace the\n * values specified in its data argument. Fields omitted from the `setDoc()`\n * call remain untouched. If your input sets any field to an empty map, all\n * nested fields are overwritten.\n * @param mergeFields - Changes the behavior of `setDoc()` calls to only replace\n * the specified field paths. Any field path that is not specified is ignored\n * and remains untouched. If your input sets any field to an empty map, all\n * nested fields are overwritten.\n */\nexport type SetOptions =\n  | {\n      readonly merge?: boolean;\n    }\n  | {\n      readonly mergeFields?: Array<string | FieldPath>;\n    };\n\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */\nexport class Query<\n  AppModelType = DocumentData,\n  DbModelType extends DocumentData = DocumentData\n> {\n  /** The type of this Firestore reference. */\n  readonly type: 'query' | 'collection' = 'query';\n\n  /**\n   * The `Firestore` instance for the Firestore database (useful for performing\n   * transactions, etc.).\n   */\n  readonly firestore: Firestore;\n\n  // This is the lite version of the Query class in the main SDK.\n\n  /** @hideconstructor protected */\n  constructor(\n    firestore: Firestore,\n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    readonly converter: FirestoreDataConverter<\n      AppModelType,\n      DbModelType\n    > | null,\n    readonly _query: InternalQuery\n  ) {\n    this.firestore = firestore;\n  }\n\n  /**\n   * Removes the current converter.\n   *\n   * @param converter - `null` removes the current converter.\n   * @returns A `Query<DocumentData, DocumentData>` that does not use a\n   * converter.\n   */\n  withConverter(converter: null): Query<DocumentData, DocumentData>;\n  /**\n   * Applies a custom data converter to this query, allowing you to use your own\n   * custom model objects with Firestore. When you call {@link getDocs} with\n   * the returned query, the provided converter will convert between Firestore\n   * data of type `NewDbModelType` and your custom type `NewAppModelType`.\n   *\n   * @param converter - Converts objects to and from Firestore.\n   * @returns A `Query` that uses the provided converter.\n   */\n  withConverter<\n    NewAppModelType,\n    NewDbModelType extends DocumentData = DocumentData\n  >(\n    converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>\n  ): Query<NewAppModelType, NewDbModelType>;\n  withConverter<\n    NewAppModelType,\n    NewDbModelType extends DocumentData = DocumentData\n  >(\n    converter: FirestoreDataConverter<NewAppModelType, NewDbModelType> | null\n  ): Query<NewAppModelType, NewDbModelType> {\n    return new Query<NewAppModelType, NewDbModelType>(\n      this.firestore,\n      converter,\n      this._query\n    );\n  }\n}\n\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\nexport class DocumentReference<\n  AppModelType = DocumentData,\n  DbModelType extends DocumentData = DocumentData\n> {\n  /** The type of this Firestore reference. */\n  readonly type = 'document';\n\n  /**\n   * The {@link Firestore} instance the document is in.\n   * This is useful for performing transactions, for example.\n   */\n  readonly firestore: Firestore;\n\n  /** @hideconstructor */\n  constructor(\n    firestore: Firestore,\n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    readonly converter: FirestoreDataConverter<\n      AppModelType,\n      DbModelType\n    > | null,\n    readonly _key: DocumentKey\n  ) {\n    this.firestore = firestore;\n  }\n\n  get _path(): ResourcePath {\n    return this._key.path;\n  }\n\n  /**\n   * The document's identifier within its collection.\n   */\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  /**\n   * A string representing the path of the referenced document (relative\n   * to the root of the database).\n   */\n  get path(): string {\n    return this._key.path.canonicalString();\n  }\n\n  /**\n   * The collection this `DocumentReference` belongs to.\n   */\n  get parent(): CollectionReference<AppModelType, DbModelType> {\n    return new CollectionReference<AppModelType, DbModelType>(\n      this.firestore,\n      this.converter,\n      this._key.path.popLast()\n    );\n  }\n\n  /**\n   * Applies a custom data converter to this `DocumentReference`, allowing you\n   * to use your own custom model objects with Firestore. When you call {@link\n   * @firebase/firestore/lite#(setDoc:1)}, {@link @firebase/firestore/lite#getDoc}, etc. with the returned `DocumentReference`\n   * instance, the provided converter will convert between Firestore data of\n   * type `NewDbModelType` and your custom type `NewAppModelType`.\n   *\n   * @param converter - Converts objects to and from Firestore.\n   * @returns A `DocumentReference` that uses the provided converter.\n   */\n  withConverter<\n    NewAppModelType,\n    NewDbModelType extends DocumentData = DocumentData\n  >(\n    converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>\n  ): DocumentReference<NewAppModelType, NewDbModelType>;\n  /**\n   * Removes the current converter.\n   *\n   * @param converter - `null` removes the current converter.\n   * @returns A `DocumentReference<DocumentData, DocumentData>` that does not\n   * use a converter.\n   */\n  withConverter(converter: null): DocumentReference<DocumentData, DocumentData>;\n  withConverter<\n    NewAppModelType,\n    NewDbModelType extends DocumentData = DocumentData\n  >(\n    converter: FirestoreDataConverter<NewAppModelType, NewDbModelType> | null\n  ): DocumentReference<NewAppModelType, NewDbModelType> {\n    return new DocumentReference<NewAppModelType, NewDbModelType>(\n      this.firestore,\n      converter,\n      this._key\n    );\n  }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */\nexport class CollectionReference<\n  AppModelType = DocumentData,\n  DbModelType extends DocumentData = DocumentData\n> extends Query<AppModelType, DbModelType> {\n  /** The type of this Firestore reference. */\n  readonly type = 'collection';\n\n  /** @hideconstructor */\n  constructor(\n    firestore: Firestore,\n    converter: FirestoreDataConverter<AppModelType, DbModelType> | null,\n    readonly _path: ResourcePath\n  ) {\n    super(firestore, converter, newQueryForPath(_path));\n  }\n\n  /** The collection's identifier. */\n  get id(): string {\n    return this._query.path.lastSegment();\n  }\n\n  /**\n   * A string representing the path of the referenced collection (relative\n   * to the root of the database).\n   */\n  get path(): string {\n    return this._query.path.canonicalString();\n  }\n\n  /**\n   * A reference to the containing `DocumentReference` if this is a\n   * subcollection. If this isn't a subcollection, the reference is null.\n   */\n  get parent(): DocumentReference<DocumentData, DocumentData> | null {\n    const parentPath = this._path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference(\n        this.firestore,\n        /* converter= */ null,\n        new DocumentKey(parentPath)\n      );\n    }\n  }\n\n  /**\n   * Applies a custom data converter to this `CollectionReference`, allowing you\n   * to use your own custom model objects with Firestore. When you call {@link\n   * addDoc} with the returned `CollectionReference` instance, the provided\n   * converter will convert between Firestore data of type `NewDbModelType` and\n   * your custom type `NewAppModelType`.\n   *\n   * @param converter - Converts objects to and from Firestore.\n   * @returns A `CollectionReference` that uses the provided converter.\n   */\n  withConverter<\n    NewAppModelType,\n    NewDbModelType extends DocumentData = DocumentData\n  >(\n    converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>\n  ): CollectionReference<NewAppModelType, NewDbModelType>;\n  /**\n   * Removes the current converter.\n   *\n   * @param converter - `null` removes the current converter.\n   * @returns A `CollectionReference<DocumentData, DocumentData>` that does not\n   * use a converter.\n   */\n  withConverter(\n    converter: null\n  ): CollectionReference<DocumentData, DocumentData>;\n  withConverter<\n    NewAppModelType,\n    NewDbModelType extends DocumentData = DocumentData\n  >(\n    converter: FirestoreDataConverter<NewAppModelType, NewDbModelType> | null\n  ): CollectionReference<NewAppModelType, NewDbModelType> {\n    return new CollectionReference<NewAppModelType, NewDbModelType>(\n      this.firestore,\n      converter,\n      this._path\n    );\n  }\n}\n\n/**\n * Gets a `CollectionReference` instance that refers to the collection at\n * the specified absolute path.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param path - A slash-separated path to a collection.\n * @param pathSegments - Additional path segments to apply relative to the first\n * argument.\n * @throws If the final path has an even number of segments and does not point\n * to a collection.\n * @returns The `CollectionReference` instance.\n */\nexport function collection(\n  firestore: Firestore,\n  path: string,\n  ...pathSegments: string[]\n): CollectionReference<DocumentData, DocumentData>;\n/**\n * Gets a `CollectionReference` instance that refers to a subcollection of\n * `reference` at the the specified relative path.\n *\n * @param reference - A reference to a collection.\n * @param path - A slash-separated path to a collection.\n * @param pathSegments - Additional path segments to apply relative to the first\n * argument.\n * @throws If the final path has an even number of segments and does not point\n * to a collection.\n * @returns The `CollectionReference` instance.\n */\nexport function collection<AppModelType, DbModelType extends DocumentData>(\n  reference: CollectionReference<AppModelType, DbModelType>,\n  path: string,\n  ...pathSegments: string[]\n): CollectionReference<DocumentData, DocumentData>;\n/**\n * Gets a `CollectionReference` instance that refers to a subcollection of\n * `reference` at the the specified relative path.\n *\n * @param reference - A reference to a Firestore document.\n * @param path - A slash-separated path to a collection.\n * @param pathSegments - Additional path segments that will be applied relative\n * to the first argument.\n * @throws If the final path has an even number of segments and does not point\n * to a collection.\n * @returns The `CollectionReference` instance.\n */\nexport function collection<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>,\n  path: string,\n  ...pathSegments: string[]\n): CollectionReference<DocumentData, DocumentData>;\nexport function collection<AppModelType, DbModelType extends DocumentData>(\n  parent:\n    | Firestore\n    | DocumentReference<AppModelType, DbModelType>\n    | CollectionReference<AppModelType, DbModelType>,\n  path: string,\n  ...pathSegments: string[]\n): CollectionReference<DocumentData, DocumentData> {\n  parent = getModularInstance(parent);\n\n  validateNonEmptyArgument('collection', 'path', path);\n  if (parent instanceof Firestore) {\n    const absolutePath = ResourcePath.fromString(path, ...pathSegments);\n    validateCollectionPath(absolutePath);\n    return new CollectionReference(parent, /* converter= */ null, absolutePath);\n  } else {\n    if (\n      !(parent instanceof DocumentReference) &&\n      !(parent instanceof CollectionReference)\n    ) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Expected first argument to collection() to be a CollectionReference, ' +\n          'a DocumentReference or FirebaseFirestore'\n      );\n    }\n    const absolutePath = parent._path.child(\n      ResourcePath.fromString(path, ...pathSegments)\n    );\n    validateCollectionPath(absolutePath);\n    return new CollectionReference(\n      parent.firestore,\n      /* converter= */ null,\n      absolutePath\n    );\n  }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */\nexport function collectionGroup(\n  firestore: Firestore,\n  collectionId: string\n): Query<DocumentData, DocumentData> {\n  firestore = cast(firestore, Firestore);\n\n  validateNonEmptyArgument('collectionGroup', 'collection id', collectionId);\n  if (collectionId.indexOf('/') >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid collection ID '${collectionId}' passed to function ` +\n        `collectionGroup(). Collection IDs must not contain '/'.`\n    );\n  }\n\n  return new Query(\n    firestore,\n    /* converter= */ null,\n    newQueryForCollectionGroup(collectionId)\n  );\n}\n\n/**\n * Gets a `DocumentReference` instance that refers to the document at the\n * specified absolute path.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param path - A slash-separated path to a document.\n * @param pathSegments - Additional path segments that will be applied relative\n * to the first argument.\n * @throws If the final path has an odd number of segments and does not point to\n * a document.\n * @returns The `DocumentReference` instance.\n */\nexport function doc(\n  firestore: Firestore,\n  path: string,\n  ...pathSegments: string[]\n): DocumentReference<DocumentData, DocumentData>;\n/**\n * Gets a `DocumentReference` instance that refers to a document within\n * `reference` at the specified relative path. If no path is specified, an\n * automatically-generated unique ID will be used for the returned\n * `DocumentReference`.\n *\n * @param reference - A reference to a collection.\n * @param path - A slash-separated path to a document. Has to be omitted to use\n * auto-genrated IDs.\n * @param pathSegments - Additional path segments that will be applied relative\n * to the first argument.\n * @throws If the final path has an odd number of segments and does not point to\n * a document.\n * @returns The `DocumentReference` instance.\n */\nexport function doc<AppModelType, DbModelType extends DocumentData>(\n  reference: CollectionReference<AppModelType, DbModelType>,\n  path?: string,\n  ...pathSegments: string[]\n): DocumentReference<AppModelType, DbModelType>;\n/**\n * Gets a `DocumentReference` instance that refers to a document within\n * `reference` at the specified relative path.\n *\n * @param reference - A reference to a Firestore document.\n * @param path - A slash-separated path to a document.\n * @param pathSegments - Additional path segments that will be applied relative\n * to the first argument.\n * @throws If the final path has an odd number of segments and does not point to\n * a document.\n * @returns The `DocumentReference` instance.\n */\nexport function doc<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>,\n  path: string,\n  ...pathSegments: string[]\n): DocumentReference<DocumentData, DocumentData>;\nexport function doc<AppModelType, DbModelType extends DocumentData>(\n  parent:\n    | Firestore\n    | CollectionReference<AppModelType, DbModelType>\n    | DocumentReference<AppModelType, DbModelType>,\n  path?: string,\n  ...pathSegments: string[]\n): DocumentReference<AppModelType, DbModelType> {\n  parent = getModularInstance(parent);\n\n  // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n  if (arguments.length === 1) {\n    path = AutoId.newId();\n  }\n  validateNonEmptyArgument('doc', 'path', path);\n\n  if (parent instanceof Firestore) {\n    const absolutePath = ResourcePath.fromString(path, ...pathSegments);\n    validateDocumentPath(absolutePath);\n    return new DocumentReference(\n      parent,\n      /* converter= */ null,\n      new DocumentKey(absolutePath)\n    );\n  } else {\n    if (\n      !(parent instanceof DocumentReference) &&\n      !(parent instanceof CollectionReference)\n    ) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Expected first argument to collection() to be a CollectionReference, ' +\n          'a DocumentReference or FirebaseFirestore'\n      );\n    }\n    const absolutePath = parent._path.child(\n      ResourcePath.fromString(path, ...pathSegments)\n    );\n    validateDocumentPath(absolutePath);\n    return new DocumentReference<AppModelType, DbModelType>(\n      parent.firestore,\n      parent instanceof CollectionReference ? parent.converter : null,\n      new DocumentKey(absolutePath)\n    );\n  }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nexport function refEqual<AppModelType, DbModelType extends DocumentData>(\n  left:\n    | DocumentReference<AppModelType, DbModelType>\n    | CollectionReference<AppModelType, DbModelType>,\n  right:\n    | DocumentReference<AppModelType, DbModelType>\n    | CollectionReference<AppModelType, DbModelType>\n): boolean {\n  left = getModularInstance(left);\n  right = getModularInstance(right);\n\n  if (\n    (left instanceof DocumentReference ||\n      left instanceof CollectionReference) &&\n    (right instanceof DocumentReference || right instanceof CollectionReference)\n  ) {\n    return (\n      left.firestore === right.firestore &&\n      left.path === right.path &&\n      left.converter === right.converter\n    );\n  }\n  return false;\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nexport function queryEqual<AppModelType, DbModelType extends DocumentData>(\n  left: Query<AppModelType, DbModelType>,\n  right: Query<AppModelType, DbModelType>\n): boolean {\n  left = getModularInstance(left);\n  right = getModularInstance(right);\n\n  if (left instanceof Query && right instanceof Query) {\n    return (\n      left.firestore === right.firestore &&\n      queryEquals(left._query, right._query) &&\n      left.converter === right.converter\n    );\n  }\n  return false;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ByteString } from '../util/byte_string';\nimport { Code, FirestoreError } from '../util/error';\n\n/**\n * An immutable object representing an array of bytes.\n */\nexport class Bytes {\n  _byteString: ByteString;\n\n  /** @hideconstructor */\n  constructor(byteString: ByteString) {\n    this._byteString = byteString;\n  }\n\n  /**\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\n   * bytes.\n   *\n   * @param base64 - The Base64 string used to create the `Bytes` object.\n   */\n  static fromBase64String(base64: string): Bytes {\n    try {\n      return new Bytes(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct data from Base64 string: ' + e\n      );\n    }\n  }\n\n  /**\n   * Creates a new `Bytes` object from the given Uint8Array.\n   *\n   * @param array - The Uint8Array used to create the `Bytes` object.\n   */\n  static fromUint8Array(array: Uint8Array): Bytes {\n    return new Bytes(ByteString.fromUint8Array(array));\n  }\n\n  /**\n   * Returns the underlying bytes as a Base64-encoded string.\n   *\n   * @returns The Base64-encoded string created from the `Bytes` object.\n   */\n  toBase64(): string {\n    return this._byteString.toBase64();\n  }\n\n  /**\n   * Returns the underlying bytes in a new `Uint8Array`.\n   *\n   * @returns The Uint8Array created from the `Bytes` object.\n   */\n  toUint8Array(): Uint8Array {\n    return this._byteString.toUint8Array();\n  }\n\n  /**\n   * Returns a string representation of the `Bytes` object.\n   *\n   * @returns A string representation of the `Bytes` object.\n   */\n  toString(): string {\n    return 'Bytes(base64: ' + this.toBase64() + ')';\n  }\n\n  /**\n   * Returns true if this `Bytes` object is equal to the provided one.\n   *\n   * @param other - The `Bytes` object to compare against.\n   * @returns true if this `Bytes` object is equal to the provided one.\n   */\n  isEqual(other: Bytes): boolean {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DOCUMENT_KEY_NAME,\n  FieldPath as InternalFieldPath\n} from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\n\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */\nexport class FieldPath {\n  /** Internal representation of a Firestore field path. */\n  readonly _internalPath: InternalFieldPath;\n\n  /**\n   * Creates a `FieldPath` from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    for (let i = 0; i < fieldNames.length; ++i) {\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n\n  /**\n   * Returns true if this `FieldPath` is equal to the provided one.\n   *\n   * @param other - The `FieldPath` to compare against.\n   * @returns true if this `FieldPath` is equal to the provided one.\n   */\n  isEqual(other: FieldPath): boolean {\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */\nexport function documentId(): FieldPath {\n  return new FieldPath(DOCUMENT_KEY_NAME);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParseContext } from '../api/parse_context';\nimport { FieldTransform } from '../model/mutation';\n\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */\nexport abstract class FieldValue {\n  /**\n   * @param _methodName - The public API endpoint that returns this class.\n   * @hideconstructor\n   */\n  constructor(public _methodName: string) {}\n\n  /** Compares `FieldValue`s for equality. */\n  abstract isEqual(other: FieldValue): boolean;\n  abstract _toFieldTransform(context: ParseContext): FieldTransform | null;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  /**\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\n   * longitude values.\n   * @param latitude - The latitude as number between -90 and 90.\n   * @param longitude - The longitude as number between -180 and 180.\n   */\n  constructor(latitude: number, longitude: number) {\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * The latitude of this `GeoPoint` instance.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * The longitude of this `GeoPoint` instance.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  /**\n   * Returns true if this `GeoPoint` is equal to the provided one.\n   *\n   * @param other - The `GeoPoint` to compare against.\n   * @returns true if this `GeoPoint` is equal to the provided one.\n   */\n  isEqual(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  /** Returns a JSON-serializable representation of this GeoPoint. */\n  toJSON(): { latitude: number; longitude: number } {\n    return { latitude: this._lat, longitude: this._long };\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DocumentData,\n  FieldPath as PublicFieldPath,\n  SetOptions\n} from '@firebase/firestore-types';\nimport { Compat, getModularInstance } from '@firebase/util';\n\nimport { ParseContext } from '../api/parse_context';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport { FieldMask } from '../model/field_mask';\nimport {\n  FieldTransform,\n  Mutation,\n  PatchMutation,\n  Precondition,\n  SetMutation\n} from '../model/mutation';\nimport { ObjectValue } from '../model/object_value';\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform\n} from '../model/transform_operation';\nimport { newSerializer } from '../platform/serializer';\nimport {\n  MapValue as ProtoMapValue,\n  Value as ProtoValue\n} from '../protos/firestore_proto_api';\nimport { toNumber } from '../remote/number_serializer';\nimport {\n  JsonProtoSerializer,\n  toBytes,\n  toResourceName,\n  toTimestamp\n} from '../remote/serializer';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { Dict, forEach, isEmpty } from '../util/obj';\n\nimport { Bytes } from './bytes';\nimport { Firestore } from './database';\nimport { FieldPath } from './field_path';\nimport { FieldValue } from './field_value';\nimport { GeoPoint } from './geo_point';\nimport {\n  DocumentReference,\n  PartialWithFieldValue,\n  WithFieldValue\n} from './reference';\nimport { Timestamp } from './timestamp';\n\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n\n/**\n * An untyped Firestore Data Converter interface that is shared between the\n * lite, firestore-exp and classic SDK.\n */\nexport interface UntypedFirestoreDataConverter<\n  AppModelType,\n  DbModelType extends DocumentData = DocumentData\n> {\n  toFirestore(\n    modelObject: WithFieldValue<AppModelType>\n  ): WithFieldValue<DbModelType>;\n  toFirestore(\n    modelObject: PartialWithFieldValue<AppModelType>,\n    options: SetOptions\n  ): PartialWithFieldValue<DbModelType>;\n  fromFirestore(snapshot: unknown, options?: unknown): AppModelType;\n}\n\n/** The result of parsing document data (e.g. for a setData call). */\nexport class ParsedSetData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask | null,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutation(key: DocumentKey, precondition: Precondition): Mutation {\n    if (this.fieldMask !== null) {\n      return new PatchMutation(\n        key,\n        this.data,\n        this.fieldMask,\n        precondition,\n        this.fieldTransforms\n      );\n    } else {\n      return new SetMutation(\n        key,\n        this.data,\n        precondition,\n        this.fieldTransforms\n      );\n    }\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nexport class ParsedUpdateData {\n  constructor(\n    readonly data: ObjectValue,\n    // The fieldMask does not include document transforms.\n    readonly fieldMask: FieldMask,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutation(key: DocumentKey, precondition: Precondition): Mutation {\n    return new PatchMutation(\n      key,\n      this.data,\n      this.fieldMask,\n      precondition,\n      this.fieldTransforms\n    );\n  }\n}\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nexport const enum UserDataSource {\n  Set,\n  Update,\n  MergeSet,\n  /**\n   * Indicates the source is a where clause, cursor bound, arrayUnion()\n   * element, etc. Of note, isWrite(source) will return false.\n   */\n  Argument,\n  /**\n   * Indicates that the source is an Argument that may directly contain nested\n   * arrays (e.g. the operand of an `in` query).\n   */\n  ArrayArgument\n}\n\nfunction isWrite(dataSource: UserDataSource): boolean {\n  switch (dataSource) {\n    case UserDataSource.Set: // fall through\n    case UserDataSource.MergeSet: // fall through\n    case UserDataSource.Update:\n      return true;\n    case UserDataSource.Argument:\n    case UserDataSource.ArrayArgument:\n      return false;\n    default:\n      throw fail(`Unexpected case for UserDataSource: ${dataSource}`);\n  }\n}\n\n/** Contains the settings that are mutated as we parse user data. */\ninterface ContextSettings {\n  /** Indicates what kind of API method this data came from. */\n  readonly dataSource: UserDataSource;\n  /** The name of the method the user called to create the ParseContext. */\n  readonly methodName: string;\n  /** The document the user is attempting to modify, if that applies. */\n  readonly targetDoc?: DocumentKey;\n  /**\n   * A path within the object being parsed. This could be an empty path (in\n   * which case the context represents the root of the data being parsed), or a\n   * nonempty path (indicating the context represents a nested location within\n   * the data).\n   */\n  readonly path?: InternalFieldPath;\n  /**\n   * Whether or not this context corresponds to an element of an array.\n   * If not set, elements are treated as if they were outside of arrays.\n   */\n  readonly arrayElement?: boolean;\n  /**\n   * Whether or not a converter was specified in this context. If true, error\n   * messages will reference the converter when invalid data is provided.\n   */\n  readonly hasConverter?: boolean;\n}\n\n/** A \"context\" object passed around while parsing user data. */\nclass ParseContextImpl implements ParseContext {\n  readonly fieldTransforms: FieldTransform[];\n  readonly fieldMask: InternalFieldPath[];\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings - The settings for the parser.\n   * @param databaseId - The database ID of the Firestore instance.\n   * @param serializer - The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms - A mutable list of field transforms encountered\n   * while parsing the data.\n   * @param fieldMask - A mutable list of field paths encountered while parsing\n   * the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(\n    readonly settings: ContextSettings,\n    readonly databaseId: DatabaseId,\n    readonly serializer: JsonProtoSerializer,\n    readonly ignoreUndefinedProperties: boolean,\n    fieldTransforms?: FieldTransform[],\n    fieldMask?: InternalFieldPath[]\n  ) {\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n\n  get path(): InternalFieldPath | undefined {\n    return this.settings.path;\n  }\n\n  get dataSource(): UserDataSource {\n    return this.settings.dataSource;\n  }\n\n  /** Returns a new context with the specified settings overwritten. */\n  contextWith(configuration: Partial<ContextSettings>): ParseContextImpl {\n    return new ParseContextImpl(\n      { ...this.settings, ...configuration },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n  }\n\n  childContextForField(field: string): ParseContextImpl {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePathSegment(field);\n    return context;\n  }\n\n  childContextForFieldPath(field: InternalFieldPath): ParseContextImpl {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePath();\n    return context;\n  }\n\n  childContextForArray(index: number): ParseContextImpl {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.contextWith({ path: undefined, arrayElement: true });\n  }\n\n  createError(reason: string): FirestoreError {\n    return createError(\n      reason,\n      this.settings.methodName,\n      this.settings.hasConverter || false,\n      this.path,\n      this.settings.targetDoc\n    );\n  }\n\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath: InternalFieldPath): boolean {\n    return (\n      this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined ||\n      this.fieldTransforms.find(transform =>\n        fieldPath.isPrefixOf(transform.field)\n      ) !== undefined\n    );\n  }\n\n  private validatePath(): void {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (!this.path) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n\n  private validatePathSegment(segment: string): void {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nexport class UserDataReader {\n  private readonly serializer: JsonProtoSerializer;\n\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly ignoreUndefinedProperties: boolean,\n    serializer?: JsonProtoSerializer\n  ) {\n    this.serializer = serializer || newSerializer(databaseId);\n  }\n\n  /** Creates a new top-level parse context. */\n  createContext(\n    dataSource: UserDataSource,\n    methodName: string,\n    targetDoc?: DocumentKey,\n    hasConverter = false\n  ): ParseContextImpl {\n    return new ParseContextImpl(\n      {\n        dataSource,\n        methodName,\n        targetDoc,\n        path: InternalFieldPath.emptyPath(),\n        arrayElement: false,\n        hasConverter\n      },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties\n    );\n  }\n}\n\nexport function newUserDataReader(firestore: Firestore): UserDataReader {\n  const settings = firestore._freezeSettings();\n  const serializer = newSerializer(firestore._databaseId);\n  return new UserDataReader(\n    firestore._databaseId,\n    !!settings.ignoreUndefinedProperties,\n    serializer\n  );\n}\n\n/** Parse document data from a set() call. */\nexport function parseSetData(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  input: unknown,\n  hasConverter: boolean,\n  options: SetOptions = {}\n): ParsedSetData {\n  const context = userDataReader.createContext(\n    options.merge || options.mergeFields\n      ? UserDataSource.MergeSet\n      : UserDataSource.Set,\n    methodName,\n    targetDoc,\n    hasConverter\n  );\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  const updateData = parseObject(input, context)!;\n\n  let fieldMask: FieldMask | null;\n  let fieldTransforms: FieldTransform[];\n\n  if (options.merge) {\n    fieldMask = new FieldMask(context.fieldMask);\n    fieldTransforms = context.fieldTransforms;\n  } else if (options.mergeFields) {\n    const validatedFieldPaths: InternalFieldPath[] = [];\n\n    for (const stringOrFieldPath of options.mergeFields) {\n      const fieldPath = fieldPathFromArgument(\n        methodName,\n        stringOrFieldPath,\n        targetDoc\n      );\n      if (!context.contains(fieldPath)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Field '${fieldPath}' is specified in your field mask but missing from your input data.`\n        );\n      }\n\n      if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\n        validatedFieldPaths.push(fieldPath);\n      }\n    }\n\n    fieldMask = new FieldMask(validatedFieldPaths);\n    fieldTransforms = context.fieldTransforms.filter(transform =>\n      fieldMask!.covers(transform.field)\n    );\n  } else {\n    fieldMask = null;\n    fieldTransforms = context.fieldTransforms;\n  }\n\n  return new ParsedSetData(\n    new ObjectValue(updateData),\n    fieldMask,\n    fieldTransforms\n  );\n}\n\nexport class DeleteFieldValueImpl extends FieldValue {\n  _toFieldTransform(context: ParseContextImpl): null {\n    if (context.dataSource === UserDataSource.MergeSet) {\n      // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n      context.fieldMask.push(context.path!);\n    } else if (context.dataSource === UserDataSource.Update) {\n      debugAssert(\n        context.path!.length > 0,\n        `${this._methodName}() at the top level should have already ` +\n          'been handled.'\n      );\n      throw context.createError(\n        `${this._methodName}() can only appear at the top level ` +\n          'of your update data'\n      );\n    } else {\n      // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n      throw context.createError(\n        `${this._methodName}() cannot be used with set() unless you pass ` +\n          '{merge:true}'\n      );\n    }\n    return null;\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof DeleteFieldValueImpl;\n  }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */\nfunction createSentinelChildContext(\n  fieldValue: FieldValue,\n  context: ParseContextImpl,\n  arrayElement: boolean\n): ParseContextImpl {\n  return new ParseContextImpl(\n    {\n      dataSource: UserDataSource.Argument,\n      targetDoc: context.settings.targetDoc,\n      methodName: fieldValue._methodName,\n      arrayElement\n    },\n    context.databaseId,\n    context.serializer,\n    context.ignoreUndefinedProperties\n  );\n}\n\nexport class ServerTimestampFieldValueImpl extends FieldValue {\n  _toFieldTransform(context: ParseContextImpl): FieldTransform {\n    return new FieldTransform(context.path!, new ServerTimestampTransform());\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof ServerTimestampFieldValueImpl;\n  }\n}\n\nexport class ArrayUnionFieldValueImpl extends FieldValue {\n  constructor(methodName: string, private readonly _elements: unknown[]) {\n    super(methodName);\n  }\n\n  _toFieldTransform(context: ParseContextImpl): FieldTransform {\n    const parseContext = createSentinelChildContext(\n      this,\n      context,\n      /*array=*/ true\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class ArrayRemoveFieldValueImpl extends FieldValue {\n  constructor(methodName: string, readonly _elements: unknown[]) {\n    super(methodName);\n  }\n\n  _toFieldTransform(context: ParseContextImpl): FieldTransform {\n    const parseContext = createSentinelChildContext(\n      this,\n      context,\n      /*array=*/ true\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class NumericIncrementFieldValueImpl extends FieldValue {\n  constructor(methodName: string, private readonly _operand: number) {\n    super(methodName);\n  }\n\n  _toFieldTransform(context: ParseContextImpl): FieldTransform {\n    const numericIncrement = new NumericIncrementTransformOperation(\n      context.serializer,\n      toNumber(context.serializer, this._operand)\n    );\n    return new FieldTransform(context.path!, numericIncrement);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\n/** Parse update data from an update() call. */\nexport function parseUpdateData(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  input: unknown\n): ParsedUpdateData {\n  const context = userDataReader.createContext(\n    UserDataSource.Update,\n    methodName,\n    targetDoc\n  );\n  validatePlainObject('Data must be an object, but it was:', context, input);\n\n  const fieldMaskPaths: InternalFieldPath[] = [];\n  const updateData = ObjectValue.empty();\n  forEach(input as Dict<unknown>, (key, value) => {\n    const path = fieldPathFromDotSeparatedString(methodName, key, targetDoc);\n\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    value = getModularInstance(value);\n\n    const childContext = context.childContextForFieldPath(path);\n    if (value instanceof DeleteFieldValueImpl) {\n      // Add it to the field mask, but don't add anything to updateData.\n      fieldMaskPaths.push(path);\n    } else {\n      const parsedValue = parseData(value, childContext);\n      if (parsedValue != null) {\n        fieldMaskPaths.push(path);\n        updateData.set(path, parsedValue);\n      }\n    }\n  });\n\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */\nexport function parseUpdateVarargs(\n  userDataReader: UserDataReader,\n  methodName: string,\n  targetDoc: DocumentKey,\n  field: string | PublicFieldPath | Compat<PublicFieldPath>,\n  value: unknown,\n  moreFieldsAndValues: unknown[]\n): ParsedUpdateData {\n  const context = userDataReader.createContext(\n    UserDataSource.Update,\n    methodName,\n    targetDoc\n  );\n  const keys = [fieldPathFromArgument(methodName, field, targetDoc)];\n  const values = [value];\n\n  if (moreFieldsAndValues.length % 2 !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() needs to be called with an even number ` +\n        'of arguments that alternate between field names and values.'\n    );\n  }\n\n  for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n    keys.push(\n      fieldPathFromArgument(\n        methodName,\n        moreFieldsAndValues[i] as string | PublicFieldPath\n      )\n    );\n    values.push(moreFieldsAndValues[i + 1]);\n  }\n\n  const fieldMaskPaths: InternalFieldPath[] = [];\n  const updateData = ObjectValue.empty();\n\n  // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n  for (let i = keys.length - 1; i >= 0; --i) {\n    if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\n      const path = keys[i];\n      let value = values[i];\n\n      // For Compat types, we have to \"extract\" the underlying types before\n      // performing validation.\n      value = getModularInstance(value);\n\n      const childContext = context.childContextForFieldPath(path);\n      if (value instanceof DeleteFieldValueImpl) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths.push(path);\n      } else {\n        const parsedValue = parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths.push(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    }\n  }\n\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\nexport function parseQueryValue(\n  userDataReader: UserDataReader,\n  methodName: string,\n  input: unknown,\n  allowArrays = false\n): ProtoValue {\n  const context = userDataReader.createContext(\n    allowArrays ? UserDataSource.ArrayArgument : UserDataSource.Argument,\n    methodName\n  );\n  const parsed = parseData(input, context);\n  debugAssert(parsed != null, 'Parsed data should not be null.');\n  debugAssert(\n    context.fieldTransforms.length === 0,\n    'Field transforms should have been disallowed.'\n  );\n  return parsed;\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nexport function parseData(\n  input: unknown,\n  context: ParseContextImpl\n): ProtoValue | null {\n  // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  input = getModularInstance(input);\n\n  if (looksLikeJsonObject(input)) {\n    validatePlainObject('Unsupported field value:', context, input);\n    return parseObject(input, context);\n  } else if (input instanceof FieldValue) {\n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    parseSentinelFieldValue(input, context);\n    return null;\n  } else if (input === undefined && context.ignoreUndefinedProperties) {\n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n  } else {\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    if (context.path) {\n      context.fieldMask.push(context.path);\n    }\n\n    if (input instanceof Array) {\n      // TODO(b/34871131): Include the path containing the array in the error\n      // message.\n      // In the case of IN queries, the parsed data is an array (representing\n      // the set of values to be included for the IN query) that may directly\n      // contain additional arrays (each representing an individual field\n      // value), so we disable this validation.\n      if (\n        context.settings.arrayElement &&\n        context.dataSource !== UserDataSource.ArrayArgument\n      ) {\n        throw context.createError('Nested arrays are not supported');\n      }\n      return parseArray(input as unknown[], context);\n    } else {\n      return parseScalarValue(input, context);\n    }\n  }\n}\n\nfunction parseObject(\n  obj: Dict<unknown>,\n  context: ParseContextImpl\n): { mapValue: ProtoMapValue } {\n  const fields: Dict<ProtoValue> = {};\n\n  if (isEmpty(obj)) {\n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    if (context.path && context.path.length > 0) {\n      context.fieldMask.push(context.path);\n    }\n  } else {\n    forEach(obj, (key: string, val: unknown) => {\n      const parsedValue = parseData(val, context.childContextForField(key));\n      if (parsedValue != null) {\n        fields[key] = parsedValue;\n      }\n    });\n  }\n\n  return { mapValue: { fields } };\n}\n\nfunction parseArray(array: unknown[], context: ParseContextImpl): ProtoValue {\n  const values: ProtoValue[] = [];\n  let entryIndex = 0;\n  for (const entry of array) {\n    let parsedEntry = parseData(\n      entry,\n      context.childContextForArray(entryIndex)\n    );\n    if (parsedEntry == null) {\n      // Just include nulls in the array for fields being replaced with a\n      // sentinel.\n      parsedEntry = { nullValue: 'NULL_VALUE' };\n    }\n    values.push(parsedEntry);\n    entryIndex++;\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\nfunction parseSentinelFieldValue(\n  value: FieldValue,\n  context: ParseContextImpl\n): void {\n  // Sentinels are only supported with writes, and not within arrays.\n  if (!isWrite(context.dataSource)) {\n    throw context.createError(\n      `${value._methodName}() can only be used with update() and set()`\n    );\n  }\n  if (!context.path) {\n    throw context.createError(\n      `${value._methodName}() is not currently supported inside arrays`\n    );\n  }\n\n  const fieldTransform = value._toFieldTransform(context);\n  if (fieldTransform) {\n    context.fieldTransforms.push(fieldTransform);\n  }\n}\n\n/**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */\nfunction parseScalarValue(\n  value: unknown,\n  context: ParseContextImpl\n): ProtoValue | null {\n  value = getModularInstance(value);\n\n  if (value === null) {\n    return { nullValue: 'NULL_VALUE' };\n  } else if (typeof value === 'number') {\n    return toNumber(context.serializer, value);\n  } else if (typeof value === 'boolean') {\n    return { booleanValue: value };\n  } else if (typeof value === 'string') {\n    return { stringValue: value };\n  } else if (value instanceof Date) {\n    const timestamp = Timestamp.fromDate(value);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof Timestamp) {\n    // Firestore backend truncates precision down to microseconds. To ensure\n    // offline mode works the same with regards to truncation, perform the\n    // truncation immediately without waiting for the backend to do that.\n    const timestamp = new Timestamp(\n      value.seconds,\n      Math.floor(value.nanoseconds / 1000) * 1000\n    );\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof GeoPoint) {\n    return {\n      geoPointValue: {\n        latitude: value.latitude,\n        longitude: value.longitude\n      }\n    };\n  } else if (value instanceof Bytes) {\n    return { bytesValue: toBytes(context.serializer, value._byteString) };\n  } else if (value instanceof DocumentReference) {\n    const thisDb = context.databaseId;\n    const otherDb = value.firestore._databaseId;\n    if (!otherDb.isEqual(thisDb)) {\n      throw context.createError(\n        'Document reference is for database ' +\n          `${otherDb.projectId}/${otherDb.database} but should be ` +\n          `for database ${thisDb.projectId}/${thisDb.database}`\n      );\n    }\n    return {\n      referenceValue: toResourceName(\n        value.firestore._databaseId || context.databaseId,\n        value._key.path\n      )\n    };\n  } else {\n    throw context.createError(\n      `Unsupported field value: ${valueDescription(value)}`\n    );\n  }\n}\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    !(input instanceof Array) &&\n    !(input instanceof Date) &&\n    !(input instanceof Timestamp) &&\n    !(input instanceof GeoPoint) &&\n    !(input instanceof Bytes) &&\n    !(input instanceof DocumentReference) &&\n    !(input instanceof FieldValue)\n  );\n}\n\nfunction validatePlainObject(\n  message: string,\n  context: ParseContextImpl,\n  input: unknown\n): asserts input is Dict<unknown> {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  path: string | PublicFieldPath | Compat<PublicFieldPath>,\n  targetDoc?: DocumentKey\n): InternalFieldPath {\n  // If required, replace the FieldPath Compat class with with the firestore-exp\n  // FieldPath.\n  path = getModularInstance(path);\n\n  if (path instanceof FieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or ';\n    throw createError(\n      message,\n      methodName,\n      /* hasConverter= */ false,\n      /* path= */ undefined,\n      targetDoc\n    );\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst FIELD_PATH_RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */\nexport function fieldPathFromDotSeparatedString(\n  methodName: string,\n  path: string,\n  targetDoc?: DocumentKey\n): InternalFieldPath {\n  const found = path.search(FIELD_PATH_RESERVED);\n  if (found >= 0) {\n    throw createError(\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`,\n      methodName,\n      /* hasConverter= */ false,\n      /* path= */ undefined,\n      targetDoc\n    );\n  }\n\n  try {\n    return new FieldPath(...path.split('.'))._internalPath;\n  } catch (e) {\n    throw createError(\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`,\n      methodName,\n      /* hasConverter= */ false,\n      /* path= */ undefined,\n      targetDoc\n    );\n  }\n}\n\nfunction createError(\n  reason: string,\n  methodName: string,\n  hasConverter: boolean,\n  path?: InternalFieldPath,\n  targetDoc?: DocumentKey\n): FirestoreError {\n  const hasPath = path && !path.isEmpty();\n  const hasDocument = targetDoc !== undefined;\n  let message = `Function ${methodName}() called with invalid data`;\n  if (hasConverter) {\n    message += ' (via `toFirestore()`)';\n  }\n  message += '. ';\n\n  let description = '';\n  if (hasPath || hasDocument) {\n    description += ' (found';\n\n    if (hasPath) {\n      description += ` in field ${path}`;\n    }\n    if (hasDocument) {\n      description += ` in document ${targetDoc}`;\n    }\n    description += ')';\n  }\n\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    message + reason + description\n  );\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction fieldMaskContains(\n  haystack: InternalFieldPath[],\n  needle: InternalFieldPath\n): boolean {\n  return haystack.some(v => v.isEqual(needle));\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Compat, getModularInstance } from '@firebase/util';\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { arrayEquals } from '../util/misc';\n\nimport { Firestore } from './database';\nimport { FieldPath } from './field_path';\nimport {\n  DocumentData,\n  DocumentReference,\n  PartialWithFieldValue,\n  Query,\n  queryEqual,\n  SetOptions,\n  WithFieldValue\n} from './reference';\nimport {\n  fieldPathFromDotSeparatedString,\n  UntypedFirestoreDataConverter\n} from './user_data_reader';\nimport { AbstractUserDataWriter } from './user_data_writer';\n\n/**\n * Converter used by `withConverter()` to transform user objects of type\n * `AppModelType` into Firestore data of type `DbModelType`.\n *\n * Using the converter allows you to specify generic type arguments when\n * storing and retrieving objects from Firestore.\n *\n * @example\n * ```typescript\n * class Post {\n *   constructor(readonly title: string, readonly author: string) {}\n *\n *   toString(): string {\n *     return this.title + ', by ' + this.author;\n *   }\n * }\n *\n * interface PostDbModel {\n *   title: string;\n *   author: string;\n * }\n *\n * const postConverter = {\n *   toFirestore(post: WithFieldValue<Post>): PostDbModel {\n *     return {title: post.title, author: post.author};\n *   },\n *   fromFirestore(snapshot: QueryDocumentSnapshot): Post {\n *     const data = snapshot.data(options) as PostDbModel;\n *     return new Post(data.title, data.author);\n *   }\n * };\n *\n * const postSnap = await firebase.firestore()\n *   .collection('posts')\n *   .withConverter(postConverter)\n *   .doc().get();\n * const post = postSnap.data();\n * if (post !== undefined) {\n *   post.title; // string\n *   post.toString(); // Should be defined\n *   post.someNonExistentProperty; // TS error\n * }\n * ```\n */\nexport interface FirestoreDataConverter<\n  AppModelType,\n  DbModelType extends DocumentData = DocumentData\n> {\n  /**\n   * Called by the Firestore SDK to convert a custom model object of type\n   * `AppModelType` into a plain Javascript object (suitable for writing\n   * directly to the Firestore database) of type `DbModelType`. Used with\n   * {@link @firebase/firestore/lite#(setDoc:1)},\n   * {@link @firebase/firestore/lite#(WriteBatch.set:1)} and\n   * {@link @firebase/firestore/lite#(Transaction.set:1)}.\n   *\n   * The `WithFieldValue<T>` type extends `T` to also allow FieldValues such as\n   * {@link (deleteField:1)} to be used as property values.\n   */\n  toFirestore(\n    modelObject: WithFieldValue<AppModelType>\n  ): WithFieldValue<DbModelType>;\n\n  /**\n   * Called by the Firestore SDK to convert a custom model object of type\n   * `AppModelType` into a plain Javascript object (suitable for writing\n   * directly to the Firestore database) of type `DbModelType`. Used with\n   * {@link @firebase/firestore/lite#(setDoc:1)},\n   * {@link @firebase/firestore/lite#(WriteBatch.set:1)} and\n   * {@link @firebase/firestore/lite#(Transaction.set:1)} with `merge:true`\n   * or `mergeFields`.\n   *\n   * The `PartialWithFieldValue<T>` type extends `Partial<T>` to allow\n   * FieldValues such as {@link (arrayUnion:1)} to be used as property values.\n   * It also supports nested `Partial` by allowing nested fields to be\n   * omitted.\n   */\n  toFirestore(\n    modelObject: PartialWithFieldValue<AppModelType>,\n    options: SetOptions\n  ): PartialWithFieldValue<DbModelType>;\n\n  /**\n   * Called by the Firestore SDK to convert Firestore data into an object of\n   * type `AppModelType`. You can access your data by calling:\n   * `snapshot.data()`.\n   *\n   * Generally, the data returned from `snapshot.data()` can be cast to\n   * `DbModelType`; however, this is not guaranteed as writes to the database\n   * may have occurred without a type converter enforcing this specific layout.\n   *\n   * @param snapshot - A `QueryDocumentSnapshot` containing your data and\n   * metadata.\n   */\n  fromFirestore(\n    snapshot: QueryDocumentSnapshot<DocumentData, DocumentData>\n  ): AppModelType;\n}\n\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */\nexport class DocumentSnapshot<\n  AppModelType = DocumentData,\n  DbModelType extends DocumentData = DocumentData\n> {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n\n  /** @hideconstructor protected */\n  constructor(\n    public _firestore: Firestore,\n    public _userDataWriter: AbstractUserDataWriter,\n    public _key: DocumentKey,\n    public _document: Document | null,\n    public _converter: UntypedFirestoreDataConverter<\n      AppModelType,\n      DbModelType\n    > | null\n  ) {}\n\n  /** Property of the `DocumentSnapshot` that provides the document's ID. */\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  /**\n   * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n   */\n  get ref(): DocumentReference<AppModelType, DbModelType> {\n    return new DocumentReference<AppModelType, DbModelType>(\n      this._firestore,\n      this._converter,\n      this._key\n    );\n  }\n\n  /**\n   * Signals whether or not the document at the snapshot's location exists.\n   *\n   * @returns true if the document exists.\n   */\n  exists(): this is QueryDocumentSnapshot<AppModelType, DbModelType> {\n    return this._document !== null;\n  }\n\n  /**\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n   * the document doesn't exist.\n   *\n   * @returns An `Object` containing all fields in the document or `undefined`\n   * if the document doesn't exist.\n   */\n  data(): AppModelType | undefined {\n    if (!this._document) {\n      return undefined;\n    } else if (this._converter) {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      const snapshot = new QueryDocumentSnapshot(\n        this._firestore,\n        this._userDataWriter,\n        this._key,\n        this._document,\n        /* converter= */ null\n      );\n      return this._converter.fromFirestore(snapshot);\n    } else {\n      return this._userDataWriter.convertValue(\n        this._document.data.value\n      ) as AppModelType;\n    }\n  }\n\n  /**\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n   * document or field doesn't exist.\n   *\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n   * field.\n   * @returns The data at the specified field location or undefined if no such\n   * field exists in the document.\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(fieldPath: string | FieldPath): any {\n    if (this._document) {\n      const value = this._document.data.field(\n        fieldPathFromArgument('DocumentSnapshot.get', fieldPath)\n      );\n      if (value !== null) {\n        return this._userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */\nexport class QueryDocumentSnapshot<\n  AppModelType = DocumentData,\n  DbModelType extends DocumentData = DocumentData\n> extends DocumentSnapshot<AppModelType, DbModelType> {\n  /**\n   * Retrieves all fields in the document as an `Object`.\n   *\n   * @override\n   * @returns An `Object` containing all fields in the document.\n   */\n  data(): AppModelType {\n    return super.data() as AppModelType;\n  }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */\nexport class QuerySnapshot<\n  AppModelType = DocumentData,\n  DbModelType extends DocumentData = DocumentData\n> {\n  /**\n   * The query on which you called {@link getDocs} in order to get this\n   * `QuerySnapshot`.\n   */\n  readonly query: Query<AppModelType, DbModelType>;\n\n  /** @hideconstructor */\n  constructor(\n    _query: Query<AppModelType, DbModelType>,\n    readonly _docs: Array<QueryDocumentSnapshot<AppModelType, DbModelType>>\n  ) {\n    this.query = _query;\n  }\n\n  /** An array of all the documents in the `QuerySnapshot`. */\n  get docs(): Array<QueryDocumentSnapshot<AppModelType, DbModelType>> {\n    return [...this._docs];\n  }\n\n  /** The number of documents in the `QuerySnapshot`. */\n  get size(): number {\n    return this.docs.length;\n  }\n\n  /** True if there are no documents in the `QuerySnapshot`. */\n  get empty(): boolean {\n    return this.docs.length === 0;\n  }\n\n  /**\n   * Enumerates all of the documents in the `QuerySnapshot`.\n   *\n   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n   * each document in the snapshot.\n   * @param thisArg - The `this` binding for the callback.\n   */\n  forEach(\n    callback: (\n      result: QueryDocumentSnapshot<AppModelType, DbModelType>\n    ) => void,\n    thisArg?: unknown\n  ): void {\n    this._docs.forEach(callback, thisArg);\n  }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */\nexport function snapshotEqual<AppModelType, DbModelType extends DocumentData>(\n  left:\n    | DocumentSnapshot<AppModelType, DbModelType>\n    | QuerySnapshot<AppModelType, DbModelType>,\n  right:\n    | DocumentSnapshot<AppModelType, DbModelType>\n    | QuerySnapshot<AppModelType, DbModelType>\n): boolean {\n  left = getModularInstance(left);\n  right = getModularInstance(right);\n\n  if (left instanceof DocumentSnapshot && right instanceof DocumentSnapshot) {\n    return (\n      left._firestore === right._firestore &&\n      left._key.isEqual(right._key) &&\n      (left._document === null\n        ? right._document === null\n        : left._document.isEqual(right._document)) &&\n      left._converter === right._converter\n    );\n  } else if (left instanceof QuerySnapshot && right instanceof QuerySnapshot) {\n    return (\n      queryEqual(left.query, right.query) &&\n      arrayEquals(left.docs, right.docs, snapshotEqual)\n    );\n  }\n\n  return false;\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  arg: string | FieldPath | Compat<FieldPath>\n): InternalFieldPath {\n  if (typeof arg === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, arg);\n  } else if (arg instanceof FieldPath) {\n    return arg._internalPath;\n  } else {\n    return arg._delegate._internalPath;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance } from '@firebase/util';\n\nimport { Bound } from '../core/bound';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  CompositeFilter,\n  CompositeOperator,\n  FieldFilter,\n  Filter,\n  Operator\n} from '../core/filter';\nimport { Direction, OrderBy } from '../core/order_by';\nimport {\n  isCollectionGroupQuery,\n  LimitType,\n  Query as InternalQuery,\n  queryNormalizedOrderBy,\n  queryWithAddedFilter,\n  queryWithAddedOrderBy,\n  queryWithEndAt,\n  queryWithLimit,\n  queryWithStartAt\n} from '../core/query';\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { FieldPath as InternalFieldPath, ResourcePath } from '../model/path';\nimport { isServerTimestamp } from '../model/server_timestamps';\nimport { refValue } from '../model/values';\nimport { Value as ProtoValue } from '../protos/firestore_proto_api';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validatePositiveNumber,\n  valueDescription\n} from '../util/input_validation';\n\nimport { FieldPath } from './field_path';\nimport { DocumentData, DocumentReference, Query } from './reference';\nimport { DocumentSnapshot, fieldPathFromArgument } from './snapshot';\nimport {\n  newUserDataReader,\n  parseQueryValue,\n  UserDataReader\n} from './user_data_reader';\n\nexport function validateHasExplicitOrderByForLimitToLast(\n  query: InternalQuery\n): void {\n  if (\n    query.limitType === LimitType.Last &&\n    query.explicitOrderBy.length === 0\n  ) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'limitToLast() queries require specifying at least one orderBy() clause'\n    );\n  }\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'where'\n  | 'orderBy'\n  | 'limit'\n  | 'limitToLast'\n  | 'startAt'\n  | 'startAfter'\n  | 'endAt'\n  | 'endBefore';\n\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nexport abstract class AppliableConstraint {\n  /**\n   * Takes the provided {@link Query} and returns a copy of the {@link Query} with this\n   * {@link AppliableConstraint} applied.\n   */\n  abstract _apply<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): Query<AppModelType, DbModelType>;\n}\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint extends AppliableConstraint {\n  /** The type of this query constraint */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided {@link Query} and returns a copy of the {@link Query} with this\n   * {@link AppliableConstraint} applied.\n   */\n  abstract _apply<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): Query<AppModelType, DbModelType>;\n}\n\n/**\n * Creates a new immutable instance of {@link Query} that is extended to also\n * include additional query constraints.\n *\n * @param query - The {@link Query} instance to use as a base for the new\n * constraints.\n * @param compositeFilter - The {@link QueryCompositeFilterConstraint} to\n * apply. Create {@link QueryCompositeFilterConstraint} using {@link and} or\n * {@link or}.\n * @param queryConstraints - Additional {@link QueryNonFilterConstraint}s to\n * apply (e.g. {@link orderBy}, {@link limit}).\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query<AppModelType, DbModelType extends DocumentData>(\n  query: Query<AppModelType, DbModelType>,\n  compositeFilter: QueryCompositeFilterConstraint,\n  ...queryConstraints: QueryNonFilterConstraint[]\n): Query<AppModelType, DbModelType>;\n\n/**\n * Creates a new immutable instance of {@link Query} that is extended to also\n * include additional query constraints.\n *\n * @param query - The {@link Query} instance to use as a base for the new\n * constraints.\n * @param queryConstraints - The list of {@link QueryConstraint}s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query<AppModelType, DbModelType extends DocumentData>(\n  query: Query<AppModelType, DbModelType>,\n  ...queryConstraints: QueryConstraint[]\n): Query<AppModelType, DbModelType>;\n\nexport function query<AppModelType, DbModelType extends DocumentData>(\n  query: Query<AppModelType, DbModelType>,\n  queryConstraint: QueryCompositeFilterConstraint | QueryConstraint | undefined,\n  ...additionalQueryConstraints: Array<\n    QueryConstraint | QueryNonFilterConstraint\n  >\n): Query<AppModelType, DbModelType> {\n  let queryConstraints: AppliableConstraint[] = [];\n\n  if (queryConstraint instanceof AppliableConstraint) {\n    queryConstraints.push(queryConstraint);\n  }\n\n  queryConstraints = queryConstraints.concat(additionalQueryConstraints);\n\n  validateQueryConstraintArray(queryConstraints);\n\n  for (const constraint of queryConstraints) {\n    query = constraint._apply(query);\n  }\n  return query;\n}\n\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */\nexport class QueryFieldFilterConstraint extends QueryConstraint {\n  /** The type of this query constraint */\n  readonly type = 'where';\n\n  /**\n   * @internal\n   */\n  protected constructor(\n    private readonly _field: InternalFieldPath,\n    private _op: Operator,\n    private _value: unknown\n  ) {\n    super();\n  }\n\n  static _create(\n    _field: InternalFieldPath,\n    _op: Operator,\n    _value: unknown\n  ): QueryFieldFilterConstraint {\n    return new QueryFieldFilterConstraint(_field, _op, _value);\n  }\n\n  _apply<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): Query<AppModelType, DbModelType> {\n    const filter = this._parse(query);\n    validateNewFieldFilter(query._query, filter);\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithAddedFilter(query._query, filter)\n    );\n  }\n\n  _parse<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): FieldFilter {\n    const reader = newUserDataReader(query.firestore);\n    const filter = newQueryFilter(\n      query._query,\n      'where',\n      reader,\n      query.firestore._databaseId,\n      this._field,\n      this._op,\n      this._value\n    );\n    return filter;\n  }\n}\n\n/**\n * Filter conditions in a {@link where} clause are specified using the\n * strings '&lt;', '&lt;=', '==', '!=', '&gt;=', '&gt;', 'array-contains', 'in',\n * 'array-contains-any', and 'not-in'.\n */\nexport type WhereFilterOp =\n  | '<'\n  | '<='\n  | '=='\n  | '!='\n  | '>='\n  | '>'\n  | 'array-contains'\n  | 'in'\n  | 'array-contains-any'\n  | 'not-in';\n\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */\nexport function where(\n  fieldPath: string | FieldPath,\n  opStr: WhereFilterOp,\n  value: unknown\n): QueryFieldFilterConstraint {\n  const op = opStr as Operator;\n  const field = fieldPathFromArgument('where', fieldPath);\n  return QueryFieldFilterConstraint._create(field, op, value);\n}\n\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */\nexport class QueryCompositeFilterConstraint extends AppliableConstraint {\n  /**\n   * @internal\n   */\n  protected constructor(\n    /** The type of this query constraint */\n    readonly type: 'or' | 'and',\n    private readonly _queryConstraints: QueryFilterConstraint[]\n  ) {\n    super();\n  }\n\n  static _create(\n    type: 'or' | 'and',\n    _queryConstraints: QueryFilterConstraint[]\n  ): QueryCompositeFilterConstraint {\n    return new QueryCompositeFilterConstraint(type, _queryConstraints);\n  }\n\n  _parse<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): Filter {\n    const parsedFilters = this._queryConstraints\n      .map(queryConstraint => {\n        return queryConstraint._parse(query);\n      })\n      .filter(parsedFilter => parsedFilter.getFilters().length > 0);\n\n    if (parsedFilters.length === 1) {\n      return parsedFilters[0];\n    }\n\n    return CompositeFilter.create(parsedFilters, this._getOperator());\n  }\n\n  _apply<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): Query<AppModelType, DbModelType> {\n    const parsedFilter = this._parse(query);\n    if (parsedFilter.getFilters().length === 0) {\n      // Return the existing query if not adding any more filters (e.g. an empty\n      // composite filter).\n      return query;\n    }\n    validateNewFilter(query._query, parsedFilter);\n\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithAddedFilter(query._query, parsedFilter)\n    );\n  }\n\n  _getQueryConstraints(): readonly AppliableConstraint[] {\n    return this._queryConstraints;\n  }\n\n  _getOperator(): CompositeOperator {\n    return this.type === 'and' ? CompositeOperator.AND : CompositeOperator.OR;\n  }\n}\n\n/**\n * `QueryNonFilterConstraint` is a helper union type that represents\n * QueryConstraints which are used to narrow or order the set of documents,\n * but that do not explicitly filter on a document field.\n * `QueryNonFilterConstraint`s are created by invoking {@link orderBy},\n * {@link (startAt:1)}, {@link (startAfter:1)}, {@link (endBefore:1)}, {@link (endAt:1)},\n * {@link limit} or {@link limitToLast} and can then be passed to {@link (query:1)}\n * to create a new query instance that also contains the `QueryConstraint`.\n */\nexport type QueryNonFilterConstraint =\n  | QueryOrderByConstraint\n  | QueryLimitConstraint\n  | QueryStartAtConstraint\n  | QueryEndAtConstraint;\n\n/**\n * `QueryFilterConstraint` is a helper union type that represents\n * {@link QueryFieldFilterConstraint} and {@link QueryCompositeFilterConstraint}.\n */\nexport type QueryFilterConstraint =\n  | QueryFieldFilterConstraint\n  | QueryCompositeFilterConstraint;\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\nexport function or(\n  ...queryConstraints: QueryFilterConstraint[]\n): QueryCompositeFilterConstraint {\n  // Only support QueryFilterConstraints\n  queryConstraints.forEach(queryConstraint =>\n    validateQueryFilterConstraint('or', queryConstraint)\n  );\n\n  return QueryCompositeFilterConstraint._create(\n    CompositeOperator.OR,\n    queryConstraints as QueryFilterConstraint[]\n  );\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\nexport function and(\n  ...queryConstraints: QueryFilterConstraint[]\n): QueryCompositeFilterConstraint {\n  // Only support QueryFilterConstraints\n  queryConstraints.forEach(queryConstraint =>\n    validateQueryFilterConstraint('and', queryConstraint)\n  );\n\n  return QueryCompositeFilterConstraint._create(\n    CompositeOperator.AND,\n    queryConstraints as QueryFilterConstraint[]\n  );\n}\n\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */\nexport class QueryOrderByConstraint extends QueryConstraint {\n  /** The type of this query constraint */\n  readonly type = 'orderBy';\n\n  /**\n   * @internal\n   */\n  protected constructor(\n    private readonly _field: InternalFieldPath,\n    private _direction: Direction\n  ) {\n    super();\n  }\n\n  static _create(\n    _field: InternalFieldPath,\n    _direction: Direction\n  ): QueryOrderByConstraint {\n    return new QueryOrderByConstraint(_field, _direction);\n  }\n\n  _apply<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): Query<AppModelType, DbModelType> {\n    const orderBy = newQueryOrderBy(query._query, this._field, this._direction);\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithAddedOrderBy(query._query, orderBy)\n    );\n  }\n}\n\n/**\n * The direction of a {@link orderBy} clause is specified as 'desc' or 'asc'\n * (descending or ascending).\n */\nexport type OrderByDirection = 'desc' | 'asc';\n\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */\nexport function orderBy(\n  fieldPath: string | FieldPath,\n  directionStr: OrderByDirection = 'asc'\n): QueryOrderByConstraint {\n  const direction = directionStr as Direction;\n  const path = fieldPathFromArgument('orderBy', fieldPath);\n  return QueryOrderByConstraint._create(path, direction);\n}\n\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */\nexport class QueryLimitConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  protected constructor(\n    /** The type of this query constraint */\n    readonly type: 'limit' | 'limitToLast',\n    private readonly _limit: number,\n    private readonly _limitType: LimitType\n  ) {\n    super();\n  }\n\n  static _create(\n    type: 'limit' | 'limitToLast',\n    _limit: number,\n    _limitType: LimitType\n  ): QueryLimitConstraint {\n    return new QueryLimitConstraint(type, _limit, _limitType);\n  }\n\n  _apply<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): Query<AppModelType, DbModelType> {\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithLimit(query._query, this._limit, this._limitType)\n    );\n  }\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nexport function limit(limit: number): QueryLimitConstraint {\n  validatePositiveNumber('limit', limit);\n  return QueryLimitConstraint._create('limit', limit, LimitType.First);\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nexport function limitToLast(limit: number): QueryLimitConstraint {\n  validatePositiveNumber('limitToLast', limit);\n  return QueryLimitConstraint._create('limitToLast', limit, LimitType.Last);\n}\n\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */\nexport class QueryStartAtConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  protected constructor(\n    /** The type of this query constraint */\n    readonly type: 'startAt' | 'startAfter',\n    private readonly _docOrFields: Array<unknown | DocumentSnapshot<unknown>>,\n    private readonly _inclusive: boolean\n  ) {\n    super();\n  }\n\n  static _create(\n    type: 'startAt' | 'startAfter',\n    _docOrFields: Array<unknown | DocumentSnapshot<unknown>>,\n    _inclusive: boolean\n  ): QueryStartAtConstraint {\n    return new QueryStartAtConstraint(type, _docOrFields, _inclusive);\n  }\n\n  _apply<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): Query<AppModelType, DbModelType> {\n    const bound = newQueryBoundFromDocOrFields(\n      query,\n      this.type,\n      this._docOrFields,\n      this._inclusive\n    );\n    return new Query<AppModelType, DbModelType>(\n      query.firestore,\n      query.converter,\n      queryWithStartAt(query._query, bound)\n    );\n  }\n}\n\n/**\n * Creates a {@link QueryStartAtConstraint} that modifies the result set to\n * start at the provided document (inclusive). The starting position is relative\n * to the order of the query. The document must contain all of the fields\n * provided in the `orderBy` of this query.\n *\n * @param snapshot - The snapshot of the document to start at.\n * @returns A {@link QueryStartAtConstraint} to pass to `query()`.\n */\nexport function startAt<AppModelType, DbModelType extends DocumentData>(\n  snapshot: DocumentSnapshot<AppModelType, DbModelType>\n): QueryStartAtConstraint;\n/**\n * Creates a {@link QueryStartAtConstraint} that modifies the result set to\n * start at the provided fields relative to the order of the query. The order of\n * the field values must match the order of the order by clauses of the query.\n *\n * @param fieldValues - The field values to start this query at, in order\n * of the query's order by.\n * @returns A {@link QueryStartAtConstraint} to pass to `query()`.\n */\nexport function startAt(...fieldValues: unknown[]): QueryStartAtConstraint;\nexport function startAt<AppModelType, DbModelType extends DocumentData>(\n  ...docOrFields: Array<unknown | DocumentSnapshot<AppModelType, DbModelType>>\n): QueryStartAtConstraint {\n  return QueryStartAtConstraint._create(\n    'startAt',\n    docOrFields,\n    /*inclusive=*/ true\n  );\n}\n\n/**\n * Creates a {@link QueryStartAtConstraint} that modifies the result set to\n * start after the provided document (exclusive). The starting position is\n * relative to the order of the query. The document must contain all of the\n * fields provided in the orderBy of the query.\n *\n * @param snapshot - The snapshot of the document to start after.\n * @returns A {@link QueryStartAtConstraint} to pass to `query()`\n */\nexport function startAfter<AppModelType, DbModelType extends DocumentData>(\n  snapshot: DocumentSnapshot<AppModelType, DbModelType>\n): QueryStartAtConstraint;\n/**\n * Creates a {@link QueryStartAtConstraint} that modifies the result set to\n * start after the provided fields relative to the order of the query. The order\n * of the field values must match the order of the order by clauses of the query.\n *\n * @param fieldValues - The field values to start this query after, in order\n * of the query's order by.\n * @returns A {@link QueryStartAtConstraint} to pass to `query()`\n */\nexport function startAfter(...fieldValues: unknown[]): QueryStartAtConstraint;\nexport function startAfter<AppModelType, DbModelType extends DocumentData>(\n  ...docOrFields: Array<unknown | DocumentSnapshot<AppModelType, DbModelType>>\n): QueryStartAtConstraint {\n  return QueryStartAtConstraint._create(\n    'startAfter',\n    docOrFields,\n    /*inclusive=*/ false\n  );\n}\n\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */\nexport class QueryEndAtConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  protected constructor(\n    /** The type of this query constraint */\n    readonly type: 'endBefore' | 'endAt',\n    private readonly _docOrFields: Array<unknown | DocumentSnapshot<unknown>>,\n    private readonly _inclusive: boolean\n  ) {\n    super();\n  }\n\n  static _create(\n    type: 'endBefore' | 'endAt',\n    _docOrFields: Array<unknown | DocumentSnapshot<unknown>>,\n    _inclusive: boolean\n  ): QueryEndAtConstraint {\n    return new QueryEndAtConstraint(type, _docOrFields, _inclusive);\n  }\n\n  _apply<AppModelType, DbModelType extends DocumentData>(\n    query: Query<AppModelType, DbModelType>\n  ): Query<AppModelType, DbModelType> {\n    const bound = newQueryBoundFromDocOrFields(\n      query,\n      this.type,\n      this._docOrFields,\n      this._inclusive\n    );\n    return new Query(\n      query.firestore,\n      query.converter,\n      queryWithEndAt(query._query, bound)\n    );\n  }\n}\n\n/**\n * Creates a {@link QueryEndAtConstraint} that modifies the result set to end\n * before the provided document (exclusive). The end position is relative to the\n * order of the query. The document must contain all of the fields provided in\n * the orderBy of the query.\n *\n * @param snapshot - The snapshot of the document to end before.\n * @returns A {@link QueryEndAtConstraint} to pass to `query()`\n */\nexport function endBefore<AppModelType, DbModelType extends DocumentData>(\n  snapshot: DocumentSnapshot<AppModelType, DbModelType>\n): QueryEndAtConstraint;\n/**\n * Creates a {@link QueryEndAtConstraint} that modifies the result set to end\n * before the provided fields relative to the order of the query. The order of\n * the field values must match the order of the order by clauses of the query.\n *\n * @param fieldValues - The field values to end this query before, in order\n * of the query's order by.\n * @returns A {@link QueryEndAtConstraint} to pass to `query()`\n */\nexport function endBefore(...fieldValues: unknown[]): QueryEndAtConstraint;\nexport function endBefore<AppModelType, DbModelType extends DocumentData>(\n  ...docOrFields: Array<unknown | DocumentSnapshot<AppModelType, DbModelType>>\n): QueryEndAtConstraint {\n  return QueryEndAtConstraint._create(\n    'endBefore',\n    docOrFields,\n    /*inclusive=*/ false\n  );\n}\n\n/**\n * Creates a {@link QueryEndAtConstraint} that modifies the result set to end at\n * the provided document (inclusive). The end position is relative to the order\n * of the query. The document must contain all of the fields provided in the\n * orderBy of the query.\n *\n * @param snapshot - The snapshot of the document to end at.\n * @returns A {@link QueryEndAtConstraint} to pass to `query()`\n */\nexport function endAt<AppModelType, DbModelType extends DocumentData>(\n  snapshot: DocumentSnapshot<AppModelType, DbModelType>\n): QueryEndAtConstraint;\n/**\n * Creates a {@link QueryEndAtConstraint} that modifies the result set to end at\n * the provided fields relative to the order of the query. The order of the field\n * values must match the order of the order by clauses of the query.\n *\n * @param fieldValues - The field values to end this query at, in order\n * of the query's order by.\n * @returns A {@link QueryEndAtConstraint} to pass to `query()`\n */\nexport function endAt(...fieldValues: unknown[]): QueryEndAtConstraint;\nexport function endAt<AppModelType, DbModelType extends DocumentData>(\n  ...docOrFields: Array<unknown | DocumentSnapshot<AppModelType, DbModelType>>\n): QueryEndAtConstraint {\n  return QueryEndAtConstraint._create(\n    'endAt',\n    docOrFields,\n    /*inclusive=*/ true\n  );\n}\n\n/** Helper function to create a bound from a document or fields */\nfunction newQueryBoundFromDocOrFields<\n  AppModelType,\n  DbModelType extends DocumentData\n>(\n  query: Query<AppModelType, DbModelType>,\n  methodName: string,\n  docOrFields: Array<unknown | DocumentSnapshot<AppModelType, DbModelType>>,\n  inclusive: boolean\n): Bound {\n  docOrFields[0] = getModularInstance(docOrFields[0]);\n\n  if (docOrFields[0] instanceof DocumentSnapshot) {\n    return newQueryBoundFromDocument(\n      query._query,\n      query.firestore._databaseId,\n      methodName,\n      docOrFields[0]._document,\n      inclusive\n    );\n  } else {\n    const reader = newUserDataReader(query.firestore);\n    return newQueryBoundFromFields(\n      query._query,\n      query.firestore._databaseId,\n      reader,\n      methodName,\n      docOrFields,\n      inclusive\n    );\n  }\n}\n\nexport function newQueryFilter(\n  query: InternalQuery,\n  methodName: string,\n  dataReader: UserDataReader,\n  databaseId: DatabaseId,\n  fieldPath: InternalFieldPath,\n  op: Operator,\n  value: unknown\n): FieldFilter {\n  let fieldValue: ProtoValue;\n  if (fieldPath.isKeyField()) {\n    if (op === Operator.ARRAY_CONTAINS || op === Operator.ARRAY_CONTAINS_ANY) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. You can't perform '${op}' queries on documentId().`\n      );\n    } else if (op === Operator.IN || op === Operator.NOT_IN) {\n      validateDisjunctiveFilterElements(value, op);\n      const referenceList: ProtoValue[] = [];\n      for (const arrayValue of value as ProtoValue[]) {\n        referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));\n      }\n      fieldValue = { arrayValue: { values: referenceList } };\n    } else {\n      fieldValue = parseDocumentIdValue(databaseId, query, value);\n    }\n  } else {\n    if (\n      op === Operator.IN ||\n      op === Operator.NOT_IN ||\n      op === Operator.ARRAY_CONTAINS_ANY\n    ) {\n      validateDisjunctiveFilterElements(value, op);\n    }\n    fieldValue = parseQueryValue(\n      dataReader,\n      methodName,\n      value,\n      /* allowArrays= */ op === Operator.IN || op === Operator.NOT_IN\n    );\n  }\n  const filter = FieldFilter.create(fieldPath, op, fieldValue);\n  return filter;\n}\n\nexport function newQueryOrderBy(\n  query: InternalQuery,\n  fieldPath: InternalFieldPath,\n  direction: Direction\n): OrderBy {\n  if (query.startAt !== null) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid query. You must not call startAt() or startAfter() before ' +\n        'calling orderBy().'\n    );\n  }\n  if (query.endAt !== null) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid query. You must not call endAt() or endBefore() before ' +\n        'calling orderBy().'\n    );\n  }\n  const orderBy = new OrderBy(fieldPath, direction);\n  return orderBy;\n}\n\n/**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */\nexport function newQueryBoundFromDocument(\n  query: InternalQuery,\n  databaseId: DatabaseId,\n  methodName: string,\n  doc: Document | null,\n  inclusive: boolean\n): Bound {\n  if (!doc) {\n    throw new FirestoreError(\n      Code.NOT_FOUND,\n      `Can't use a DocumentSnapshot that doesn't exist for ` +\n        `${methodName}().`\n    );\n  }\n\n  const components: ProtoValue[] = [];\n\n  // Because people expect to continue/end a query at the exact document\n  // provided, we need to use the implicit sort order rather than the explicit\n  // sort order, because it's guaranteed to contain the document key. That way\n  // the position becomes unambiguous and the query continues/ends exactly at\n  // the provided document. Without the key (by using the explicit sort\n  // orders), multiple documents could match the position, yielding duplicate\n  // results.\n  for (const orderBy of queryNormalizedOrderBy(query)) {\n    if (orderBy.field.isKeyField()) {\n      components.push(refValue(databaseId, doc.key));\n    } else {\n      const value = doc.data.field(orderBy.field);\n      if (isServerTimestamp(value)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. You are trying to start or end a query using a ' +\n            'document for which the field \"' +\n            orderBy.field +\n            '\" is an uncommitted server timestamp. (Since the value of ' +\n            'this field is unknown, you cannot start/end a query with it.)'\n        );\n      } else if (value !== null) {\n        components.push(value);\n      } else {\n        const field = orderBy.field.canonicalString();\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. You are trying to start or end a query using a ` +\n            `document for which the field '${field}' (used as the ` +\n            `orderBy) does not exist.`\n        );\n      }\n    }\n  }\n  return new Bound(components, inclusive);\n}\n\n/**\n * Converts a list of field values to a `Bound` for the given query.\n */\nexport function newQueryBoundFromFields(\n  query: InternalQuery,\n  databaseId: DatabaseId,\n  dataReader: UserDataReader,\n  methodName: string,\n  values: unknown[],\n  inclusive: boolean\n): Bound {\n  // Use explicit order by's because it has to match the query the user made\n  const orderBy = query.explicitOrderBy;\n  if (values.length > orderBy.length) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Too many arguments provided to ${methodName}(). ` +\n        `The number of arguments must be less than or equal to the ` +\n        `number of orderBy() clauses`\n    );\n  }\n\n  const components: ProtoValue[] = [];\n  for (let i = 0; i < values.length; i++) {\n    const rawValue = values[i];\n    const orderByComponent = orderBy[i];\n    if (orderByComponent.field.isKeyField()) {\n      if (typeof rawValue !== 'string') {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. Expected a string for document ID in ` +\n            `${methodName}(), but got a ${typeof rawValue}`\n        );\n      }\n      if (!isCollectionGroupQuery(query) && rawValue.indexOf('/') !== -1) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection and ordering by documentId(), ` +\n            `the value passed to ${methodName}() must be a plain document ID, but ` +\n            `'${rawValue}' contains a slash.`\n        );\n      }\n      const path = query.path.child(ResourcePath.fromString(rawValue));\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection group and ordering by ` +\n            `documentId(), the value passed to ${methodName}() must result in a ` +\n            `valid document path, but '${path}' is not because it contains an odd number ` +\n            `of segments.`\n        );\n      }\n      const key = new DocumentKey(path);\n      components.push(refValue(databaseId, key));\n    } else {\n      const wrapped = parseQueryValue(dataReader, methodName, rawValue);\n      components.push(wrapped);\n    }\n  }\n\n  return new Bound(components, inclusive);\n}\n\n/**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */\nfunction parseDocumentIdValue(\n  databaseId: DatabaseId,\n  query: InternalQuery,\n  documentIdValue: unknown\n): ProtoValue {\n  documentIdValue = getModularInstance(documentIdValue);\n\n  if (typeof documentIdValue === 'string') {\n    if (documentIdValue === '') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. When querying with documentId(), you ' +\n          'must provide a valid document ID, but it was an empty string.'\n      );\n    }\n    if (!isCollectionGroupQuery(query) && documentIdValue.indexOf('/') !== -1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying a collection by ` +\n          `documentId(), you must provide a plain document ID, but ` +\n          `'${documentIdValue}' contains a '/' character.`\n      );\n    }\n    const path = query.path.child(ResourcePath.fromString(documentIdValue));\n    if (!DocumentKey.isDocumentKey(path)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying a collection group by ` +\n          `documentId(), the value provided must result in a valid document path, ` +\n          `but '${path}' is not because it has an odd number of segments (${path.length}).`\n      );\n    }\n    return refValue(databaseId, new DocumentKey(path));\n  } else if (documentIdValue instanceof DocumentReference) {\n    return refValue(databaseId, documentIdValue._key);\n  } else {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid query. When querying with documentId(), you must provide a valid ` +\n        `string or a DocumentReference, but it was: ` +\n        `${valueDescription(documentIdValue)}.`\n    );\n  }\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */\nfunction validateDisjunctiveFilterElements(\n  value: unknown,\n  operator: Operator\n): void {\n  if (!Array.isArray(value) || value.length === 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Invalid Query. A non-empty array is required for ' +\n        `'${operator.toString()}' filters.`\n    );\n  }\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */\nfunction conflictingOps(op: Operator): Operator[] {\n  switch (op) {\n    case Operator.NOT_EQUAL:\n      return [Operator.NOT_EQUAL, Operator.NOT_IN];\n    case Operator.ARRAY_CONTAINS_ANY:\n    case Operator.IN:\n      return [Operator.NOT_IN];\n    case Operator.NOT_IN:\n      return [\n        Operator.ARRAY_CONTAINS_ANY,\n        Operator.IN,\n        Operator.NOT_IN,\n        Operator.NOT_EQUAL\n      ];\n    default:\n      return [];\n  }\n}\n\nfunction validateNewFieldFilter(\n  query: InternalQuery,\n  fieldFilter: FieldFilter\n): void {\n  const conflictingOp = findOpInsideFilters(\n    query.filters,\n    conflictingOps(fieldFilter.op)\n  );\n  if (conflictingOp !== null) {\n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    if (conflictingOp === fieldFilter.op) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You cannot use more than one ' +\n          `'${fieldFilter.op.toString()}' filter.`\n      );\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. You cannot use '${fieldFilter.op.toString()}' filters ` +\n          `with '${conflictingOp.toString()}' filters.`\n      );\n    }\n  }\n}\n\nfunction validateNewFilter(query: InternalQuery, filter: Filter): void {\n  let testQuery = query;\n  const subFilters = filter.getFlattenedFilters();\n  for (const subFilter of subFilters) {\n    validateNewFieldFilter(testQuery, subFilter);\n    testQuery = queryWithAddedFilter(testQuery, subFilter);\n  }\n}\n\n// Checks if any of the provided filter operators are included in the given list of filters and\n// returns the first one that is, or null if none are.\nfunction findOpInsideFilters(\n  filters: Filter[],\n  operators: Operator[]\n): Operator | null {\n  for (const filter of filters) {\n    for (const fieldFilter of filter.getFlattenedFilters()) {\n      if (operators.indexOf(fieldFilter.op) >= 0) {\n        return fieldFilter.op;\n      }\n    }\n  }\n  return null;\n}\n\nexport function validateQueryFilterConstraint(\n  functionName: string,\n  queryConstraint: AppliableConstraint\n): void {\n  if (\n    !(queryConstraint instanceof QueryFieldFilterConstraint) &&\n    !(queryConstraint instanceof QueryCompositeFilterConstraint)\n  ) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`\n    );\n  }\n}\n\nfunction validateQueryConstraintArray(\n  queryConstraint: AppliableConstraint[]\n): void {\n  const compositeFilterCount = queryConstraint.filter(\n    filter => filter instanceof QueryCompositeFilterConstraint\n  ).length;\n  const fieldFilterCount = queryConstraint.filter(\n    filter => filter instanceof QueryFieldFilterConstraint\n  ).length;\n\n  if (\n    compositeFilterCount > 1 ||\n    (compositeFilterCount > 0 && fieldFilterCount > 0)\n  ) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'InvalidQuery. When using composite filters, you cannot use ' +\n        'more than one filter at the top level. Consider nesting the multiple ' +\n        'filters within an `and(...)` statement. For example: ' +\n        'change `query(query, where(...), or(...))` to ' +\n        '`query(query, and(where(...), or(...)))`.'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DocumentData as PublicDocumentData,\n  SetOptions as PublicSetOptions\n} from '@firebase/firestore-types';\nimport { getModularInstance } from '@firebase/util';\n\nimport { LimitType } from '../core/query';\nimport { DeleteMutation, Precondition } from '../model/mutation';\nimport {\n  invokeBatchGetDocumentsRpc,\n  invokeCommitRpc,\n  invokeRunQueryRpc\n} from '../remote/datastore';\nimport { hardAssert } from '../util/assert';\nimport { ByteString } from '../util/byte_string';\nimport { cast } from '../util/input_validation';\n\nimport { Bytes } from './bytes';\nimport { getDatastore } from './components';\nimport { Firestore } from './database';\nimport { FieldPath } from './field_path';\nimport { validateHasExplicitOrderByForLimitToLast } from './query';\nimport {\n  CollectionReference,\n  doc,\n  DocumentData,\n  DocumentReference,\n  PartialWithFieldValue,\n  Query,\n  SetOptions,\n  UpdateData,\n  WithFieldValue\n} from './reference';\nimport {\n  DocumentSnapshot,\n  QueryDocumentSnapshot,\n  QuerySnapshot\n} from './snapshot';\nimport {\n  newUserDataReader,\n  ParsedUpdateData,\n  parseSetData,\n  parseUpdateData,\n  parseUpdateVarargs,\n  UntypedFirestoreDataConverter\n} from './user_data_reader';\nimport { AbstractUserDataWriter } from './user_data_writer';\n\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nexport function applyFirestoreDataConverter<T>(\n  converter: UntypedFirestoreDataConverter<T> | null,\n  value: WithFieldValue<T> | PartialWithFieldValue<T>,\n  options?: PublicSetOptions\n): PublicDocumentData {\n  let convertedValue;\n  if (converter) {\n    if (options && (options.merge || options.mergeFields)) {\n      // Cast to `any` in order to satisfy the union type constraint on\n      // toFirestore().\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      convertedValue = (converter as any).toFirestore(value, options);\n    } else {\n      convertedValue = converter.toFirestore(value as WithFieldValue<T>);\n    }\n  } else {\n    convertedValue = value as PublicDocumentData;\n  }\n  return convertedValue;\n}\n\nexport class LiteUserDataWriter extends AbstractUserDataWriter {\n  constructor(protected firestore: Firestore) {\n    super();\n  }\n\n  protected convertBytes(bytes: ByteString): Bytes {\n    return new Bytes(bytes);\n  }\n\n  protected convertReference(name: string): DocumentReference {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return new DocumentReference(this.firestore, /* converter= */ null, key);\n  }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */\nexport function getDoc<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>\n): Promise<DocumentSnapshot<AppModelType, DbModelType>> {\n  reference = cast<DocumentReference<AppModelType, DbModelType>>(\n    reference,\n    DocumentReference\n  );\n  const datastore = getDatastore(reference.firestore);\n  const userDataWriter = new LiteUserDataWriter(reference.firestore);\n\n  return invokeBatchGetDocumentsRpc(datastore, [reference._key]).then(\n    result => {\n      hardAssert(result.length === 1, 'Expected a single document result');\n      const document = result[0];\n      return new DocumentSnapshot<AppModelType, DbModelType>(\n        reference.firestore,\n        userDataWriter,\n        reference._key,\n        document.isFoundDocument() ? document : null,\n        reference.converter\n      );\n    }\n  );\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */\nexport function getDocs<AppModelType, DbModelType extends DocumentData>(\n  query: Query<AppModelType, DbModelType>\n): Promise<QuerySnapshot<AppModelType, DbModelType>> {\n  query = cast<Query<AppModelType, DbModelType>>(query, Query);\n  validateHasExplicitOrderByForLimitToLast(query._query);\n\n  const datastore = getDatastore(query.firestore);\n  const userDataWriter = new LiteUserDataWriter(query.firestore);\n  return invokeRunQueryRpc(datastore, query._query).then(result => {\n    const docs = result.map(\n      doc =>\n        new QueryDocumentSnapshot<AppModelType, DbModelType>(\n          query.firestore,\n          userDataWriter,\n          doc.key,\n          doc,\n          query.converter\n        )\n    );\n\n    if (query._query.limitType === LimitType.Last) {\n      // Limit to last queries reverse the orderBy constraint that was\n      // specified by the user. As such, we need to reverse the order of the\n      // results to return the documents in the expected order.\n      docs.reverse();\n    }\n\n    return new QuerySnapshot<AppModelType, DbModelType>(query, docs);\n  });\n}\n\n/**\n * Writes to the document referred to by the specified `DocumentReference`. If\n * the document does not yet exist, it will be created.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to write.\n * @param data - A map of the fields and values for the document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved once the data has been successfully written\n * to the backend.\n */\nexport function setDoc<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>,\n  data: WithFieldValue<AppModelType>\n): Promise<void>;\n/**\n * Writes to the document referred to by the specified `DocumentReference`. If\n * the document does not yet exist, it will be created. If you provide `merge`\n * or `mergeFields`, the provided data can be merged into an existing document.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to write.\n * @param data - A map of the fields and values for the document.\n * @param options - An object to configure the set behavior.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved once the data has been successfully written\n * to the backend.\n */\nexport function setDoc<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>,\n  data: PartialWithFieldValue<AppModelType>,\n  options: SetOptions\n): Promise<void>;\nexport function setDoc<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>,\n  data: PartialWithFieldValue<AppModelType>,\n  options?: SetOptions\n): Promise<void> {\n  reference = cast<DocumentReference<AppModelType, DbModelType>>(\n    reference,\n    DocumentReference\n  );\n  const convertedValue = applyFirestoreDataConverter(\n    reference.converter,\n    data,\n    options\n  );\n  const dataReader = newUserDataReader(reference.firestore);\n  const parsed = parseSetData(\n    dataReader,\n    'setDoc',\n    reference._key,\n    convertedValue,\n    reference.converter !== null,\n    options\n  );\n\n  const datastore = getDatastore(reference.firestore);\n  return invokeCommitRpc(datastore, [\n    parsed.toMutation(reference._key, Precondition.none())\n  ]);\n}\n\n/**\n * Updates fields in the document referred to by the specified\n * `DocumentReference`. The update will fail if applied to a document that does\n * not exist.\n *\n * The result of this update will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * update fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to update.\n * @param data - An object containing the fields and values with which to\n * update the document. Fields can contain dots to reference nested fields\n * within the document.\n * @throws Error - If the provided input is not valid Firestore data.\n * @returns A `Promise` resolved once the data has been successfully written\n * to the backend.\n */\nexport function updateDoc<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>,\n  data: UpdateData<DbModelType>\n): Promise<void>;\n/**\n * Updates fields in the document referred to by the specified\n * `DocumentReference` The update will fail if applied to a document that does\n * not exist.\n *\n * Nested fields can be updated by providing dot-separated field path\n * strings or by providing `FieldPath` objects.\n *\n * The result of this update will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * update fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to update.\n * @param field - The first field to update.\n * @param value - The first value.\n * @param moreFieldsAndValues - Additional key value pairs.\n * @throws Error - If the provided input is not valid Firestore data.\n * @returns A `Promise` resolved once the data has been successfully written\n * to the backend.\n */\nexport function updateDoc<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>,\n  field: string | FieldPath,\n  value: unknown,\n  ...moreFieldsAndValues: unknown[]\n): Promise<void>;\nexport function updateDoc<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>,\n  fieldOrUpdateData: string | FieldPath | UpdateData<DbModelType>,\n  value?: unknown,\n  ...moreFieldsAndValues: unknown[]\n): Promise<void> {\n  reference = cast<DocumentReference<AppModelType, DbModelType>>(\n    reference,\n    DocumentReference\n  );\n  const dataReader = newUserDataReader(reference.firestore);\n\n  // For Compat types, we have to \"extract\" the underlying types before\n  // performing validation.\n  fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\n\n  let parsed: ParsedUpdateData;\n  if (\n    typeof fieldOrUpdateData === 'string' ||\n    fieldOrUpdateData instanceof FieldPath\n  ) {\n    parsed = parseUpdateVarargs(\n      dataReader,\n      'updateDoc',\n      reference._key,\n      fieldOrUpdateData,\n      value,\n      moreFieldsAndValues\n    );\n  } else {\n    parsed = parseUpdateData(\n      dataReader,\n      'updateDoc',\n      reference._key,\n      fieldOrUpdateData\n    );\n  }\n\n  const datastore = getDatastore(reference.firestore);\n  return invokeCommitRpc(datastore, [\n    parsed.toMutation(reference._key, Precondition.exists(true))\n  ]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */\nexport function deleteDoc<AppModelType, DbModelType extends DocumentData>(\n  reference: DocumentReference<AppModelType, DbModelType>\n): Promise<void> {\n  reference = cast<DocumentReference<AppModelType, DbModelType>>(\n    reference,\n    DocumentReference\n  );\n  const datastore = getDatastore(reference.firestore);\n  return invokeCommitRpc(datastore, [\n    new DeleteMutation(reference._key, Precondition.none())\n  ]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */\nexport function addDoc<AppModelType, DbModelType extends DocumentData>(\n  reference: CollectionReference<AppModelType, DbModelType>,\n  data: WithFieldValue<AppModelType>\n): Promise<DocumentReference<AppModelType, DbModelType>> {\n  reference = cast<CollectionReference<AppModelType, DbModelType>>(\n    reference,\n    CollectionReference\n  );\n  const docRef = doc(reference);\n\n  const convertedValue = applyFirestoreDataConverter(\n    reference.converter,\n    data as PartialWithFieldValue<AppModelType>\n  );\n\n  const dataReader = newUserDataReader(reference.firestore);\n  const parsed = parseSetData(\n    dataReader,\n    'addDoc',\n    docRef._key,\n    convertedValue,\n    docRef.converter !== null,\n    {}\n  );\n\n  const datastore = getDatastore(reference.firestore);\n  return invokeCommitRpc(datastore, [\n    parsed.toMutation(docRef._key, Precondition.exists(false))\n  ]).then(() => docRef);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentData } from '@firebase/firestore-types';\n\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  normalizeByteString,\n  normalizeNumber,\n  normalizeTimestamp\n} from '../model/normalize';\nimport { ResourcePath } from '../model/path';\nimport {\n  getLocalWriteTime,\n  getPreviousValue\n} from '../model/server_timestamps';\nimport { TypeOrder } from '../model/type_order';\nimport { typeOrder } from '../model/values';\nimport {\n  ApiClientObjectMap,\n  ArrayValue as ProtoArrayValue,\n  LatLng as ProtoLatLng,\n  MapValue as ProtoMapValue,\n  Timestamp as ProtoTimestamp,\n  Value,\n  Value as ProtoValue\n} from '../protos/firestore_proto_api';\nimport { isValidResourceName } from '../remote/serializer';\nimport { fail, hardAssert } from '../util/assert';\nimport { ByteString } from '../util/byte_string';\nimport { logError } from '../util/log';\nimport { forEach } from '../util/obj';\n\nimport { GeoPoint } from './geo_point';\nimport { Timestamp } from './timestamp';\n\nexport type ServerTimestampBehavior = 'estimate' | 'previous' | 'none';\n\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */\nexport abstract class AbstractUserDataWriter {\n  convertValue(\n    value: ProtoValue,\n    serverTimestampBehavior: ServerTimestampBehavior = 'none'\n  ): unknown {\n    switch (typeOrder(value)) {\n      case TypeOrder.NullValue:\n        return null;\n      case TypeOrder.BooleanValue:\n        return value.booleanValue!;\n      case TypeOrder.NumberValue:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case TypeOrder.TimestampValue:\n        return this.convertTimestamp(value.timestampValue!);\n      case TypeOrder.ServerTimestampValue:\n        return this.convertServerTimestamp(value, serverTimestampBehavior);\n      case TypeOrder.StringValue:\n        return value.stringValue!;\n      case TypeOrder.BlobValue:\n        return this.convertBytes(normalizeByteString(value.bytesValue!));\n      case TypeOrder.RefValue:\n        return this.convertReference(value.referenceValue!);\n      case TypeOrder.GeoPointValue:\n        return this.convertGeoPoint(value.geoPointValue!);\n      case TypeOrder.ArrayValue:\n        return this.convertArray(value.arrayValue!, serverTimestampBehavior);\n      case TypeOrder.ObjectValue:\n        return this.convertObject(value.mapValue!, serverTimestampBehavior);\n      default:\n        throw fail('Invalid value type: ' + JSON.stringify(value));\n    }\n  }\n\n  private convertObject(\n    mapValue: ProtoMapValue,\n    serverTimestampBehavior: ServerTimestampBehavior\n  ): DocumentData {\n    return this.convertObjectMap(mapValue.fields, serverTimestampBehavior);\n  }\n\n  /**\n   * @internal\n   */\n  convertObjectMap(\n    fields: ApiClientObjectMap<Value> | undefined,\n    serverTimestampBehavior: ServerTimestampBehavior = 'none'\n  ): DocumentData {\n    const result: DocumentData = {};\n    forEach(fields, (key, value) => {\n      result[key] = this.convertValue(value, serverTimestampBehavior);\n    });\n    return result;\n  }\n\n  private convertGeoPoint(value: ProtoLatLng): GeoPoint {\n    return new GeoPoint(\n      normalizeNumber(value.latitude),\n      normalizeNumber(value.longitude)\n    );\n  }\n\n  private convertArray(\n    arrayValue: ProtoArrayValue,\n    serverTimestampBehavior: ServerTimestampBehavior\n  ): unknown[] {\n    return (arrayValue.values || []).map(value =>\n      this.convertValue(value, serverTimestampBehavior)\n    );\n  }\n\n  private convertServerTimestamp(\n    value: ProtoValue,\n    serverTimestampBehavior: ServerTimestampBehavior\n  ): unknown {\n    switch (serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue, serverTimestampBehavior);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n\n  private convertTimestamp(value: ProtoTimestamp): Timestamp {\n    const normalizedValue = normalizeTimestamp(value);\n    return new Timestamp(normalizedValue.seconds, normalizedValue.nanos);\n  }\n\n  protected convertDocumentKey(\n    name: string,\n    expectedDatabaseId: DatabaseId\n  ): DocumentKey {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resourcePath),\n      'ReferenceValue is not valid ' + name\n    );\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n\n    if (!databaseId.isEqual(expectedDatabaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(\n        `Document ${key} contains a document ` +\n          `reference within a different database (` +\n          `${databaseId.projectId}/${databaseId.database}) which is not ` +\n          `supported. It will be treated as a reference in the current ` +\n          `database (${expectedDatabaseId.projectId}/${expectedDatabaseId.database}) ` +\n          `instead.`\n      );\n    }\n    return key;\n  }\n\n  protected abstract convertReference(name: string): unknown;\n\n  protected abstract convertBytes(bytes: ByteString): unknown;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepEqual } from '@firebase/util';\n\nimport { AggregateImpl } from '../core/aggregate';\nimport { ApiClientObjectMap, Value } from '../protos/firestore_proto_api';\nimport { invokeRunAggregationQueryRpc } from '../remote/datastore';\nimport { cast } from '../util/input_validation';\nimport { mapToArray } from '../util/obj';\n\nimport {\n  AggregateField,\n  AggregateQuerySnapshot,\n  AggregateSpec\n} from './aggregate_types';\nimport { getDatastore } from './components';\nimport { Firestore } from './database';\nimport { FieldPath } from './field_path';\nimport { DocumentData, Query, queryEqual } from './reference';\nimport { LiteUserDataWriter } from './reference_impl';\nimport { fieldPathFromArgument } from './user_data_reader';\n\n/**\n * Calculates the number of documents in the result set of the given query,\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can even\n * count the documents if the result set would be prohibitively large to\n * download entirely (e.g. thousands of documents).\n *\n * @param query - The query whose result set size to calculate.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */\nexport function getCount<AppModelType, DbModelType extends DocumentData>(\n  query: Query<AppModelType, DbModelType>\n): Promise<\n  AggregateQuerySnapshot<\n    { count: AggregateField<number> },\n    AppModelType,\n    DbModelType\n  >\n> {\n  const countQuerySpec: { count: AggregateField<number> } = {\n    count: count()\n  };\n\n  return getAggregate(query, countQuerySpec);\n}\n\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query, without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, are downloaded. This\n * function can even perform aggregations of the documents if the result set\n * would be prohibitively large to download entirely (e.g. thousands of documents).\n *\n * @param query The query whose result set to aggregate over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n */\nexport function getAggregate<\n  AggregateSpecType extends AggregateSpec,\n  AppModelType,\n  DbModelType extends DocumentData\n>(\n  query: Query<AppModelType, DbModelType>,\n  aggregateSpec: AggregateSpecType\n): Promise<\n  AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>\n> {\n  const firestore = cast(query.firestore, Firestore);\n  const datastore = getDatastore(firestore);\n\n  const internalAggregates = mapToArray(aggregateSpec, (aggregate, alias) => {\n    return new AggregateImpl(\n      alias,\n      aggregate.aggregateType,\n      aggregate._internalFieldPath\n    );\n  });\n\n  // Run the aggregation and convert the results\n  return invokeRunAggregationQueryRpc(\n    datastore,\n    query._query,\n    internalAggregates\n  ).then(aggregateResult =>\n    convertToAggregateQuerySnapshot(firestore, query, aggregateResult)\n  );\n}\n\nfunction convertToAggregateQuerySnapshot<\n  AggregateSpecType extends AggregateSpec,\n  AppModelType,\n  DbModelType extends DocumentData\n>(\n  firestore: Firestore,\n  query: Query<AppModelType, DbModelType>,\n  aggregateResult: ApiClientObjectMap<Value>\n): AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType> {\n  const userDataWriter = new LiteUserDataWriter(firestore);\n  const querySnapshot = new AggregateQuerySnapshot<\n    AggregateSpecType,\n    AppModelType,\n    DbModelType\n  >(query, userDataWriter, aggregateResult);\n  return querySnapshot;\n}\n\n/**\n * Create an AggregateField object that can be used to compute the sum of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to sum across the result set.\n */\nexport function sum(field: string | FieldPath): AggregateField<number> {\n  return new AggregateField('sum', fieldPathFromArgument('sum', field));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n */\nexport function average(\n  field: string | FieldPath\n): AggregateField<number | null> {\n  return new AggregateField('avg', fieldPathFromArgument('average', field));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n */\nexport function count(): AggregateField<number> {\n  return new AggregateField('count');\n}\n\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n */\nexport function aggregateFieldEqual(\n  left: AggregateField<unknown>,\n  right: AggregateField<unknown>\n): boolean {\n  return (\n    left instanceof AggregateField &&\n    right instanceof AggregateField &&\n    left.aggregateType === right.aggregateType &&\n    left._internalFieldPath?.canonicalString() ===\n      right._internalFieldPath?.canonicalString()\n  );\n}\n\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */\nexport function aggregateQuerySnapshotEqual<\n  AggregateSpecType extends AggregateSpec,\n  AppModelType,\n  DbModelType extends DocumentData\n>(\n  left: AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>,\n  right: AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>\n): boolean {\n  return (\n    queryEqual(left.query, right.query) && deepEqual(left.data(), right.data())\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FieldValue } from './field_value';\nimport {\n  ArrayRemoveFieldValueImpl,\n  ArrayUnionFieldValueImpl,\n  DeleteFieldValueImpl,\n  NumericIncrementFieldValueImpl,\n  ServerTimestampFieldValueImpl\n} from './user_data_reader';\n\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */\nexport function deleteField(): FieldValue {\n  return new DeleteFieldValueImpl('deleteField');\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */\nexport function serverTimestamp(): FieldValue {\n  return new ServerTimestampFieldValueImpl('serverTimestamp');\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */\nexport function arrayUnion(...elements: unknown[]): FieldValue {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayUnionFieldValueImpl('arrayUnion', elements);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nexport function arrayRemove(...elements: unknown[]): FieldValue {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayRemoveFieldValueImpl('arrayRemove', elements);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nexport function increment(n: number): FieldValue {\n  return new NumericIncrementFieldValueImpl('increment', n);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Compat, getModularInstance } from '@firebase/util';\n\nimport { DeleteMutation, Mutation, Precondition } from '../model/mutation';\nimport { invokeCommitRpc } from '../remote/datastore';\nimport { Code, FirestoreError } from '../util/error';\nimport { cast } from '../util/input_validation';\n\nimport { getDatastore } from './components';\nimport { Firestore } from './database';\nimport { FieldPath } from './field_path';\nimport {\n  DocumentData,\n  DocumentReference,\n  PartialWithFieldValue,\n  SetOptions,\n  UpdateData,\n  WithFieldValue\n} from './reference';\nimport { applyFirestoreDataConverter } from './reference_impl';\nimport {\n  newUserDataReader,\n  parseSetData,\n  parseUpdateData,\n  parseUpdateVarargs,\n  UserDataReader\n} from './user_data_reader';\n\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */\nexport class WriteBatch {\n  // This is the lite version of the WriteBatch API used in the legacy SDK. The\n  // class is a close copy but takes different input types.\n\n  private readonly _dataReader: UserDataReader;\n  private _mutations = [] as Mutation[];\n  private _committed = false;\n\n  /** @hideconstructor */\n  constructor(\n    private readonly _firestore: Firestore,\n    private readonly _commitHandler: (m: Mutation[]) => Promise<void>\n  ) {\n    this._dataReader = newUserDataReader(_firestore);\n  }\n\n  /**\n   * Writes to the document referred to by the provided {@link\n   * DocumentReference}. If the document does not exist yet, it will be created.\n   *\n   * @param documentRef - A reference to the document to be set.\n   * @param data - An object of the fields and values for the document.\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\n   */\n  set<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    data: WithFieldValue<AppModelType>\n  ): WriteBatch;\n  /**\n   * Writes to the document referred to by the provided {@link\n   * DocumentReference}. If the document does not exist yet, it will be created.\n   * If you provide `merge` or `mergeFields`, the provided data can be merged\n   * into an existing document.\n   *\n   * @param documentRef - A reference to the document to be set.\n   * @param data - An object of the fields and values for the document.\n   * @param options - An object to configure the set behavior.\n   * @throws Error - If the provided input is not a valid Firestore document.\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\n   */\n  set<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    data: PartialWithFieldValue<AppModelType>,\n    options: SetOptions\n  ): WriteBatch;\n  set<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    data: WithFieldValue<AppModelType> | PartialWithFieldValue<AppModelType>,\n    options?: SetOptions\n  ): WriteBatch {\n    this._verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n\n    const convertedValue = applyFirestoreDataConverter(\n      ref.converter,\n      data,\n      options\n    );\n    const parsed = parseSetData(\n      this._dataReader,\n      'WriteBatch.set',\n      ref._key,\n      convertedValue,\n      ref.converter !== null,\n      options\n    );\n    this._mutations.push(parsed.toMutation(ref._key, Precondition.none()));\n    return this;\n  }\n\n  /**\n   * Updates fields in the document referred to by the provided {@link\n   * DocumentReference}. The update will fail if applied to a document that does\n   * not exist.\n   *\n   * @param documentRef - A reference to the document to be updated.\n   * @param data - An object containing the fields and values with which to\n   * update the document. Fields can contain dots to reference nested fields\n   * within the document.\n   * @throws Error - If the provided input is not valid Firestore data.\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\n   */\n  update<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    data: UpdateData<DbModelType>\n  ): WriteBatch;\n  /**\n   * Updates fields in the document referred to by this {@link\n   * DocumentReference}. The update will fail if applied to a document that does\n   * not exist.\n   *\n   * Nested fields can be update by providing dot-separated field path strings\n   * or by providing `FieldPath` objects.\n   *\n   * @param documentRef - A reference to the document to be updated.\n   * @param field - The first field to update.\n   * @param value - The first value.\n   * @param moreFieldsAndValues - Additional key value pairs.\n   * @throws Error - If the provided input is not valid Firestore data.\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\n   */\n  update<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    field: string | FieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    fieldOrUpdateData: string | FieldPath | UpdateData<DbModelType>,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    this._verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\n\n    let parsed;\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof FieldPath\n    ) {\n      parsed = parseUpdateVarargs(\n        this._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      parsed = parseUpdateData(\n        this._dataReader,\n        'WriteBatch.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._mutations.push(\n      parsed.toMutation(ref._key, Precondition.exists(true))\n    );\n    return this;\n  }\n\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\n   */\n  delete<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>\n  ): WriteBatch {\n    this._verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n    this._mutations = this._mutations.concat(\n      new DeleteMutation(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  /**\n   * Commits all of the writes in this write batch as a single atomic unit.\n   *\n   * The result of these writes will only be reflected in document reads that\n   * occur after the returned promise resolves. If the client is offline, the\n   * write fails. If you would like to see local modifications or buffer writes\n   * until the client is online, use the full Firestore SDK.\n   *\n   * @returns A `Promise` resolved once all of the writes in the batch have been\n   * successfully written to the backend as an atomic unit (note that it won't\n   * resolve while you're offline).\n   */\n  commit(): Promise<void> {\n    this._verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._commitHandler(this._mutations);\n    }\n\n    return Promise.resolve();\n  }\n\n  private _verifyNotCommitted(): void {\n    if (this._committed) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'A write batch can no longer be used after commit() ' +\n          'has been called.'\n      );\n    }\n  }\n}\n\nexport function validateReference<\n  AppModelType,\n  DbModelType extends DocumentData\n>(\n  documentRef:\n    | DocumentReference<AppModelType, DbModelType>\n    | Compat<DocumentReference<AppModelType, DbModelType>>,\n  firestore: Firestore\n): DocumentReference<AppModelType, DbModelType> {\n  documentRef = getModularInstance(documentRef);\n\n  if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Provided document reference is from a different Firestore instance.'\n    );\n  } else {\n    return documentRef as DocumentReference<AppModelType, DbModelType>;\n  }\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */\nexport function writeBatch(firestore: Firestore): WriteBatch {\n  firestore = cast(firestore, Firestore);\n  const datastore = getDatastore(firestore);\n  return new WriteBatch(firestore, writes =>\n    invokeCommitRpc(datastore, writes)\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParsedSetData, ParsedUpdateData } from '../lite-api/user_data_reader';\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  DeleteMutation,\n  Mutation,\n  Precondition,\n  VerifyMutation\n} from '../model/mutation';\nimport {\n  Datastore,\n  invokeBatchGetDocumentsRpc,\n  invokeCommitRpc\n} from '../remote/datastore';\nimport { fail, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nimport { SnapshotVersion } from './snapshot_version';\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nexport class Transaction {\n  // The version of each document that was read during this transaction.\n  private readVersions = new Map</* path */ string, SnapshotVersion>();\n  private mutations: Mutation[] = [];\n  private committed = false;\n\n  /**\n   * A deferred usage error that occurred previously in this transaction that\n   * will cause the transaction to fail once it actually commits.\n   */\n  private lastWriteError: FirestoreError | null = null;\n\n  /**\n   * Set of documents that have been written in the transaction.\n   *\n   * When there's more than one write to the same key in a transaction, any\n   * writes after the first are handled differently.\n   */\n  private writtenDocs: Set</* path= */ string> = new Set();\n\n  constructor(private datastore: Datastore) {}\n\n  async lookup(keys: DocumentKey[]): Promise<Document[]> {\n    this.ensureCommitNotCalled();\n\n    if (this.mutations.length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Firestore transactions require all reads to be executed before all writes.'\n      );\n    }\n    const docs = await invokeBatchGetDocumentsRpc(this.datastore, keys);\n    docs.forEach(doc => this.recordVersion(doc));\n    return docs;\n  }\n\n  set(key: DocumentKey, data: ParsedSetData): void {\n    this.write(data.toMutation(key, this.precondition(key)));\n    this.writtenDocs.add(key.toString());\n  }\n\n  update(key: DocumentKey, data: ParsedUpdateData): void {\n    try {\n      this.write(data.toMutation(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastWriteError = e as FirestoreError | null;\n    }\n    this.writtenDocs.add(key.toString());\n  }\n\n  delete(key: DocumentKey): void {\n    this.write(new DeleteMutation(key, this.precondition(key)));\n    this.writtenDocs.add(key.toString());\n  }\n\n  async commit(): Promise<void> {\n    this.ensureCommitNotCalled();\n\n    if (this.lastWriteError) {\n      throw this.lastWriteError;\n    }\n    const unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten.delete(mutation.key.toString());\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((_, path) => {\n      const key = DocumentKey.fromPath(path);\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await invokeCommitRpc(this.datastore, this.mutations);\n    this.committed = true;\n  }\n\n  private recordVersion(doc: Document): void {\n    let docVersion: SnapshotVersion;\n\n    if (doc.isFoundDocument()) {\n      docVersion = doc.version;\n    } else if (doc.isNoDocument()) {\n      // Represent a deleted doc using SnapshotVersion.min().\n      docVersion = SnapshotVersion.min();\n    } else {\n      throw fail('Document in a transaction was a ' + doc.constructor.name);\n    }\n\n    const existingVersion = this.readVersions.get(doc.key.toString());\n    if (existingVersion) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(\n          Code.ABORTED,\n          'Document version changed between two reads.'\n        );\n      }\n    } else {\n      this.readVersions.set(doc.key.toString(), docVersion);\n    }\n  }\n\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  private precondition(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        return Precondition.exists(false);\n      } else {\n        return Precondition.updateTime(version);\n      }\n    } else {\n      return Precondition.none();\n    }\n  }\n\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  private preconditionForUpdate(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        // The document doesn't exist, so fail the transaction.\n\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't update a document that doesn't exist.\"\n        );\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n\n  private write(mutation: Mutation): void {\n    this.ensureCommitNotCalled();\n    this.mutations.push(mutation);\n  }\n\n  private ensureCommitNotCalled(): void {\n    debugAssert(\n      !this.committed,\n      'A transaction object cannot be used after its update callback has been invoked.'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DEFAULT_TRANSACTION_OPTIONS: TransactionOptions = {\n  maxAttempts: 5\n};\n\n/**\n * Options to customize transaction behavior.\n */\nexport declare interface TransactionOptions {\n  /** Maximum number of attempts to commit, after which transaction fails. Default is 5. */\n  readonly maxAttempts: number;\n}\n\nexport function validateTransactionOptions(options: TransactionOptions): void {\n  if (options.maxAttempts < 1) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Max attempts must be at least 1'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { Datastore } from '../remote/datastore';\nimport { isPermanentError } from '../remote/rpc_error';\nimport { AsyncQueue, TimerId } from '../util/async_queue';\nimport { FirestoreError } from '../util/error';\nimport { Deferred } from '../util/promise';\nimport { isNullOrUndefined } from '../util/types';\n\nimport { Transaction } from './transaction';\nimport { TransactionOptions } from './transaction_options';\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nexport class TransactionRunner<T> {\n  private attemptsRemaining: number;\n  private backoff: ExponentialBackoff;\n\n  constructor(\n    private readonly asyncQueue: AsyncQueue,\n    private readonly datastore: Datastore,\n    private readonly options: TransactionOptions,\n    private readonly updateFunction: (transaction: Transaction) => Promise<T>,\n    private readonly deferred: Deferred<T>\n  ) {\n    this.attemptsRemaining = options.maxAttempts;\n    this.backoff = new ExponentialBackoff(\n      this.asyncQueue,\n      TimerId.TransactionRetry\n    );\n  }\n\n  /** Runs the transaction and sets the result on deferred. */\n  run(): void {\n    this.attemptsRemaining -= 1;\n    this.runWithBackOff();\n  }\n\n  private runWithBackOff(): void {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = new Transaction(this.datastore);\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise\n          .then(result => {\n            this.asyncQueue.enqueueAndForget(() => {\n              return transaction\n                .commit()\n                .then(() => {\n                  this.deferred.resolve(result);\n                })\n                .catch(commitError => {\n                  this.handleTransactionError(commitError);\n                });\n            });\n          })\n          .catch(userPromiseError => {\n            this.handleTransactionError(userPromiseError);\n          });\n      }\n    });\n  }\n\n  private tryRunUpdateFunction(transaction: Transaction): Promise<T> | null {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (\n        isNullOrUndefined(userPromise) ||\n        !userPromise.catch ||\n        !userPromise.then\n      ) {\n        this.deferred.reject(\n          Error('Transaction callback must return a Promise')\n        );\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error as Error);\n      return null;\n    }\n  }\n\n  private handleTransactionError(error: Error): void {\n    if (this.attemptsRemaining > 0 && this.isRetryableTransactionError(error)) {\n      this.attemptsRemaining -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n\n  private isRetryableTransactionError(error: Error): boolean {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = (error as FirestoreError).code;\n      return (\n        code === 'aborted' ||\n        code === 'failed-precondition' ||\n        code === 'already-exists' ||\n        !isPermanentError(code)\n      );\n    }\n    return false;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The Platform's 'window' implementation or null if not available. */\nexport function getWindow(): Window | null {\n  // `window` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' ? window : null;\n}\n\n/** The Platform's 'document' implementation or null if not available. */\nexport function getDocument(): Document | null {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof document !== 'undefined' ? document : null;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIndexedDbTransactionError } from '../local/simple_db';\n\nimport { Code, FirestoreError } from './error';\nimport { logError } from './log';\nimport { Deferred } from './promise';\n\nconst LOG_TAG = 'AsyncQueue';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TimerHandle = any;\n\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n *\n * The string values are used when encoding these timer IDs in JSON spec tests.\n */\nexport const enum TimerId {\n  /** All can be used with runDelayedOperationsEarly() to run all timers. */\n  All = 'all',\n\n  /**\n   * The following 5 timers are used in persistent_stream.ts for the listen and\n   * write streams. The \"Idle\" timer is used to close the stream due to\n   * inactivity. The \"ConnectionBackoff\" timer is used to restart a stream once\n   * the appropriate backoff delay has elapsed. The health check is used to mark\n   * a stream healthy if it has not received an error during its initial setup.\n   */\n  ListenStreamIdle = 'listen_stream_idle',\n  ListenStreamConnectionBackoff = 'listen_stream_connection_backoff',\n  WriteStreamIdle = 'write_stream_idle',\n  WriteStreamConnectionBackoff = 'write_stream_connection_backoff',\n  HealthCheckTimeout = 'health_check_timeout',\n\n  /**\n   * A timer used in online_state_tracker.ts to transition from\n   * OnlineState.Unknown to Offline after a set timeout, rather than waiting\n   * indefinitely for success or failure.\n   */\n  OnlineStateTimeout = 'online_state_timeout',\n\n  /**\n   * A timer used to update the client metadata in IndexedDb, which is used\n   * to determine the primary leaseholder.\n   */\n  ClientMetadataRefresh = 'client_metadata_refresh',\n\n  /** A timer used to periodically attempt LRU Garbage collection */\n  LruGarbageCollection = 'lru_garbage_collection',\n\n  /**\n   * A timer used to retry transactions. Since there can be multiple concurrent\n   * transactions, multiple of these may be in the queue at a given time.\n   */\n  TransactionRetry = 'transaction_retry',\n\n  /**\n   * A timer used to retry operations scheduled via retryable AsyncQueue\n   * operations.\n   */\n  AsyncQueueRetry = 'async_queue_retry',\n\n  /**\n   *  A timer used to periodically attempt index backfill.\n   */\n  IndexBackfill = 'index_backfill'\n}\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nexport class DelayedOperation<T extends unknown> implements PromiseLike<T> {\n  // handle for use with clearTimeout(), or null if the operation has been\n  // executed or canceled already.\n  private timerHandle: TimerHandle | null;\n\n  private readonly deferred = new Deferred<T>();\n\n  private constructor(\n    private readonly asyncQueue: AsyncQueue,\n    readonly timerId: TimerId,\n    readonly targetTimeMs: number,\n    private readonly op: () => Promise<T>,\n    private readonly removalCallback: (op: DelayedOperation<T>) => void\n  ) {\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n\n  get promise(): Promise<T> {\n    return this.deferred.promise;\n  }\n\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue - The queue to schedule the operation on.\n   * @param id - A Timer ID identifying the type of operation this is.\n   * @param delayMs - The delay (ms) before the operation should be scheduled.\n   * @param op - The operation to run.\n   * @param removalCallback - A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule<R extends unknown>(\n    asyncQueue: AsyncQueue,\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<R>,\n    removalCallback: (op: DelayedOperation<R>) => void\n  ): DelayedOperation<R> {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(\n      asyncQueue,\n      timerId,\n      targetTime,\n      op,\n      removalCallback\n    );\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  private start(delayMs: number): void {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay(): void {\n    return this.handleDelayElapsed();\n  }\n\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(reason?: string): void {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(\n        new FirestoreError(\n          Code.CANCELLED,\n          'Operation cancelled' + (reason ? ': ' + reason : '')\n        )\n      );\n    }\n  }\n\n  then = this.deferred.promise.then.bind(this.deferred.promise);\n\n  private handleDelayElapsed(): void {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  private clearTimeout(): void {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n\nexport interface AsyncQueue {\n  // Is this AsyncQueue being shut down? If true, this instance will not enqueue\n  // any new operations, Promises from enqueue requests will not resolve.\n  readonly isShuttingDown: boolean;\n\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget<T extends unknown>(op: () => Promise<T>): void;\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue without waiting for it to complete (i.e. we ignore the Promise result).\n   */\n  enqueueAndForgetEvenWhileRestricted<T extends unknown>(\n    op: () => Promise<T>\n  ): void;\n\n  /**\n   * Initialize the shutdown of this queue. Once this method is called, the\n   * only possible way to request running an operation is through\n   * `enqueueEvenWhileRestricted()`.\n   *\n   * @param purgeExistingTasks Whether already enqueued tasked should be\n   * rejected (unless enqueued wih `enqueueEvenWhileRestricted()`). Defaults\n   * to false.\n   */\n  enterRestrictedMode(purgeExistingTasks?: boolean): void;\n\n  /**\n   * Adds a new operation to the queue. Returns a promise that will be resolved\n   * when the promise returned by the new operation is (with its value).\n   */\n  enqueue<T extends unknown>(op: () => Promise<T>): Promise<T>;\n\n  /**\n   * Enqueue a retryable operation.\n   *\n   * A retryable operation is rescheduled with backoff if it fails with a\n   * IndexedDbTransactionError (the error type used by SimpleDb). All\n   * retryable operations are executed in order and only run if all prior\n   * operations were retried successfully.\n   */\n  enqueueRetryable(op: () => Promise<void>): void;\n\n  /**\n   * Schedules an operation to be queued on the AsyncQueue once the specified\n   * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel\n   * or fast-forward the operation prior to its running.\n   */\n  enqueueAfterDelay<T extends unknown>(\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<T>\n  ): DelayedOperation<T>;\n\n  /**\n   * Verifies there's an operation currently in-progress on the AsyncQueue.\n   * Unfortunately we can't verify that the running code is in the promise chain\n   * of that operation, so this isn't a foolproof check, but it should be enough\n   * to catch some bugs.\n   */\n  verifyOperationInProgress(): void;\n}\n\n/**\n * Returns a FirestoreError that can be surfaced to the user if the provided\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\n */\nexport function wrapInUserErrorIfRecoverable(\n  e: Error,\n  msg: string\n): FirestoreError {\n  logError(LOG_TAG, `${msg}: ${e}`);\n  if (isIndexedDbTransactionError(e)) {\n    return new FirestoreError(Code.UNAVAILABLE, `${msg}: ${e}`);\n  } else {\n    throw e;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIndexedDbTransactionError } from '../local/simple_db';\nimport { getDocument } from '../platform/dom';\nimport { ExponentialBackoff } from '../remote/backoff';\n\nimport { debugAssert, fail } from './assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from './async_queue';\nimport { FirestoreError } from './error';\nimport { logDebug, logError } from './log';\nimport { Deferred } from './promise';\n\nconst LOG_TAG = 'AsyncQueue';\n\nexport class AsyncQueueImpl implements AsyncQueue {\n  // The last promise in the queue.\n  private tail: Promise<unknown> = Promise.resolve();\n\n  // A list of retryable operations. Retryable operations are run in order and\n  // retried with backoff.\n  private retryableOps: Array<() => Promise<void>> = [];\n\n  // Is this AsyncQueue being shut down? Once it is set to true, it will not\n  // be changed again.\n  private _isShuttingDown: boolean = false;\n\n  // Operations scheduled to be queued in the future. Operations are\n  // automatically removed after they are run or canceled.\n  private delayedOperations: Array<DelayedOperation<unknown>> = [];\n\n  // visible for testing\n  failure: FirestoreError | null = null;\n\n  // Flag set while there's an outstanding AsyncQueue operation, used for\n  // assertion sanity-checks.\n  private operationInProgress = false;\n\n  // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n  private skipNonRestrictedTasks = false;\n\n  // List of TimerIds to fast-forward delays for.\n  private timerIdsToSkip: TimerId[] = [];\n\n  // Backoff timer used to schedule retries for retryable operations\n  private backoff = new ExponentialBackoff(this, TimerId.AsyncQueueRetry);\n\n  // Visibility handler that triggers an immediate retry of all retryable\n  // operations. Meant to speed up recovery when we regain file system access\n  // after page comes into foreground.\n  private visibilityHandler: () => void = () => {\n    const document = getDocument();\n    if (document) {\n      logDebug(\n        LOG_TAG,\n        'Visibility state changed to ' + document.visibilityState\n      );\n    }\n    this.backoff.skipBackoff();\n  };\n\n  constructor() {\n    const document = getDocument();\n    if (document && typeof document.addEventListener === 'function') {\n      document.addEventListener('visibilitychange', this.visibilityHandler);\n    }\n  }\n\n  get isShuttingDown(): boolean {\n    return this._isShuttingDown;\n  }\n\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget<T extends unknown>(op: () => Promise<T>): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n\n  enqueueAndForgetEvenWhileRestricted<T extends unknown>(\n    op: () => Promise<T>\n  ): void {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n\n  enterRestrictedMode(purgeExistingTasks?: boolean): void {\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      this.skipNonRestrictedTasks = purgeExistingTasks || false;\n      const document = getDocument();\n      if (document && typeof document.removeEventListener === 'function') {\n        document.removeEventListener(\n          'visibilitychange',\n          this.visibilityHandler\n        );\n      }\n    }\n  }\n\n  enqueue<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise<T>(() => {});\n    }\n\n    // Create a deferred Promise that we can return to the callee. This\n    // allows us to return a \"hanging Promise\" only to the callee and still\n    // advance the queue even when the operation is not run.\n    const task = new Deferred<T>();\n    return this.enqueueInternal<unknown>(() => {\n      if (this._isShuttingDown && this.skipNonRestrictedTasks) {\n        // We do not resolve 'task'\n        return Promise.resolve();\n      }\n\n      op().then(task.resolve, task.reject);\n      return task.promise;\n    }).then(() => task.promise);\n  }\n\n  enqueueRetryable(op: () => Promise<void>): void {\n    this.enqueueAndForget(() => {\n      this.retryableOps.push(op);\n      return this.retryNextOp();\n    });\n  }\n\n  /**\n   * Runs the next operation from the retryable queue. If the operation fails,\n   * reschedules with backoff.\n   */\n  private async retryNextOp(): Promise<void> {\n    if (this.retryableOps.length === 0) {\n      return;\n    }\n\n    try {\n      await this.retryableOps[0]();\n      this.retryableOps.shift();\n      this.backoff.reset();\n    } catch (e) {\n      if (isIndexedDbTransactionError(e as Error)) {\n        logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n      } else {\n        throw e; // Failure will be handled by AsyncQueue\n      }\n    }\n\n    if (this.retryableOps.length > 0) {\n      // If there are additional operations, we re-schedule `retryNextOp()`.\n      // This is necessary to run retryable operations that failed during\n      // their initial attempt since we don't know whether they are already\n      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n      // call scheduled here.\n      // Since `backoffAndRun()` cancels an existing backoff and schedules a\n      // new backoff on every call, there is only ever a single additional\n      // operation in the queue.\n      this.backoff.backoffAndRun(() => this.retryNextOp());\n    }\n  }\n\n  private enqueueInternal<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op()\n        .catch((error: FirestoreError) => {\n          this.failure = error;\n          this.operationInProgress = false;\n          const message = getMessageOrStack(error);\n          logError('INTERNAL UNHANDLED ERROR: ', message);\n\n          // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n          throw error;\n        })\n        .then(result => {\n          this.operationInProgress = false;\n          return result;\n        });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n\n  enqueueAfterDelay<T extends unknown>(\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<T>\n  ): DelayedOperation<T> {\n    this.verifyNotFailed();\n\n    debugAssert(\n      delayMs >= 0,\n      `Attempted to schedule an operation with a negative delay of ${delayMs}`\n    );\n\n    // Fast-forward delays for timerIds that have been overriden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n\n    const delayedOp = DelayedOperation.createAndSchedule<T>(\n      this,\n      timerId,\n      delayMs,\n      op,\n      removedOp =>\n        this.removeDelayedOperation(removedOp as DelayedOperation<unknown>)\n    );\n    this.delayedOperations.push(delayedOp as DelayedOperation<unknown>);\n    return delayedOp;\n  }\n\n  private verifyNotFailed(): void {\n    if (this.failure) {\n      fail('AsyncQueue is already failed: ' + getMessageOrStack(this.failure));\n    }\n  }\n\n  verifyOperationInProgress(): void {\n    debugAssert(\n      this.operationInProgress,\n      'verifyOpInProgress() called when no op in progress on this queue.'\n    );\n  }\n\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async drain(): Promise<void> {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail: Promise<unknown>;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  containsDelayedOperation(timerId: TimerId): boolean {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId - Delayed operations up to and including this TimerId\n   * will be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  runAllDelayedOperationsUntil(lastTimerId: TimerId): Promise<void> {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n\n      return this.drain();\n    });\n  }\n\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  skipDelaysForTimerId(timerId: TimerId): void {\n    this.timerIdsToSkip.push(timerId);\n  }\n\n  /** Called once a DelayedOperation is run or canceled. */\n  private removeDelayedOperation(op: DelayedOperation<unknown>): void {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    debugAssert(index >= 0, 'Delayed operation not found.');\n    this.delayedOperations.splice(index, 1);\n  }\n}\n\nexport function newAsyncQueue(): AsyncQueue {\n  return new AsyncQueueImpl();\n}\n\n/**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\nfunction getMessageOrStack(error: Error): string {\n  let message = error.message || '';\n  if (error.stack) {\n    if (error.stack.includes(error.message)) {\n      message = error.stack;\n    } else {\n      message = error.message + '\\n' + error.stack;\n    }\n  }\n  return message;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA, isIndexedDBAvailable } from '@firebase/util';\n\nimport { debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport { Deferred } from '../util/promise';\n\nimport { PersistencePromise } from './persistence_promise';\n\n// References to `window` are guarded by SimpleDb.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'SimpleDb';\n\n/**\n * The maximum number of retry attempts for an IndexedDb transaction that fails\n * with a DOMException.\n */\nconst TRANSACTION_RETRY_COUNT = 3;\n\n// The different modes supported by `SimpleDb.runTransaction()`\ntype SimpleDbTransactionMode = 'readonly' | 'readwrite';\n\nexport interface SimpleDbSchemaConverter {\n  createOrUpgrade(\n    db: IDBDatabase,\n    txn: IDBTransaction,\n    fromVersion: number,\n    toVersion: number\n  ): PersistencePromise<void>;\n}\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nexport class SimpleDbTransaction {\n  private aborted = false;\n\n  /**\n   * A `Promise` that resolves with the result of the IndexedDb transaction.\n   */\n  private readonly completionDeferred = new Deferred<void>();\n\n  static open(\n    db: IDBDatabase,\n    action: string,\n    mode: IDBTransactionMode,\n    objectStoreNames: string[]\n  ): SimpleDbTransaction {\n    try {\n      return new SimpleDbTransaction(\n        action,\n        db.transaction(objectStoreNames, mode)\n      );\n    } catch (e) {\n      throw new IndexedDbTransactionError(action, e as Error);\n    }\n  }\n\n  constructor(\n    private readonly action: string,\n    private readonly transaction: IDBTransaction\n  ) {\n    this.transaction.oncomplete = () => {\n      this.completionDeferred.resolve();\n    };\n    this.transaction.onabort = () => {\n      if (transaction.error) {\n        this.completionDeferred.reject(\n          new IndexedDbTransactionError(action, transaction.error)\n        );\n      } else {\n        this.completionDeferred.resolve();\n      }\n    };\n    this.transaction.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      this.completionDeferred.reject(\n        new IndexedDbTransactionError(action, error)\n      );\n    };\n  }\n\n  get completionPromise(): Promise<void> {\n    return this.completionDeferred.promise;\n  }\n\n  abort(error?: Error): void {\n    if (error) {\n      this.completionDeferred.reject(error);\n    }\n\n    if (!this.aborted) {\n      logDebug(\n        LOG_TAG,\n        'Aborting transaction:',\n        error ? error.message : 'Client-initiated abort'\n      );\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  }\n\n  maybeCommit(): void {\n    // If the browser supports V3 IndexedDB, we invoke commit() explicitly to\n    // speed up index DB processing if the event loop remains blocks.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const maybeV3IndexedDb = this.transaction as any;\n    if (!this.aborted && typeof maybeV3IndexedDb.commit === 'function') {\n      maybeV3IndexedDb.commit();\n    }\n  }\n\n  /**\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n   * operations performed on the SimpleDbStore happen within the context of this\n   * transaction and it cannot be used anymore once the transaction is\n   * completed.\n   *\n   * Note that we can't actually enforce that the KeyType and ValueType are\n   * correct, but they allow type safety through the rest of the consuming code.\n   */\n  store<KeyType extends IDBValidKey, ValueType extends unknown>(\n    storeName: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    const store = this.transaction.objectStore(storeName);\n    debugAssert(!!store, 'Object store not part of transaction: ' + storeName);\n    return new SimpleDbStore<KeyType, ValueType>(store);\n  }\n}\n\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nexport class SimpleDb {\n  private db?: IDBDatabase;\n  private versionchangelistener?: (event: IDBVersionChangeEvent) => void;\n\n  /** Deletes the specified database. */\n  static delete(name: string): Promise<void> {\n    logDebug(LOG_TAG, 'Removing database:', name);\n    return wrapRequest<void>(window.indexedDB.deleteDatabase(name)).toPromise();\n  }\n\n  /** Returns true if IndexedDB is available in the current environment. */\n  static isAvailable(): boolean {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    }\n\n    if (SimpleDb.isMockPersistence()) {\n      return true;\n    }\n\n    // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n\n    // Check the UA string to find out the browser.\n    const ua = getUA();\n\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n    // iOS Safari: Disable for users running iOS version < 10.\n    const iOSVersion = SimpleDb.getIOSVersion(ua);\n    const isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\n\n    // Android browser: Disable for userse running version < 4.5.\n    const androidVersion = SimpleDb.getAndroidVersion(ua);\n    const isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\n\n    if (\n      ua.indexOf('MSIE ') > 0 ||\n      ua.indexOf('Trident/') > 0 ||\n      ua.indexOf('Edge/') > 0 ||\n      isUnsupportedIOS ||\n      isUnsupportedAndroid\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Returns true if the backing IndexedDB store is the Node IndexedDBShim\n   * (see https://github.com/axemclion/IndexedDBShim).\n   */\n  static isMockPersistence(): boolean {\n    return (\n      typeof process !== 'undefined' &&\n      process.env?.USE_MOCK_PERSISTENCE === 'YES'\n    );\n  }\n\n  /** Helper to get a typed SimpleDbStore from a transaction. */\n  static getStore<KeyType extends IDBValidKey, ValueType extends unknown>(\n    txn: SimpleDbTransaction,\n    store: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    return txn.store<KeyType, ValueType>(store);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine iOS version. Returns -1 if not found. */\n  static getIOSVersion(ua: string): number {\n    const iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\n    const version = iOSVersionRegex\n      ? iOSVersionRegex[1].split('_').slice(0, 2).join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine Android version. Returns -1 if not found. */\n  static getAndroidVersion(ua: string): number {\n    const androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\n    const version = androidVersionRegex\n      ? androidVersionRegex[1].split('.').slice(0, 2).join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  /*\n   * Creates a new SimpleDb wrapper for IndexedDb database `name`.\n   *\n   * Note that `version` must not be a downgrade. IndexedDB does not support\n   * downgrading the schema version. We currently do not support any way to do\n   * versioning outside of IndexedDB's versioning mechanism, as only\n   * version-upgrade transactions are allowed to do things like create\n   * objectstores.\n   */\n  constructor(\n    private readonly name: string,\n    private readonly version: number,\n    private readonly schemaConverter: SimpleDbSchemaConverter\n  ) {\n    debugAssert(\n      SimpleDb.isAvailable(),\n      'IndexedDB not supported in current environment.'\n    );\n\n    const iOSVersion = SimpleDb.getIOSVersion(getUA());\n    // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\n    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\n    // whatever reason it's much harder to hit after 12.2 so we only proactively\n    // log on 12.2.\n    if (iOSVersion === 12.2) {\n      logError(\n        'Firestore persistence suffers from a bug in iOS 12.2 ' +\n          'Safari that may cause your app to stop working. See ' +\n          'https://stackoverflow.com/q/56496296/110915 for details ' +\n          'and a potential workaround.'\n      );\n    }\n  }\n\n  /**\n   * Opens the specified database, creating or upgrading it if necessary.\n   */\n  async ensureDb(action: string): Promise<IDBDatabase> {\n    if (!this.db) {\n      logDebug(LOG_TAG, 'Opening database:', this.name);\n      this.db = await new Promise<IDBDatabase>((resolve, reject) => {\n        // TODO(mikelehen): Investigate browser compatibility.\n        // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n        // suggests IE9 and older WebKit browsers handle upgrade\n        // differently. They expect setVersion, as described here:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\n        const request = indexedDB.open(this.name, this.version);\n\n        request.onsuccess = (event: Event) => {\n          const db = (event.target as IDBOpenDBRequest).result;\n          resolve(db);\n        };\n\n        request.onblocked = () => {\n          reject(\n            new IndexedDbTransactionError(\n              action,\n              'Cannot upgrade IndexedDB schema while another tab is open. ' +\n                'Close all tabs that access Firestore and reload this page to proceed.'\n            )\n          );\n        };\n\n        request.onerror = (event: Event) => {\n          const error: DOMException = (event.target as IDBOpenDBRequest).error!;\n          if (error.name === 'VersionError') {\n            reject(\n              new FirestoreError(\n                Code.FAILED_PRECONDITION,\n                'A newer version of the Firestore SDK was previously used and so the persisted ' +\n                  'data is not compatible with the version of the SDK you are now using. The SDK ' +\n                  'will operate with persistence disabled. If you need persistence, please ' +\n                  're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' +\n                  'data for your app to start fresh.'\n              )\n            );\n          } else if (error.name === 'InvalidStateError') {\n            reject(\n              new FirestoreError(\n                Code.FAILED_PRECONDITION,\n                'Unable to open an IndexedDB connection. This could be due to running in a ' +\n                  'private browsing session on a browser whose private browsing sessions do not ' +\n                  'support IndexedDB: ' +\n                  error\n              )\n            );\n          } else {\n            reject(new IndexedDbTransactionError(action, error));\n          }\n        };\n\n        request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n          logDebug(\n            LOG_TAG,\n            'Database \"' + this.name + '\" requires upgrade from version:',\n            event.oldVersion\n          );\n          const db = (event.target as IDBOpenDBRequest).result;\n          this.schemaConverter\n            .createOrUpgrade(\n              db,\n              request.transaction!,\n              event.oldVersion,\n              this.version\n            )\n            .next(() => {\n              logDebug(\n                LOG_TAG,\n                'Database upgrade to version ' + this.version + ' complete'\n              );\n            });\n        };\n      });\n    }\n\n    if (this.versionchangelistener) {\n      this.db.onversionchange = event => this.versionchangelistener!(event);\n    }\n    return this.db;\n  }\n\n  setVersionChangeListener(\n    versionChangeListener: (event: IDBVersionChangeEvent) => void\n  ): void {\n    this.versionchangelistener = versionChangeListener;\n    if (this.db) {\n      this.db.onversionchange = (event: IDBVersionChangeEvent) => {\n        return versionChangeListener(event);\n      };\n    }\n  }\n\n  async runTransaction<T>(\n    action: string,\n    mode: SimpleDbTransactionMode,\n    objectStores: string[],\n    transactionFn: (transaction: SimpleDbTransaction) => PersistencePromise<T>\n  ): Promise<T> {\n    const readonly = mode === 'readonly';\n    let attemptNumber = 0;\n\n    while (true) {\n      ++attemptNumber;\n\n      try {\n        this.db = await this.ensureDb(action);\n\n        const transaction = SimpleDbTransaction.open(\n          this.db,\n          action,\n          readonly ? 'readonly' : 'readwrite',\n          objectStores\n        );\n        const transactionFnResult = transactionFn(transaction)\n          .next(result => {\n            transaction.maybeCommit();\n            return result;\n          })\n          .catch(error => {\n            // Abort the transaction if there was an error.\n            transaction.abort(error);\n            // We cannot actually recover, and calling `abort()` will cause the transaction's\n            // completion promise to be rejected. This in turn means that we won't use\n            // `transactionFnResult` below. We return a rejection here so that we don't add the\n            // possibility of returning `void` to the type of `transactionFnResult`.\n            return PersistencePromise.reject<T>(error);\n          })\n          .toPromise();\n\n        // As noted above, errors are propagated by aborting the transaction. So\n        // we swallow any error here to avoid the browser logging it as unhandled.\n        transactionFnResult.catch(() => {});\n\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        await transaction.completionPromise;\n        return transactionFnResult;\n      } catch (e) {\n        const error = e as Error;\n        // TODO(schmidt-sebastian): We could probably be smarter about this and\n        // not retry exceptions that are likely unrecoverable (such as quota\n        // exceeded errors).\n\n        // Note: We cannot use an instanceof check for FirestoreException, since the\n        // exception is wrapped in a generic error by our async/await handling.\n        const retryable =\n          error.name !== 'FirebaseError' &&\n          attemptNumber < TRANSACTION_RETRY_COUNT;\n        logDebug(\n          LOG_TAG,\n          'Transaction failed with error:',\n          error.message,\n          'Retrying:',\n          retryable\n        );\n\n        this.close();\n\n        if (!retryable) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  }\n\n  close(): void {\n    if (this.db) {\n      this.db.close();\n    }\n    this.db = undefined;\n  }\n}\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nexport class IterationController {\n  private shouldStop = false;\n  private nextKey: IDBValidKey | null = null;\n\n  constructor(private dbCursor: IDBCursorWithValue) {}\n\n  get isDone(): boolean {\n    return this.shouldStop;\n  }\n\n  get skipToKey(): IDBValidKey | null {\n    return this.nextKey;\n  }\n\n  set cursor(value: IDBCursorWithValue) {\n    this.dbCursor = value;\n  }\n\n  /**\n   * This function can be called to stop iteration at any point.\n   */\n  done(): void {\n    this.shouldStop = true;\n  }\n\n  /**\n   * This function can be called to skip to that next key, which could be\n   * an index or a primary key.\n   */\n  skip(key: IDBValidKey): void {\n    this.nextKey = key;\n  }\n\n  /**\n   * Delete the current cursor value from the object store.\n   *\n   * NOTE: You CANNOT do this with a keysOnly query.\n   */\n  delete(): PersistencePromise<void> {\n    return wrapRequest<void>(this.dbCursor.delete());\n  }\n}\n\n/**\n * Callback used with iterate() method.\n */\nexport type IterateCallback<KeyType, ValueType> = (\n  key: KeyType,\n  value: ValueType,\n  control: IterationController\n) => void | PersistencePromise<void>;\n\n/** Options available to the iterate() method. */\nexport interface IterateOptions {\n  /** Index to iterate over (else primary keys will be iterated) */\n  index?: string;\n\n  /** IndxedDB Range to iterate over (else entire store will be iterated) */\n  range?: IDBKeyRange;\n\n  /** If true, values aren't read while iterating. */\n  keysOnly?: boolean;\n\n  /** If true, iterate over the store in reverse. */\n  reverse?: boolean;\n}\n\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\nexport class IndexedDbTransactionError extends FirestoreError {\n  name = 'IndexedDbTransactionError';\n\n  constructor(actionName: string, cause: Error | string) {\n    super(\n      Code.UNAVAILABLE,\n      `IndexedDB transaction '${actionName}' failed: ${cause}`\n    );\n  }\n}\n\n/** Verifies whether `e` is an IndexedDbTransactionError. */\nexport function isIndexedDbTransactionError(e: Error): boolean {\n  // Use name equality, as instanceof checks on errors don't work with errors\n  // that wrap other errors.\n  return e.name === 'IndexedDbTransactionError';\n}\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nexport class SimpleDbStore<\n  KeyType extends IDBValidKey,\n  ValueType extends unknown\n> {\n  constructor(private store: IDBObjectStore) {}\n\n  /**\n   * Writes a value into the Object Store.\n   *\n   * @param key - Optional explicit key to use when writing the object, else the\n   * key will be auto-assigned (e.g. via the defined keyPath for the store).\n   * @param value - The object to write.\n   */\n  put(value: ValueType): PersistencePromise<void>;\n  put(key: KeyType, value: ValueType): PersistencePromise<void>;\n  put(\n    keyOrValue: KeyType | ValueType,\n    value?: ValueType\n  ): PersistencePromise<void> {\n    let request;\n    if (value !== undefined) {\n      logDebug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue as KeyType);\n    } else {\n      logDebug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue as ValueType);\n    }\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * Adds a new value into an Object Store and returns the new key. Similar to\n   * IndexedDb's `add()`, this method will fail on primary key collisions.\n   *\n   * @param value - The object to write.\n   * @returns The key of the value to add.\n   */\n  add(value: ValueType): PersistencePromise<KeyType> {\n    logDebug(LOG_TAG, 'ADD', this.store.name, value, value);\n    const request = this.store.add(value as ValueType);\n    return wrapRequest<KeyType>(request);\n  }\n\n  /**\n   * Gets the object with the specified key from the specified store, or null\n   * if no object exists with the specified key.\n   *\n   * @key The key of the object to get.\n   * @returns The object with the specified key or null if no object exists.\n   */\n  get(key: KeyType): PersistencePromise<ValueType | null> {\n    const request = this.store.get(key);\n    // We're doing an unsafe cast to ValueType.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return wrapRequest<any>(request).next(result => {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n      logDebug(LOG_TAG, 'GET', this.store.name, key, result);\n      return result;\n    });\n  }\n\n  delete(key: KeyType | IDBKeyRange): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE', this.store.name, key);\n    const request = this.store.delete(key);\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * If we ever need more of the count variants, we can add overloads. For now,\n   * all we need is to count everything in a store.\n   *\n   * Returns the number of rows in the store.\n   */\n  count(): PersistencePromise<number> {\n    logDebug(LOG_TAG, 'COUNT', this.store.name);\n    const request = this.store.count();\n    return wrapRequest<number>(request);\n  }\n\n  /** Loads all elements from the object store. */\n  loadAll(): PersistencePromise<ValueType[]>;\n  /** Loads all elements for the index range from the object store. */\n  loadAll(range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  /** Loads all elements ordered by the given index. */\n  loadAll(index: string): PersistencePromise<ValueType[]>;\n  /**\n   * Loads all elements from the object store that fall into the provided in the\n   * index range for the given index.\n   */\n  loadAll(index: string, range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<ValueType[]> {\n    const iterateOptions = this.options(indexOrRange, range);\n    // Use `getAll()` if the browser supports IndexedDB v3, as it is roughly\n    // 20% faster. Unfortunately, getAll() does not support custom indices.\n    if (!iterateOptions.index && typeof this.store.getAll === 'function') {\n      const request = this.store.getAll(iterateOptions.range);\n      return new PersistencePromise((resolve, reject) => {\n        request.onerror = (event: Event) => {\n          reject((event.target as IDBRequest).error!);\n        };\n        request.onsuccess = (event: Event) => {\n          resolve((event.target as IDBRequest).result);\n        };\n      });\n    } else {\n      const cursor = this.cursor(iterateOptions);\n      const results: ValueType[] = [];\n      return this.iterateCursor(cursor, (key, value) => {\n        results.push(value);\n      }).next(() => {\n        return results;\n      });\n    }\n  }\n\n  /**\n   * Loads the first `count` elements from the provided index range. Loads all\n   * elements if no limit is provided.\n   */\n  loadFirst(\n    range: IDBKeyRange,\n    count: number | null\n  ): PersistencePromise<ValueType[]> {\n    const request = this.store.getAll(\n      range,\n      count === null ? undefined : count\n    );\n    return new PersistencePromise((resolve, reject) => {\n      request.onerror = (event: Event) => {\n        reject((event.target as IDBRequest).error!);\n      };\n      request.onsuccess = (event: Event) => {\n        resolve((event.target as IDBRequest).result);\n      };\n    });\n  }\n\n  deleteAll(): PersistencePromise<void>;\n  deleteAll(range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(index: string, range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE ALL', this.store.name);\n    const options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, (key, value, control) => {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  }\n\n  /**\n   * Iterates over keys and values in an object store.\n   *\n   * @param options - Options specifying how to iterate the objects in the\n   * store.\n   * @param callback - will be called for each iterated object. Iteration can be\n   * canceled at any point by calling the doneFn passed to the callback.\n   * The callback can return a PersistencePromise if it performs async\n   * operations but note that iteration will continue without waiting for them\n   * to complete.\n   * @returns A PersistencePromise that resolves once all PersistencePromises\n   * returned by callbacks resolve.\n   */\n  iterate(\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    options: IterateOptions,\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    optionsOrCallback: IterateOptions | IterateCallback<KeyType, ValueType>,\n    callback?: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    let options;\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback as IterateCallback<KeyType, ValueType>;\n    } else {\n      options = optionsOrCallback as IterateOptions;\n    }\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  }\n\n  /**\n   * Iterates over a store, but waits for the given callback to complete for\n   * each entry before iterating the next entry. This allows the callback to do\n   * asynchronous work to determine if this iteration should continue.\n   *\n   * The provided callback should return `true` to continue iteration, and\n   * `false` otherwise.\n   */\n  iterateSerial(\n    callback: (k: KeyType, v: ValueType) => PersistencePromise<boolean>\n  ): PersistencePromise<void> {\n    const cursorRequest = this.cursor({});\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        const error = checkForAndReportiOSError(\n          (event.target as IDBRequest).error!\n        );\n        reject(error);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n\n        callback(cursor.primaryKey as KeyType, cursor.value).next(\n          shouldContinue => {\n            if (shouldContinue) {\n              cursor.continue();\n            } else {\n              resolve();\n            }\n          }\n        );\n      };\n    });\n  }\n\n  private iterateCursor(\n    cursorRequest: IDBRequest,\n    fn: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    const results: Array<PersistencePromise<void>> = [];\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        reject((event.target as IDBRequest).error!);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const controller = new IterationController(cursor);\n        const userResult = fn(\n          cursor.primaryKey as KeyType,\n          cursor.value,\n          controller\n        );\n        if (userResult instanceof PersistencePromise) {\n          const userPromise: PersistencePromise<void> = userResult.catch(\n            err => {\n              controller.done();\n              return PersistencePromise.reject(err);\n            }\n          );\n          results.push(userPromise);\n        }\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(() => PersistencePromise.waitFor(results));\n  }\n\n  private options(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): IterateOptions {\n    let indexName: string | undefined = undefined;\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        debugAssert(\n          range === undefined,\n          '3rd argument must not be defined if 2nd is a range.'\n        );\n        range = indexOrRange;\n      }\n    }\n    return { index: indexName, range };\n  }\n\n  private cursor(options: IterateOptions): IDBRequest {\n    let direction: IDBCursorDirection = 'next';\n    if (options.reverse) {\n      direction = 'prev';\n    }\n    if (options.index) {\n      const index = this.store.index(options.index);\n      if (options.keysOnly) {\n        return index.openKeyCursor(options.range, direction);\n      } else {\n        return index.openCursor(options.range, direction);\n      }\n    } else {\n      return this.store.openCursor(options.range, direction);\n    }\n  }\n}\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest<R>(request: IDBRequest): PersistencePromise<R> {\n  return new PersistencePromise<R>((resolve, reject) => {\n    request.onsuccess = (event: Event) => {\n      const result = (event.target as IDBRequest).result;\n      resolve(result);\n    };\n\n    request.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      reject(error);\n    };\n  });\n}\n\n// Guard so we only report the error once.\nlet reportedIOSError = false;\nfunction checkForAndReportiOSError(error: DOMException): Error {\n  const iOSVersion = SimpleDb.getIOSVersion(getUA());\n  if (iOSVersion >= 12.2 && iOSVersion < 13) {\n    const IOS_ERROR =\n      'An internal error was encountered in the Indexed Database server';\n    if (error.message.indexOf(IOS_ERROR) >= 0) {\n      // Wrap error in a more descriptive one.\n      const newError = new FirestoreError(\n        'internal',\n        `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${IOS_ERROR}'. This is likely ` +\n          `due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 ` +\n          `for details and a potential workaround.`\n      );\n      if (!reportedIOSError) {\n        reportedIOSError = true;\n        // Throw a global exception outside of this promise chain, for the user to\n        // potentially catch.\n        setTimeout(() => {\n          throw newError;\n        }, 0);\n      }\n      return newError;\n    }\n  }\n  return error;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance } from '@firebase/util';\n\nimport { Transaction as InternalTransaction } from '../core/transaction';\nimport {\n  DEFAULT_TRANSACTION_OPTIONS,\n  TransactionOptions as TranasactionOptionsInternal,\n  validateTransactionOptions\n} from '../core/transaction_options';\nimport { TransactionRunner } from '../core/transaction_runner';\nimport { fail } from '../util/assert';\nimport { newAsyncQueue } from '../util/async_queue_impl';\nimport { cast } from '../util/input_validation';\nimport { Deferred } from '../util/promise';\n\nimport { getDatastore } from './components';\nimport { Firestore } from './database';\nimport { FieldPath } from './field_path';\nimport {\n  DocumentData,\n  DocumentReference,\n  PartialWithFieldValue,\n  SetOptions,\n  UpdateData,\n  WithFieldValue\n} from './reference';\nimport {\n  applyFirestoreDataConverter,\n  LiteUserDataWriter\n} from './reference_impl';\nimport { DocumentSnapshot } from './snapshot';\nimport { TransactionOptions } from './transaction_options';\nimport {\n  newUserDataReader,\n  parseSetData,\n  parseUpdateData,\n  parseUpdateVarargs,\n  UserDataReader\n} from './user_data_reader';\nimport { validateReference } from './write_batch';\n\n// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n// legacy SDK.\n\n/**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */\nexport class Transaction {\n  // This is the tree-shakeable version of the Transaction class used in the\n  // legacy SDK. The class is a close copy but takes different input and output\n  // types. The firestore-exp SDK further extends this class to return its API\n  // type.\n\n  private readonly _dataReader: UserDataReader;\n\n  /** @hideconstructor */\n  constructor(\n    protected readonly _firestore: Firestore,\n    private readonly _transaction: InternalTransaction\n  ) {\n    this._dataReader = newUserDataReader(_firestore);\n  }\n\n  /**\n   * Reads the document referenced by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be read.\n   * @returns A `DocumentSnapshot` with the read data.\n   */\n  get<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>\n  ): Promise<DocumentSnapshot<AppModelType, DbModelType>> {\n    const ref = validateReference(documentRef, this._firestore);\n    const userDataWriter = new LiteUserDataWriter(this._firestore);\n    return this._transaction.lookup([ref._key]).then(docs => {\n      if (!docs || docs.length !== 1) {\n        return fail('Mismatch in docs returned from document lookup.');\n      }\n      const doc = docs[0];\n      if (doc.isFoundDocument()) {\n        return new DocumentSnapshot<AppModelType, DbModelType>(\n          this._firestore,\n          userDataWriter,\n          doc.key,\n          doc,\n          ref.converter\n        );\n      } else if (doc.isNoDocument()) {\n        return new DocumentSnapshot<AppModelType, DbModelType>(\n          this._firestore,\n          userDataWriter,\n          ref._key,\n          null,\n          ref.converter\n        );\n      } else {\n        throw fail(\n          `BatchGetDocumentsRequest returned unexpected document: ${doc}`\n        );\n      }\n    });\n  }\n\n  /**\n   * Writes to the document referred to by the provided {@link\n   * DocumentReference}. If the document does not exist yet, it will be created.\n   *\n   * @param documentRef - A reference to the document to be set.\n   * @param data - An object of the fields and values for the document.\n   * @throws Error - If the provided input is not a valid Firestore document.\n   * @returns This `Transaction` instance. Used for chaining method calls.\n   */\n  set<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    data: WithFieldValue<AppModelType>\n  ): this;\n  /**\n   * Writes to the document referred to by the provided {@link\n   * DocumentReference}. If the document does not exist yet, it will be created.\n   * If you provide `merge` or `mergeFields`, the provided data can be merged\n   * into an existing document.\n   *\n   * @param documentRef - A reference to the document to be set.\n   * @param data - An object of the fields and values for the document.\n   * @param options - An object to configure the set behavior.\n   * @throws Error - If the provided input is not a valid Firestore document.\n   * @returns This `Transaction` instance. Used for chaining method calls.\n   */\n  set<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    data: PartialWithFieldValue<AppModelType>,\n    options: SetOptions\n  ): this;\n  set<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    value: PartialWithFieldValue<AppModelType>,\n    options?: SetOptions\n  ): this {\n    const ref = validateReference(documentRef, this._firestore);\n    const convertedValue = applyFirestoreDataConverter(\n      ref.converter,\n      value,\n      options\n    );\n    const parsed = parseSetData(\n      this._dataReader,\n      'Transaction.set',\n      ref._key,\n      convertedValue,\n      ref.converter !== null,\n      options\n    );\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n\n  /**\n   * Updates fields in the document referred to by the provided {@link\n   * DocumentReference}. The update will fail if applied to a document that does\n   * not exist.\n   *\n   * @param documentRef - A reference to the document to be updated.\n   * @param data - An object containing the fields and values with which to\n   * update the document. Fields can contain dots to reference nested fields\n   * within the document.\n   * @throws Error - If the provided input is not valid Firestore data.\n   * @returns This `Transaction` instance. Used for chaining method calls.\n   */\n  update<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    data: UpdateData<DbModelType>\n  ): this;\n  /**\n   * Updates fields in the document referred to by the provided {@link\n   * DocumentReference}. The update will fail if applied to a document that does\n   * not exist.\n   *\n   * Nested fields can be updated by providing dot-separated field path\n   * strings or by providing `FieldPath` objects.\n   *\n   * @param documentRef - A reference to the document to be updated.\n   * @param field - The first field to update.\n   * @param value - The first value.\n   * @param moreFieldsAndValues - Additional key/value pairs.\n   * @throws Error - If the provided input is not valid Firestore data.\n   * @returns This `Transaction` instance. Used for chaining method calls.\n   */\n  update<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    field: string | FieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): this;\n  update<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>,\n    fieldOrUpdateData: string | FieldPath | UpdateData<DbModelType>,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): this {\n    const ref = validateReference(documentRef, this._firestore);\n\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\n\n    let parsed;\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof FieldPath\n    ) {\n      parsed = parseUpdateVarargs(\n        this._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      parsed = parseUpdateData(\n        this._dataReader,\n        'Transaction.update',\n        ref._key,\n        fieldOrUpdateData\n      );\n    }\n\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `Transaction` instance. Used for chaining method calls.\n   */\n  delete<AppModelType, DbModelType extends DocumentData>(\n    documentRef: DocumentReference<AppModelType, DbModelType>\n  ): this {\n    const ref = validateReference(documentRef, this._firestore);\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */\nexport function runTransaction<T>(\n  firestore: Firestore,\n  updateFunction: (transaction: Transaction) => Promise<T>,\n  options?: TransactionOptions\n): Promise<T> {\n  firestore = cast(firestore, Firestore);\n  const datastore = getDatastore(firestore);\n  const optionsWithDefaults: TranasactionOptionsInternal = {\n    ...DEFAULT_TRANSACTION_OPTIONS,\n    ...options\n  };\n  validateTransactionOptions(optionsWithDefaults);\n  const deferred = new Deferred<T>();\n  new TransactionRunner<T>(\n    newAsyncQueue(),\n    datastore,\n    optionsWithDefaults,\n    internalTransaction =>\n      updateFunction(new Transaction(firestore, internalTransaction)),\n    deferred\n  ).run();\n  return deferred.promise;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { version } from '../package.json';\nimport {\n  LiteAppCheckTokenProvider,\n  LiteAuthCredentialsProvider\n} from '../src/api/credentials';\nimport { databaseIdFromApp } from '../src/core/database_info';\nimport { setSDKVersion } from '../src/core/version';\nimport { Firestore } from '../src/lite-api/database';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'firestore/lite': Firestore;\n  }\n}\n\nexport function registerFirestore(): void {\n  setSDKVersion(`${SDK_VERSION}_lite`);\n  _registerComponent(\n    new Component(\n      'firestore/lite',\n      (container, { instanceIdentifier: databaseId, options: settings }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const firestoreInstance = new Firestore(\n          new LiteAuthCredentialsProvider(\n            container.getProvider('auth-internal')\n          ),\n          new LiteAppCheckTokenProvider(\n            container.getProvider('app-check-internal')\n          ),\n          databaseIdFromApp(app, databaseId),\n          app\n        );\n        if (settings) {\n          firestoreInstance._setSettings(settings);\n        }\n        return firestoreInstance;\n      },\n      'PUBLIC' as ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\n  registerVersion('firestore-lite', version, '__RUNTIME_ENV__');\n  registerVersion('firestore-lite', version, '__BUILD_TARGET__');\n}\n", "/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerFirestore } from './register';\nregisterFirestore();\n\nexport {\n  aggregateQuerySnapshotEqual,\n  getCount,\n  getAggregate,\n  count,\n  sum,\n  average,\n  aggregateFieldEqual\n} from '../src/lite-api/aggregate';\n\nexport {\n  AggregateField,\n  AggregateFieldType,\n  AggregateSpec,\n  AggregateSpecData,\n  AggregateQuerySnapshot,\n  AggregateType\n} from '../src/lite-api/aggregate_types';\n\nexport { FirestoreSettings as Settings } from '../src/lite-api/settings';\n\nexport {\n  Firestore as Firestore,\n  EmulatorMockTokenOptions,\n  initializeFirestore,\n  getFirestore,\n  terminate,\n  connectFirestoreEmulator\n} from '../src/lite-api/database';\n\nexport {\n  DocumentData,\n  UpdateData,\n  WithFieldValue,\n  PartialWithFieldValue,\n  SetOptions,\n  DocumentReference,\n  Query,\n  CollectionReference,\n  collection,\n  collectionGroup,\n  doc,\n  refEqual,\n  queryEqual\n} from '../src/lite-api/reference';\n\nexport {\n  and,\n  endAt,\n  endBefore,\n  startAt,\n  startAfter,\n  limit,\n  limitToLast,\n  where,\n  or,\n  orderBy,\n  query,\n  QueryConstraint,\n  QueryConstraintType,\n  QueryCompositeFilterConstraint,\n  QueryFilterConstraint,\n  QueryFieldFilterConstraint,\n  QueryOrderByConstraint,\n  QueryLimitConstraint,\n  QueryNonFilterConstraint,\n  QueryStartAtConstraint,\n  QueryEndAtConstraint,\n  OrderByDirection,\n  WhereFilterOp\n} from '../src/lite-api/query';\n\nexport {\n  addDoc,\n  deleteDoc,\n  updateDoc,\n  setDoc,\n  getDoc,\n  getDocs\n} from '../src/lite-api/reference_impl';\n\nexport {\n  Primitive,\n  NestedUpdateFields,\n  ChildUpdateFields,\n  AddPrefixToKeys,\n  UnionToIntersection\n} from '../src/lite-api/types';\n\n// TOOD(firestorelite): Add tests when Queries are usable\nexport { FieldPath, documentId } from '../src/lite-api/field_path';\n\n// TOOD(firestorelite): Add tests when setDoc() is available\nexport { FieldValue } from '../src/lite-api/field_value';\n\nexport {\n  increment,\n  arrayRemove,\n  arrayUnion,\n  serverTimestamp,\n  deleteField\n} from '../src/lite-api/field_value_impl';\n\nexport {\n  FirestoreDataConverter,\n  DocumentSnapshot,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  snapshotEqual\n} from '../src/lite-api/snapshot';\n\nexport { WriteBatch, writeBatch } from '../src/lite-api/write_batch';\n\nexport { TransactionOptions } from '../src/lite-api/transaction_options';\n\nexport { Transaction, runTransaction } from '../src/lite-api/transaction';\n\nexport { setLogLevel, LogLevelString as LogLevel } from '../src/util/log';\n\nexport { Bytes } from '../src/lite-api/bytes';\n\nexport { GeoPoint } from '../src/lite-api/geo_point';\n\nexport { Timestamp } from '../src/lite-api/timestamp';\n\nexport { FirestoreErrorCode, FirestoreError } from '../src/util/error';\n"],
  "mappings": "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",
  "names": ["User", "constructor", "uid", "this", "isAuthenticated", "toKey", "isEqual", "otherUser", "UNAUTHENTICATED", "GOOGLE_CREDENTIALS", "FIRST_PARTY", "MOCK_USER", "SDK_VERSION", "__PRIVATE_logClient", "Logger", "setLogLevel", "logLevel", "__PRIVATE_logDebug", "msg", "obj", "LogLevel", "DEBUG", "args", "map", "__PRIVATE_argToString", "debug", "__PRIVATE_logError", "ERROR", "error", "__PRIVATE_logWarn", "WARN", "warn", "__PRIVATE_formatJSON", "value", "JSON", "stringify", "e", "fail", "__PRIVATE_failure", "message", "Error", "__PRIVATE_hardAssert", "assertion", "__PRIVATE_debugCast", "Code", "FirestoreError", "FirebaseError", "code", "super", "toString", "name", "__PRIVATE_Deferred", "promise", "Promise", "resolve", "reject", "__PRIVATE_OAuthToken", "user", "type", "headers", "Map", "set", "__PRIVATE_EmptyAuthCredentialsProvider", "getToken", "invalidateToken", "start", "asyncQueue", "changeListener", "enqueueRetryable", "shutdown", "__PRIVATE_EmulatorAuthCredentialsProvider", "token", "__PRIVATE_LiteAuthCredentialsProvider", "__PRIVATE_authProvider", "auth", "onInit", "then", "__PRIVATE_tokenData", "accessToken", "getUid", "__PRIVATE_FirstPartyToken", "__PRIVATE_sessionIndex", "__PRIVATE_iamToken", "__PRIVATE_authTokenFactory", "__PRIVATE__headers", "__PRIVATE_getAuthToken", "__PRIVATE_authHeaderTokenValue", "__PRIVATE_FirstPartyAuthCredentialsProvider", "AppCheckToken", "length", "__PRIVATE_LiteAppCheckTokenProvider", "__PRIVATE_appCheckProvider", "appCheck", "tokenResult", "DatabaseInfo", "databaseId", "appId", "persistenceKey", "host", "ssl", "forceLongPolling", "autoDetectLongPolling", "longPollingOptions", "useFetchStreams", "DatabaseId", "projectId", "database", "static", "isDefaultDatabase", "other", "BasePath", "segments", "offset", "undefined", "len", "comparator", "child", "nameOrPath", "slice", "limit", "forEach", "segment", "push", "construct", "popFirst", "size", "popLast", "firstSegment", "lastSegment", "get", "index", "isEmpty", "isPrefixOf", "__PRIVATE_i", "isImmediateParentOf", "potentialChild", "fn", "end", "toArray", "p1", "p2", "Math", "min", "left", "right", "ResourcePath", "canonicalString", "join", "pathComponents", "path", "indexOf", "split", "filter", "__PRIVATE_identifierRegExp", "FieldPath", "test", "str", "replace", "isValidIdentifier", "isKeyField", "current", "__PRIVATE_addCurrentSegment", "__PRIVATE_inBackticks", "c", "next", "DocumentKey", "fromString", "emptyPath", "collectionGroup", "hasCollectionId", "collectionId", "getCollectionGroup", "getCollectionPath", "k1", "k2", "__PRIVATE_validateNonEmptyArgument", "__PRIVATE_functionName", "__PRIVATE_argumentName", "__PRIVATE_argument", "__PRIVATE_validateDocumentPath", "isDocumentKey", "__PRIVATE_validateCollectionPath", "__PRIVATE_valueDescription", "input", "substring", "Array", "__PRIVATE_customObjectName", "__PRIVATE_tryGetCustomObjectType", "__PRIVATE_cast", "_delegate", "description", "__PRIVATE_validatePositiveNumber", "n", "__PRIVATE_cloneLongPollingOptions", "options", "clone", "timeoutSeconds", "__PRIVATE_lastUniqueDebugId", "__PRIVATE_generateUniqueDebugId", "__PRIVATE_generateInitialUniqueDebugId", "round", "__PRIVATE_maxResult", "random", "__PRIVATE_isNullOrUndefined", "__PRIVATE_isNegativeZero", "__PRIVATE_RPC_NAME_URL_MAPPING", "__PRIVATE_RpcCode", "RpcCode", "__PRIVATE_mapCodeFromHttpStatus", "status", "__PRIVATE_FetchConnection", "__PRIVATE_RestConnection", "databaseInfo", "proto", "encodeURIComponent", "__PRIVATE_baseUrl", "__PRIVATE_databasePath", "__PRIVATE_requestParams", "__PRIVATE_shouldResourcePathBeIncludedInRequest", "__PRIVATE_invokeRPC", "__PRIVATE_rpcName", "__PRIVATE_req", "__PRIVATE_authToken", "appCheckToken", "streamId", "url", "__PRIVATE_makeUrl", "__PRIVATE_modifyHeadersForRequest", "__PRIVATE_performRPCRequest", "response", "err", "__PRIVATE_invokeStreamingRPC", "request", "__PRIVATE_expectedResponseCount", "__PRIVATE_getGoogApiClientValue", "key", "__PRIVATE_urlRpcName", "__PRIVATE_fetchImpl", "__PRIVATE_openStream", "async", "body", "__PRIVATE_requestJson", "method", "statusText", "ok", "__PRIVATE_errorResponse", "json", "isArray", "__PRIVATE_errorMessage", "_a", "__PRIVATE_AggregateImpl", "alias", "aggregateType", "fieldPath", "__PRIVATE_randomBytes", "__PRIVATE_nBytes", "crypto", "self", "bytes", "Uint8Array", "getRandomValues", "floor", "__PRIVATE_AutoId", "__PRIVATE_chars", "__PRIVATE_maxMultiple", "__PRIVATE_autoId", "charAt", "__PRIVATE_primitiveComparator", "__PRIVATE_arrayEquals", "every", "__PRIVATE_objectSize", "count", "Object", "prototype", "hasOwnProperty", "call", "__PRIVATE_Base64DecodeError", "ByteString", "binaryString", "base64", "__PRIVATE_decodeBase64", "__PRIVATE_encoded", "atob", "DOMException", "array", "__PRIVATE_binaryStringFromUint8Array", "String", "fromCharCode", "Symbol", "iterator", "charCodeAt", "done", "toBase64", "__PRIVATE_encodeBase64", "raw", "btoa", "toUint8Array", "__PRIVATE_uint8ArrayFromBinaryString", "buffer", "approximateByteSize", "compareTo", "EMPTY_BYTE_STRING", "__PRIVATE_ISO_TIMESTAMP_REG_EXP", "RegExp", "__PRIVATE_normalizeTimestamp", "date", "nanos", "__PRIVATE_fraction", "exec", "__PRIVATE_nanoStr", "substr", "Number", "__PRIVATE_parsedDate", "Date", "seconds", "getTime", "__PRIVATE_normalizeNumber", "__PRIVATE_normalizeByteString", "blob", "fromBase64String", "fromUint8Array", "Timestamp", "nanoseconds", "fromMillis", "now", "milliseconds", "toDate", "toMillis", "_compareTo", "toJSON", "valueOf", "__PRIVATE_adjustedSeconds", "padStart", "__PRIVATE_isServerTimestamp", "_b", "mapValue", "fields", "stringValue", "__PRIVATE_getPreviousValue", "previousValue", "__PRIVATE_getLocalWriteTime", "localWriteTime", "timestampValue", "MAX_VALUE", "__type__", "__PRIVATE_typeOrder", "__PRIVATE_isMaxValue", "__PRIVATE_valueEquals", "__PRIVATE_leftType", "booleanValue", "__PRIVATE_timestampEquals", "__PRIVATE_leftTimestamp", "__PRIVATE_rightTimestamp", "__PRIVATE_blobEquals", "bytesValue", "referenceValue", "__PRIVATE_geoPointEquals", "geoPointValue", "latitude", "longitude", "__PRIVATE_numberEquals", "integerValue", "__PRIVATE_n1", "doubleValue", "__PRIVATE_n2", "isNaN", "arrayValue", "values", "__PRIVATE_objectEquals", "__PRIVATE_leftMap", "__PRIVATE_rightMap", "__PRIVATE_arrayValueContains", "__PRIVATE_haystack", "__PRIVATE_needle", "find", "v", "__PRIVATE_valueCompare", "__PRIVATE_rightType", "__PRIVATE_compareNumbers", "__PRIVATE_leftNumber", "__PRIVATE_rightNumber", "__PRIVATE_compareTimestamps", "__PRIVATE_compareBlobs", "__PRIVATE_leftBytes", "__PRIVATE_rightBytes", "__PRIVATE_compareReferences", "__PRIVATE_leftPath", "__PRIVATE_rightPath", "__PRIVATE_leftSegments", "__PRIVATE_rightSegments", "comparison", "__PRIVATE_compareGeoPoints", "__PRIVATE_compareArrays", "__PRIVATE_leftArray", "__PRIVATE_rightArray", "compare", "__PRIVATE_compareMaps", "__PRIVATE_leftKeys", "keys", "__PRIVATE_rightKeys", "sort", "__PRIVATE_keyCompare", "__PRIVATE_refValue", "__PRIVATE_isNullValue", "__PRIVATE_isNanValue", "__PRIVATE_isMapValue", "__PRIVATE_deepClone", "source", "assign", "target", "val", "Bound", "position", "inclusive", "__PRIVATE_boundEquals", "Filter", "FieldFilter", "field", "op", "createKeyFieldInFilter", "__PRIVATE_KeyFieldFilter", "__PRIVATE_ArrayContainsFilter", "__PRIVATE_InFilter", "__PRIVATE_NotInFilter", "__PRIVATE_ArrayContainsAnyFilter", "__PRIVATE_KeyFieldInFilter", "__PRIVATE_KeyFieldNotInFilter", "matches", "doc", "data", "matchesComparison", "isInequality", "getFlattenedFilters", "getFilters", "CompositeFilter", "filters", "__PRIVATE_memoizedFlattenedFilters", "__PRIVATE_compositeFilterIsConjunction", "compositeFilter", "reduce", "result", "__PRIVATE_subfilter", "concat", "__PRIVATE_filterEquals", "__PRIVATE_f1", "__PRIVATE_f2", "__PRIVATE_fieldFilterEquals", "__PRIVATE_compositeFilterEquals", "__PRIVATE_f1Filter", "fromName", "__PRIVATE_extractDocumentKeysFromArrayValue", "some", "nullValue", "OrderBy", "dir", "__PRIVATE_orderByEquals", "SnapshotVersion", "timestamp", "toMicroseconds", "toTimestamp", "SortedMap", "root", "LLRBNode", "EMPTY", "insert", "copy", "BLACK", "remove", "node", "cmp", "__PRIVATE_prunedNodes", "minKey", "maxKey", "inorderTraversal", "action", "k", "__PRIVATE_descriptions", "reverseTraversal", "getIterator", "SortedMapIterator", "getIteratorFrom", "getReverseIterator", "getReverseIteratorFrom", "startKey", "isReverse", "nodeStack", "getNext", "pop", "hasNext", "peek", "color", "RED", "fixUp", "removeMin", "isRed", "moveRedLeft", "__PRIVATE_smallest", "rotateRight", "moveRedRight", "rotateLeft", "colorFlip", "__PRIVATE_nl", "__PRIVATE_nr", "checkMaxDepth", "__PRIVATE_blackDepth", "check", "pow", "LLRBEmptyNode", "SortedSet", "has", "elem", "first", "last", "cb", "forEachInRange", "range", "iter", "forEachWhile", "firstAfterOrEqual", "SortedSetIterator", "add", "delete", "unionWith", "__PRIVATE_thisIt", "__PRIVATE_otherIt", "__PRIVATE_thisElem", "__PRIVATE_otherElem", "__PRIVATE_res", "targetId", "FieldMask", "extraFields", "__PRIVATE_mergedMaskSet", "covers", "__PRIVATE_fieldMaskPath", "l", "r", "ObjectValue", "__PRIVATE_currentLevel", "getFieldsMap", "setAll", "parent", "__PRIVATE_upserts", "__PRIVATE_deletes", "__PRIVATE_fieldsMap", "applyChanges", "__PRIVATE_nestedValue", "__PRIVATE_inserts", "MutableDocument", "documentType", "version", "readTime", "createTime", "documentState", "documentKey", "empty", "convertToFoundDocument", "convertToNoDocument", "convertToUnknownDocument", "setHasCommittedMutations", "setHasLocalMutations", "setReadTime", "hasLocalMutations", "hasCommittedMutations", "hasPendingWrites", "isValidDocument", "isFoundDocument", "isNoDocument", "isUnknownDocument", "mutableCopy", "__PRIVATE_TargetImpl", "orderBy", "startAt", "endAt", "__PRIVATE_memoizedCanonicalId", "__PRIVATE_newTarget", "__PRIVATE_QueryImpl", "explicitOrderBy", "limitType", "__PRIVATE_memoizedNormalizedOrderBy", "__PRIVATE_memoizedTarget", "__PRIVATE_memoizedAggregateTarget", "__PRIVATE_isCollectionGroupQuery", "query", "__PRIVATE_queryNormalizedOrderBy", "__PRIVATE_queryImpl", "__PRIVATE_fieldsNormalized", "Set", "__PRIVATE_lastDirection", "__PRIVATE_inequalityFields", "__PRIVATE_getInequalityFilterFields", "keyField", "__PRIVATE_queryToTarget", "__PRIVATE__queryToTarget", "__PRIVATE_orderBys", "__PRIVATE_queryWithAddedFilter", "__PRIVATE_newFilters", "__PRIVATE_queryEquals", "__PRIVATE_targetEquals", "toNumber", "serializer", "isSafeInteger", "isInteger", "MAX_SAFE_INTEGER", "MIN_SAFE_INTEGER", "__PRIVATE_toInteger", "__PRIVATE_toDouble", "useProto3Json", "Infinity", "TransformOperation", "_", "__PRIVATE_ServerTimestampTransform", "__PRIVATE_ArrayUnionTransformOperation", "elements", "__PRIVATE_ArrayRemoveTransformOperation", "__PRIVATE_NumericIncrementTransformOperation", "__PRIVATE_operand", "FieldTransform", "transform", "Precondition", "updateTime", "exists", "isNone", "Mutation", "__PRIVATE_SetMutation", "precondition", "fieldTransforms", "getFieldMask", "__PRIVATE_PatchMutation", "fieldMask", "__PRIVATE_DeleteMutation", "__PRIVATE_VerifyMutation", "__PRIVATE_DIRECTIONS", "__PRIVATE_dirs", "__PRIVATE_OPERATORS", "__PRIVATE_ops", "__PRIVATE_COMPOSITE_OPERATORS", "JsonProtoSerializer", "toISOString", "__PRIVATE_toBytes", "__PRIVATE_toVersion", "__PRIVATE_fromVersion", "fromTimestamp", "__PRIVATE_toResourceName", "__PRIVATE_fullyQualifiedPrefixPath", "__PRIVATE_toName", "__PRIVATE_resource", "__PRIVATE_fromResourceName", "__PRIVATE_isValidResourceName", "__PRIVATE_extractLocalPathFromResourceName", "__PRIVATE_resourceName", "__PRIVATE_toQueryPath", "__PRIVATE_getEncodedDatabaseId", "__PRIVATE_toMutationDocument", "__PRIVATE_fromBatchGetDocumentsResponse", "__PRIVATE_fromFound", "found", "newFoundDocument", "__PRIVATE_fromMissing", "missing", "newNoDocument", "toMutation", "mutation", "update", "updateMask", "__PRIVATE_toDocumentMask", "verify", "updateTransforms", "__PRIVATE_toFieldTransform", "__PRIVATE_fieldTransform", "setToServerValue", "appendMissingElements", "removeAllFromArray", "increment", "currentDocument", "__PRIVATE_toPrecondition", "__PRIVATE_toQueryTarget", "structuredQuery", "from", "allDescendants", "where", "__PRIVATE_toFilters", "__PRIVATE_toFilter", "create", "__PRIVATE_toOrder", "order", "__PRIVATE_toPropertyOrder", "__PRIVATE_toFieldPathReference", "direction", "__PRIVATE_toDirection", "__PRIVATE_toInt32Proto", "__PRIVATE_toStartAtCursor", "cursor", "before", "__PRIVATE_toEndAtCursor", "__PRIVATE_toOperatorName", "__PRIVATE_toCompositeOperatorName", "__PRIVATE_toUnaryOrFieldFilter", "unaryFilter", "fieldFilter", "__PRIVATE_toCompositeFilter", "__PRIVATE_protos", "__PRIVATE_canonicalFields", "fieldPaths", "__PRIVATE_newSerializer", "__PRIVATE_ExponentialBackoff", "__PRIVATE_queue", "timerId", "__PRIVATE_initialDelayMs", "__PRIVATE_backoffFactor", "__PRIVATE_maxDelayMs", "__PRIVATE_currentBaseMs", "__PRIVATE_timerPromise", "__PRIVATE_lastAttemptTime", "reset", "__PRIVATE_resetToMax", "__PRIVATE_backoffAndRun", "cancel", "__PRIVATE_desiredDelayWithJitterMs", "__PRIVATE_jitterDelayMs", "__PRIVATE_delaySoFarMs", "max", "__PRIVATE_remainingDelayMs", "enqueueAfterDelay", "__PRIVATE_skipBackoff", "skipDelay", "__PRIVATE_DatastoreImpl", "Datastore", "authCredentials", "appCheckCredentials", "connection", "__PRIVATE_terminated", "__PRIVATE_verifyInitialized", "all", "catch", "terminate", "__PRIVATE_invokeCommitRpc", "datastore", "mutations", "__PRIVATE_datastoreImpl", "writes", "m", "__PRIVATE_invokeBatchGetDocumentsRpc", "documents", "docs", "__PRIVATE_invokeRunQueryRpc", "document", "__PRIVATE_fromDocument", "__PRIVATE_invokeRunAggregationQueryRpc", "__PRIVATE_aggregates", "Z", "__PRIVATE_aliasMap", "__PRIVATE_toRunAggregationQueryRequest", "__PRIVATE_queryTarget", "aggregations", "__PRIVATE_aggregationNum", "__PRIVATE_aggregate", "__PRIVATE_serverAlias", "avg", "sum", "structuredAggregationQuery", "__PRIVATE_queryToAggregateTarget", "__PRIVATE_filteredResult", "__PRIVATE_unmappedAggregateFields", "aggregateFields", "__PRIVATE_accumulator", "__PRIVATE_datastoreInstances", "__PRIVATE_getDatastore", "firestore", "_terminated", "__PRIVATE_newConnection", "fetch", "bind", "__PRIVATE_makeDatabaseInfo", "settings", "experimentalForceLongPolling", "experimentalAutoDetectLongPolling", "experimentalLongPollingOptions", "_databaseId", "app", "_persistenceKey", "_freezeSettings", "__PRIVATE_newDatastore", "_authCredentials", "_appCheckCredentials", "FirestoreSettingsImpl", "credentials", "ignoreUndefinedProperties", "localCache", "cacheSizeBytes", "__PRIVATE_validateIsNotUsedTogether", "optionName1", "argument1", "optionName2", "argument2", "__PRIVATE_validateLongPollingOptions", "__PRIVATE_longPollingOptionsEqual", "__PRIVATE_options1", "__PRIVATE_options2", "Firestore", "_app", "_settings", "_settingsFrozen", "_initialized", "_terminateTask", "_setSettings", "__PRIVATE_makeAuthCredentialsProvider", "_getSettings", "_delete", "_terminate", "__PRIVATE_removeComponents", "initializeFirestore", "provider", "_getProvider", "isInitialized", "initialize", "instanceIdentifier", "getFirestore", "__PRIVATE_appOrDatabaseId", "__PRIVATE_optionalDatabaseId", "getApp", "db", "getImmediate", "identifier", "__PRIVATE_emulator", "getDefaultEmulatorHostnameAndPort", "connectFirestoreEmulator", "port", "__PRIVATE_newHostSetting", "mockUserToken", "createMockUserToken", "sub", "user_id", "_removeServiceInstance", "AggregateField", "_internalFieldPath", "AggregateQuerySnapshot", "_userDataWriter", "_data", "convertObjectMap", "Query", "converter", "_query", "withConverter", "DocumentReference", "_key", "_path", "id", "CollectionReference", "__PRIVATE_newQueryForPath", "parentPath", "collection", "pathSegments", "getModularInstance", "__PRIVATE_absolutePath", "__PRIVATE_newQueryForCollectionGroup", "arguments", "newId", "refEqual", "queryEqual", "Bytes", "byteString", "_byteString", "fieldNames", "_internalPath", "__PRIVATE_InternalFieldPath", "documentId", "FieldValue", "_methodName", "GeoPoint", "isFinite", "_lat", "_long", "__PRIVATE_RESERVED_FIELD_REGEX", "ParsedSetData", "ParsedUpdateData", "__PRIVATE_isWrite", "__PRIVATE_dataSource", "__PRIVATE_ParseContextImpl", "__PRIVATE_validatePath", "__PRIVATE_contextWith", "configuration", "__PRIVATE_childContextForField", "__PRIVATE_childPath", "context", "__PRIVATE_arrayElement", "__PRIVATE_validatePathSegment", "__PRIVATE_childContextForFieldPath", "__PRIVATE_childContextForArray", "__PRIVATE_createError", "reason", "methodName", "__PRIVATE_hasConverter", "__PRIVATE_targetDoc", "contains", "__PRIVATE_UserDataReader", "__PRIVATE_createContext", "__PRIVATE_newUserDataReader", "__PRIVATE_parseSetData", "__PRIVATE_userDataReader", "merge", "mergeFields", "__PRIVATE_validatePlainObject", "__PRIVATE_updateData", "__PRIVATE_parseObject", "__PRIVATE_validatedFieldPaths", "__PRIVATE_stringOrFieldPath", "__PRIVATE_fieldPathFromArgument", "__PRIVATE_fieldMaskContains", "__PRIVATE_DeleteFieldValueImpl", "_toFieldTransform", "__PRIVATE_createSentinelChildContext", "__PRIVATE_fieldValue", "__PRIVATE_ServerTimestampFieldValueImpl", "__PRIVATE_ArrayUnionFieldValueImpl", "__PRIVATE__elements", "__PRIVATE_parseContext", "__PRIVATE_parsedElements", "element", "__PRIVATE_parseData", "arrayUnion", "__PRIVATE_ArrayRemoveFieldValueImpl", "__PRIVATE_NumericIncrementFieldValueImpl", "__PRIVATE__operand", "__PRIVATE_numericIncrement", "__PRIVATE_parseUpdateData", "__PRIVATE_fieldMaskPaths", "__PRIVATE_fieldPathFromDotSeparatedString", "__PRIVATE_childContext", "__PRIVATE_parsedValue", "mask", "__PRIVATE_parseUpdateVarargs", "moreFieldsAndValues", "__PRIVATE_parseQueryValue", "__PRIVATE_allowArrays", "__PRIVATE_looksLikeJsonObject", "__PRIVATE_parseSentinelFieldValue", "__PRIVATE_parseArray", "__PRIVATE_entryIndex", "entry", "__PRIVATE_parsedEntry", "__PRIVATE_parseScalarValue", "fromDate", "__PRIVATE_thisDb", "__PRIVATE_otherDb", "__PRIVATE_isPlainObject", "getPrototypeOf", "__PRIVATE_FIELD_PATH_RESERVED", "search", "__PRIVATE_hasPath", "__PRIVATE_hasDocument", "DocumentSnapshot", "_firestore", "_document", "_converter", "ref", "snapshot", "QueryDocumentSnapshot", "fromFirestore", "convertValue", "QuerySnapshot", "_docs", "callback", "thisArg", "snapshotEqual", "arg", "AppliableConstraint", "QueryConstraint", "__PRIVATE_queryConstraint", "__PRIVATE_additionalQueryConstraints", "queryConstraints", "__PRIVATE_validateQueryConstraintArray", "__PRIVATE_compositeFilterCount", "QueryCompositeFilterConstraint", "__PRIVATE_fieldFilterCount", "QueryFieldFilterConstraint", "constraint", "_apply", "_field", "_op", "_value", "_parse", "__PRIVATE_validateNewFieldFilter", "__PRIVATE_reader", "__PRIVATE_newQueryFilter", "__PRIVATE_dataReader", "__PRIVATE_validateDisjunctiveFilterElements", "__PRIVATE_referenceList", "__PRIVATE_parseDocumentIdValue", "opStr", "_create", "_queryConstraints", "__PRIVATE_parsedFilters", "__PRIVATE_parsedFilter", "_getOperator", "__PRIVATE_validateNewFilter", "__PRIVATE_testQuery", "__PRIVATE_subFilters", "__PRIVATE_subFilter", "_getQueryConstraints", "or", "__PRIVATE_validateQueryFilterConstraint", "and", "QueryOrderByConstraint", "_direction", "__PRIVATE_newQueryOrderBy", "__PRIVATE_queryWithAddedOrderBy", "__PRIVATE_newOrderBy", "directionStr", "QueryLimitConstraint", "_limit", "_limitType", "__PRIVATE_queryWithLimit", "limitToLast", "QueryStartAtConstraint", "_docOrFields", "_inclusive", "bound", "__PRIVATE_newQueryBoundFromDocOrFields", "__PRIVATE_queryWithStartAt", "__PRIVATE_docOrFields", "startAfter", "QueryEndAtConstraint", "__PRIVATE_queryWithEndAt", "endBefore", "__PRIVATE_newQueryBoundFromDocument", "components", "__PRIVATE_newQueryBoundFromFields", "__PRIVATE_rawValue", "__PRIVATE_wrapped", "__PRIVATE_documentIdValue", "operator", "__PRIVATE_conflictingOp", "__PRIVATE_findOpInsideFilters", "__PRIVATE_operators", "__PRIVATE_conflictingOps", "__PRIVATE_applyFirestoreDataConverter", "__PRIVATE_convertedValue", "toFirestore", "__PRIVATE_LiteUserDataWriter", "AbstractUserDataWriter", "serverTimestampBehavior", "convertTimestamp", "convertServerTimestamp", "convertBytes", "convertReference", "convertGeoPoint", "convertArray", "convertObject", "__PRIVATE_normalizedValue", "convertDocumentKey", "expectedDatabaseId", "__PRIVATE_resourcePath", "getDoc", "reference", "userDataWriter", "getDocs", "__PRIVATE_validateHasExplicitOrderByForLimitToLast", "reverse", "setDoc", "__PRIVATE_parsed", "none", "updateDoc", "__PRIVATE_fieldOrUpdateData", "deleteDoc", "addDoc", "__PRIVATE_docRef", "getCount", "getAggregate", "aggregateSpec", "__PRIVATE_internalAggregates", "__PRIVATE_mapToArray", "__PRIVATE_aggregateResult", "__PRIVATE_convertToAggregateQuerySnapshot", "average", "aggregateFieldEqual", "aggregateQuerySnapshotEqual", "deepEqual", "deleteField", "serverTimestamp", "arrayRemove", "WriteBatch", "_commitHandler", "_mutations", "_committed", "_dataReader", "documentRef", "_verifyNotCommitted", "__PRIVATE_validateReference", "commit", "writeBatch", "Transaction", "readVersions", "committed", "lastWriteError", "writtenDocs", "ensureCommitNotCalled", "recordVersion", "write", "preconditionForUpdate", "__PRIVATE_unwritten", "fromPath", "__PRIVATE_docVersion", "__PRIVATE_existingVersion", "__PRIVATE_DEFAULT_TRANSACTION_OPTIONS", "maxAttempts", "__PRIVATE_TransactionRunner", "updateFunction", "deferred", "__PRIVATE_attemptsRemaining", "__PRIVATE_backoff", "run", "__PRIVATE_runWithBackOff", "transaction", "__PRIVATE_userPromise", "__PRIVATE_tryRunUpdateFunction", "enqueueAndForget", "__PRIVATE_commitError", "__PRIVATE_handleTransactionError", "__PRIVATE_userPromiseError", "__PRIVATE_isRetryableTransactionError", "__PRIVATE_isPermanentError", "getDocument", "DelayedOperation", "targetTimeMs", "removalCallback", "delayMs", "__PRIVATE_targetTime", "__PRIVATE_delayedOp", "timerHandle", "setTimeout", "handleDelayElapsed", "clearTimeout", "__PRIVATE_AsyncQueueImpl", "__PRIVATE_tail", "__PRIVATE_retryableOps", "__PRIVATE__isShuttingDown", "__PRIVATE_delayedOperations", "__PRIVATE_operationInProgress", "__PRIVATE_skipNonRestrictedTasks", "__PRIVATE_timerIdsToSkip", "__PRIVATE_visibilityHandler", "visibilityState", "addEventListener", "isShuttingDown", "enqueue", "enqueueAndForgetEvenWhileRestricted", "__PRIVATE_verifyNotFailed", "__PRIVATE_enqueueInternal", "enterRestrictedMode", "purgeExistingTasks", "removeEventListener", "task", "__PRIVATE_retryNextOp", "shift", "__PRIVATE_isIndexedDbTransactionError", "__PRIVATE_newTail", "__PRIVATE_getMessageOrStack", "stack", "includes", "createAndSchedule", "__PRIVATE_removedOp", "__PRIVATE_removeDelayedOperation", "verifyOperationInProgress", "__PRIVATE_currentTail", "__PRIVATE_containsDelayedOperation", "__PRIVATE_runAllDelayedOperationsUntil", "__PRIVATE_lastTimerId", "__PRIVATE_drain", "a", "b", "__PRIVATE_skipDelaysForTimerId", "splice", "_transaction", "lookup", "runTransaction", "__PRIVATE_optionsWithDefaults", "__PRIVATE_validateTransactionOptions", "__PRIVATE_newAsyncQueue", "__PRIVATE_internalTransaction", "__PRIVATE_registerFirestore", "__PRIVATE_setSDKVersion", "_registerComponent", "Component", "container", "getProvider", "__PRIVATE_firestoreInstance", "__PRIVATE_databaseIdFromApp", "apply", "setMultipleInstances", "registerVersion"]
}
